Print["setting history length to 1"];
$HistoryLength=1;
Get["pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
Get["emscsToMma`"]
Get["betterRBC`"]
phiMat=getPhi[linModBetter]
fMat=getF[linModBetter]
tErrMat=truncErrorMat[fMat,phiMat,0]
tErrMatMax=Norm[tErrMat,Infinity]


actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetter@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]


approxErrs[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{eqnsCompiledBetter @@ makeArgs[{approxDR,approxDRCE},xeps]}])]]]


approxErrsK[approxDR_Function,approxDRCE_Function,theK_Integer,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{checkPt[approxDR,approxDRCE,theK,xeps]}])]]]


makeArgs[{adr_,adrce_},{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{},
With[{xt=Flatten[adr[ig,kk,ig,tt,ee]][[Range[4]]]},
With[{xtp1=Flatten[adrce@@xt][[Range[4]]]},
Append[Join[{999,kk,999,tt},xt,xtp1],ee]]]]



smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
aDir="resDir/"
fNameString[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
StringReplace[aDir<>"forBetterRBC-"<>ToString[approx]<>"Iters"<>ToString[iters]<>"theK"<>ToString[theK]<>"numKern"<>ToString[numKern],{" "->"","{"->"-","}"->"-"}];


kl=betterRBC`Private`kLow 
kh=betterRBC`Private`kHigh
tl=betterRBC`Private`thLow
th=betterRBC`Private`thHigh
sl=betterRBC`Private`sigLow
sh=betterRBC`Private`sigHigh



checkPt[adr_,adrce_,theK_Integer,aPt:{kk_?NumberQ,tt_?NumberQ,eps_?NumberQ}]:=
Module[{},
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xkzkFunc=
genLilXkZkFunc[linModBetter,{adrce,theK},xzt[[Range[4]]]];
xkApply=Flatten[xkzkFunc @@ Join[xtm1eps,Flatten[xzt[[4+Range[4]]]]]];
eqnsCompiledBetter @@ xkApply]




doIt[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{ptErg,tfErg,plyErg,iplyErg,dplyErg},
Print["doIt:"];
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};
bmr=ConvexHullMesh[ptErg[[All,{1,2}]]];
rbnds=RegionBounds[bmr];
Print["doIt:sgSpecErg done"];
evs=Eigenvalues[tfErg//N];condNum=evs[[1]]/evs[[-1]];
toIg=aGSpecBetter[[1]];
X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genFRExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter,
"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}];
Print["doIt:theFRExt done"];
DistributeDefinitions[X0Z0,theFRExt,checkPt];
Print["doIt:DistributeDefinitions done"];
{tm,ig}=Timing[
theRes=parallelNestIterREInterp[genFRExtFunc,linModBetter,
{X0Z0,theK},eqnsCompiledBetter,sgSpecErg,iters,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}]];
numKern=Length[Kernels[]];
Print["doIt:parallelNestGeneric done"];
theName=fNameString[approx,iters,theK,numKern];
forDR=theRes[[-1,1]];DistributeDefinitions[forDR];
forDRCE=theRes[[-1,2]];DistributeDefinitions[forDRCE];
DistributeDefinitions[linModBetter];
drerrName=Unique["drerr"];
drName=Unique["dr"];
drName[z1_?NumberQ,z2_?NumberQ]:=
Module[{},
-Norm[actualErrs[theRes[[-1,1]],backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]];
drerrName[z1_?NumberQ,z2_?NumberQ]:=
Module[{},
With[{resNow=-Norm[approxErrs[forDR,forDRCE,
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]},
resNow]];
DistributeDefinitions[drerrName,drName];
acterr={acterrVal,acterrSubs}=NMinimize[drName[z1,z2],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]]],{z1,z2},Method->"NelderMead"];Print["acterr:",acterr];
errBnd={errBndVal,errBndSubs}=NMinimize[drerrName[z1,z2],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]]],{z1,z2},Method->"NelderMead"];Print["errBnd:",errBnd];
errBndLoc={z1,z2}/.errBndSubs;
acterrLoc={z1,z2}/.acterrSubs;
mthName=theName<>".mth";
If[FileExistsQ[mthName],DeleteFile[mthName]];
bothErrStr=
"\nerrBnd="<>
(errBndStr=ToString[NumberForm[-errBndVal,NumberFormat->(Row[{#1,"e",#3}]&)]])<>","<>
"actualErr="<>(acterrStr=ToString[NumberForm[-acterrVal,NumberFormat->(Row[{#1,"e",#3}]&)]]);
WriteString[theName<>"acterr.tex",acterrStr];
WriteString[theName<>"errBnd.tex",errBndStr];
Print["here",{acterrStr,acterr,errBnd,bothErrStr,errBndVal}];
zPts=backXtoZ[ptErg,betterRBCMean,betterRBCSD,betterRBCvv];Print["errBndLoc=",errBndLoc];
Export[theName<>".pdf",acterrsCP=
ContourPlot[
Norm[actualErrs[theRes[[-1,1]],
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]];
Export[theName<>"Minus.pdf",
ContourPlot[
Norm[actualErrs[theRes[[-1,1]],
backZtoX[{{z1,z2,-.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Minus"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Export[theName<>"Plus.pdf",
ContourPlot[
Norm[actualErrs[theRes[[-1,1]],
backZtoX[{{z1,z2,.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Plus"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Export[theName<>"Approx.pdf",
ContourPlot[
Norm[checkPt[theRes[[-1,1]],theRes[[-2,2]],theK,
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Approx"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Export[theName<>"truncApprox.pdf",
ContourPlot[
Norm[tErrMat.Transpose[{checkPt[theRes[[-1,1]],theRes[[-2,2]],theK,
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]}]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"TruncApprox"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Save[mthName,theRes,tm,numKern,condNum,
errBndVal,errBndLoc,acterrVal,acterrLoc,acterrsCP];
Print["doIt:saving done"];
theRes]


getErrs[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
With[{mthName=fNameString[approx,iters,theK,numKern]<>".mth"},
theSave=Get[mthName];
Show[acterrsCP];
{errBnd,errBndLoc,acterr,acterrLoc}]]

(*

Plot3D[actualErrs[theRes[[-1,1]],{kk,tt,0}][[1]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All]


msntoval=MSNTO[drerrName,
{{ { {{betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{betterRBCMinZ[[2]],betterRBCMaxZ[[2]]}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
errBnd=(-1)*pickBestMSNTO[msntoval];errBndLoc=MSNTOMinimizer[msntoval];
Print["done first msnto"];
msntoval=MSNTO[drName,{{ { {{betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{betterRBCMinZ[[2]],betterRBCMaxZ[[2]]}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
Print["done second msnto"];

errKBnd={errKBndVal,errKBndSubs}=NMinimize[drerrKName[z1,z2],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]]],{z1,z2},Method->"NelderMead"];Print["errKBnd:",errKBnd];
errKBndLoc={z1,z2}/.errKBndSubs;
errKBnd={errKBndVal,errKBndSubs}=NMinimize[drerrKName[z1,z2],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]]],{z1,z2},Method->"NelderMead"];Print["errKBnd:",errKBnd];
errKBndLoc={z1,z2}/.errKBndSubs;


*)
