Print["setting history length to 1"];
$HistoryLength=1;
Get["pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
Get["emscsToMma`"]
Get["betterRBC`"]
Get["betterRBCTrips`"]
phiMat=getPhi[linModBetter]
fMat=getF[linModBetter]
tErrMat=truncErrorMat[fMat,phiMat,0]
tErrMatMax=Norm[tErrMat,Infinity]


actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetter@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]


approxErrs[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{eqnsCompiledBetter @@ makeArgs[{approxDR,approxDRCE},xeps]}])]]]


approxErrsK[approxDR_Function,approxDRCE_Function,theK_Integer,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{checkPt[approxDR,approxDRCE,theK,xeps]}])]]]


makeArgs[{adr_,adrce_},{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{},
With[{xt=Flatten[adr[ig,kk,ig,tt,ee]][[Range[4]]]},
With[{xtp1=Flatten[adrce@@xt][[Range[4]]]},
Append[Join[{999,kk,999,tt},xt,xtp1],ee]]]]



smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
aDir="resDir/"
fNameString[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
StringReplace[aDir<>"forBetterRBC-"<>ToString[approx]<>"Iters"<>ToString[iters]<>"theK"<>ToString[theK]<>"host-"<>$MachineName<>"numKern"<>ToString[numKern],{" "->"","{"->"-","}"->"-"}];


kl=betterRBC`Private`kLow 
kh=betterRBC`Private`kHigh
tl=betterRBC`Private`thLow
th=betterRBC`Private`thHigh
sl=betterRBC`Private`sigLow
sh=betterRBC`Private`sigHigh


Options[checkPt]={"Traditional"->False}
checkPt[adr_,adrce_,theK_Integer,aPt:{kk_?NumberQ,tt_?NumberQ,eps_?NumberQ},
opts:OptionsPattern[]]:=
Module[{},
If[OptionValue["Traditional"],
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xztp1=(adrce @@ Flatten[xzt])[[Range[4]]];
tradArg=Flatten[
Join[Drop[xtm1eps,-1],xzt[[Range[4]]],xztp1[[Range[4]]],{eps}]];
(*Print["tradArg:",tradArg];*)
eqnsCompiledBetter @@ tradArg,
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xkzkFunc=
genLilXkZkFunc[linModBetter,{adrce,theK},xzt[[Range[4]]]];
xkApply=Flatten[xkzkFunc @@ Join[xtm1eps,Flatten[xzt[[4+Range[4]]]]]];
eqnsCompiledBetter @@ xkApply]]




doIt[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{ptErg,tfErg,plyErg,iplyErg,dplyErg},
Print["doIt:"];
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};
bmr=ConvexHullMesh[ptErg[[All,{1,2}]]];
rbnds=RegionBounds[bmr];
Print["doIt:sgSpecErg done"];
evs=Eigenvalues[tfErg//N];condNum=evs[[1]]/evs[[-1]];
toIg=aGSpecBetter[[1]];
X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genFRExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter,
"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}];
Print["doIt:theFRExt done"];
DistributeDefinitions[X0Z0,theFRExt,checkPt,getH];
Print["doIt:DistributeDefinitions done"];
(**)
{tm,ig}=Timing[
theRes=parallelNestIterREInterp[genFRExtFunc,linModBetter,
{X0Z0,theK},eqnsCompiledBetter,sgSpecErg,iters,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}]];
(*Print["theRes=",theRes//InputForm];*)
{tmTrad,ig}=Timing[
theResTrad=parallelNestIterREInterp[genFRExtFunc,linModBetter,
{X0Z0,theK},eqnsCompiledBetter,sgSpecErg,iters,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}},"Traditional"->True]];
(*Print["theResTrad=",theResTrad//InputForm];*)
numKern=Length[Kernels[]];
theName=fNameString[approx,iters,theK,numKern];
(**)
{tmExact,ig}=Timing[
theResExact=parallelNestIterREInterp[genFRExtFunc,linModBetter,
{simpRBCExactX0Z0CEBetter,theK},eqnsCompiledBetter,sgSpecErg,iters,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}]];
Print["theResExtract:"];
Export[theName<>"Exact.pdf",
forDRExact=theResExact[[-1,1]];DistributeDefinitions[forDR];
forDRCEExact=theResExact[[-2,2]];DistributeDefinitions[forDRCE];
ContourPlot[
Norm[actualErrs[forDRExact,
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Exact"]];
Print["Exact"];
(**)
forDR=theRes[[-1,1]];DistributeDefinitions[forDR];
forDRCE=theRes[[-2,2]];DistributeDefinitions[forDRCE];
forDRTrad=theResTrad[[-1,1]];DistributeDefinitions[forDRTrad];
forDRCETrad=theResTrad[[-2,2]];DistributeDefinitions[forDRCETrad];
(**)
Print["doIt:parallelNestGeneric done"];
DistributeDefinitions[linModBetter];
(**)
drerrName=Unique["drerr"];
drerrNameTrad=Unique["drerrTrad"];
(**)
drName=Unique["dr"];
drNameTrad=Unique["drTrad"];
(**)
drName[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
-Norm[actualErrs[forDR,backZtoX[{{z1,z2,z3}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]];
drNameTrad[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
-Norm[actualErrs[forDRTrad,backZtoX[{{z1,z2,z3}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]];
(**)
drerrName[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
With[{resNow=-Norm[approxErrs[forDR,forDRCE,
backZtoX[{{z1,z2,z3}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]},
resNow]];
drerrNameTrad[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
With[{resNow=-Norm[approxErrs[forDRTrad,forDRCETrad,
backZtoX[{{z1,z2,z3}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]]},
resNow]];
DistributeDefinitions[drerrName,drName];
DistributeDefinitions[drerrNameTrad,drNameTrad];
(**)tryEps=.03;
acterr={acterrVal,acterrSubs}=NMinimize[drName[z1,z2,z3],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]],
betterRBCMinZ[[3]]<=z3<=betterRBCMaxZ[[3]]],{z1,z2,z3},Method->"NelderMead"];
Print["acterr:",acterr];
errBnd={errBndVal,errBndSubs}=NMinimize[drerrName[z1,z2,z3],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]],
betterRBCMinZ[[3]]<=z3<=betterRBCMaxZ[[3]]],{z1,z2,z3},Method->"NelderMead"];
Print["errBnd:",errBnd];
acterrTrad={acterrValTrad,acterrSubsTrad}=NMinimize[drNameTrad[z1,z2,z3],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]],
betterRBCMinZ[[3]]<=z3<=betterRBCMaxZ[[3]]],{z1,z2,z3},Method->"NelderMead"];
Print["acterrTrad:",acterrTrad];
errBndTrad={errBndValTrad,errBndSubsTrad}=NMinimize[drerrNameTrad[z1,z2,z3],
And[betterRBCMinZ[[1]] <=z1<=betterRBCMaxZ[[1]],
betterRBCMinZ[[2]]<=z2<=betterRBCMaxZ[[2]],
betterRBCMinZ[[3]]<=z3<=betterRBCMaxZ[[3]]],{z1,z2,z3},Method->"NelderMead"];
Print["errBndTrad:",errBndTrad];
(**)
errBndLoc={z1,z2}/.errBndSubs;
acterrLoc={z1,z2}/.acterrSubs;
errBndLocTrad={z1,z2}/.errBndSubsTrad;
acterrLocTrad={z1,z2}/.acterrSubsTrad;
(**)
mthName=theName<>".mth";
If[FileExistsQ[mthName],DeleteFile[mthName]];
(**)
bothErrStr=
"\nerrBnd="<>
(errBndStr=ToString[NumberForm[-errBndVal,NumberFormat->(Row[{#1,"e",#3}]&)]])<>","<>
"actualErr="<>(acterrStr=ToString[NumberForm[-acterrVal,NumberFormat->(Row[{#1,"e",#3}]&)]]);
bothErrStrTrad=
"\nerrBndTrad="<>
(errBndStrTrad=ToString[NumberForm[-errBndValTrad,NumberFormat->(Row[{#1,"e",#3}]&)]])<>","<>
"actualErrTrad="<>(acterrStrTrad=ToString[NumberForm[-acterrValTrad,NumberFormat->(Row[{#1,"e",#3}]&)]]);
(**)
WriteString[theName<>"acterr.tex",acterrStr];
WriteString[theName<>"errBnd.tex",errBndStr];
Print["here",{acterrStr,acterr,errBnd,bothErrStr,errBndVal}];
Print["hereTrad",{acterrStrTrad,acterrTrad,errBndTrad,bothErrStrTrad,errBndValTrad}];
zPts=backXtoZ[ptErg,betterRBCMean,betterRBCSD,betterRBCvv];
Print["errBndLoc=",errBndLoc];
iterPts=
(**)
Export[theName<>".pdf",acterrsCP=
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]];
Print["acterrsCP"];
(*
Export[theName<>"Trad"<>".pdf",acterrsTradCP=
ContourPlot[
Norm[actualErrs[forDRTrad,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Trad"<>bothErrStrTrad,
Epilog->{PointSize[0.05],Green,Point[acterrLocTrad[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]];
Print["acterrsTradCP"];
(**)
Export[theName<>"Minus.pdf",
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,-.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Minus"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["Minus"];
Export[theName<>"Plus.pdf",
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Plus"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["Plus"];
*)
Export[theName<>"Approx.pdf",
(**)
ContourPlot[
Norm[checkPt[forDR,forDRCE,theK,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"Approx"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["Approx"];
Export[theName<>"ApproxTrad.pdf",
ContourPlot[
Norm[checkPt[forDRTrad,forDRCETrad,theK,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]],"Traditional"->True]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"ApproxTrad"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLocTrad[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLocTrad[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["Trad"];
(**)
truncPtFunc[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
Norm[tErrMat.Transpose[{checkPt[forDR,forDRCE,theK,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]}]]];
Export[theName<>"truncApprox.pdf",
ContourPlot[
truncPtFunc[z1,z2,tryEps],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->theName<>"TruncApprox"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["TruncApprox"];
Save[mthName,theRes,theResTrad,tm,tmTrad,numKern,condNum,
errBndVal,errBndLoc,acterrVal,acterrLoc,
errBndValTrad,errBndLocTrad,acterrValTrad,acterrLocTrad,acterrsCP];
Print["doIt:saving done"];
{theRes,theResTrad}]


doItExactTrad[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{},
zPts=backXtoZ[ptErg,betterRBCMean,betterRBCSD,betterRBCvv];
numKern=Length[Kernels[]];
theName=fNameString[approx,iters,theK,numKern];
{tmExactTrad,ig}=Timing[
theResExactTrad=parallelNestIterREInterp[genFRExtFunc,linModBetter,
{simpRBCExactX0Z0CEBetter,theK},eqnsCompiledBetter,sgSpecErg,iters,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}},"Traditional"->True]];
Print["theResExtractTrad:"];
Export[theName<>"ExactTrad.pdf",
forDRExactTrad=theResExactTrad[[-1,1]];DistributeDefinitions[forDR];
forDRCEExactTrad=theResExactTrad[[-1,2]];DistributeDefinitions[forDRCE];
ContourPlot[
Norm[actualErrs[forDRExactTrad,
backZtoX[{{z1,z2,0}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>"ExactTrad"(*<>bothErrStr*),
Epilog->{(*PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],*)PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]];
Print["ExactTrad"];
]



getErrs[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
With[{mthName=fNameString[approx,iters,theK,numKern]<>".mth"},
theSave=Get[mthName];
Show[acterrsCP];
{errBnd,errBndLoc,acterr,acterrLoc}]]

approx=1*{1,1,1};
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
toIg=aGSpecBetter[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};
