Print["setting history length to 1"];
$HistoryLength=1;
Get["tests/pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
Get["emscsToMma`"]
Get["betterRBCTrips`"]

phiMat=getPhi[linModBetterRBCTrips]
fMat=getF[linModBetterRBCTrips]
tErrMat=truncErrorMat[fMat,phiMat,0]
tErrMatMax=Norm[tErrMat,Infinity]


actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetterTrips@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]




genZsFromDRCE[linMod:{theHMat_?MatrixQ,BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ,
backLookingInfo:{{_Integer,backLooking_,backLookingExp_}...}},
	initVec_?MatrixQ,numEps_Integer,theExactDR:(_Function|_CompiledFunction),theCondExp:(_Function|_CompiledFunction),iters_Integer]:=
Module[{},
With[{numX=Length[initVec]-numEps,
 	thePath=Flatten[iterateDRREIntegrate[theExactDR,theCondExp,initVec,numEps,iters+1]]},
 	With[{firstVal=theHMat .thePath[[Range[3*numX]]]- psiC - psiEps . Take[initVec,-numEps]},
 		With[{restVals=
      (theHMat .thePath[[Range[3*numX]+numX*#]] -psiC)&/@Range[(Length[thePath]/numX)-3]},
      Join[{firstVal},restVals]
]]]]


approxErrs[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{rbcEqnsBetterRBCTrips @@ makeArgs[{approxDR,approxDRCE},xeps]}])]]]

betterBounds[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{xtVals=Flatten[approxDR[99,kk,99,tt,ee][[Range[4]]]],
exactXtVals=Flatten[simpRBCExactDRBetterTrips[99,kk,99,tt,ee][[Range[4]]]],
theH=getH[linModBetterRBCTrips],theF=getF[linModBetterRBCTrips],thePsiC=getPsiC[linModBetterRBCTrips],thePsiEps=getPsiEps[linModBetterRBCTrips]},
With[{xtp1Vals=Flatten[(approxDRCE @@ xtVals)[[Range[4]]]]},
With[{errNow=
Norm[
rbcEqnsBetterRBCTrips @@ 
Join[{99,kk,99,tt},xtVals,xtp1Vals,{ee}]],errDelay=
delayEvalEqns @@ 
Join[{99,kk,99,tt},xtVals,xtp1Vals,{ee},{approxDR,approxDRCE}],
theZsNow=genZsFromDRCE[linModBetterRBCTrips,Transpose[{{99,kk,99,tt,ee}}],1,
simpRBCExactDRBetterTrips,simpRBCExactDRCEBetterTrips,1][[1]]
},(*Print["betterBounds:",{xtVals,xtp1Vals,ee,xeps}];*)
With[{lil=errNow,lilLil=.0001},
With[{theZs=
theH . Transpose[{
Join[{99,kk,99,tt},xtVals,xtp1Vals]}] - thePsiC -thePsiEps*ee},
With[{theRes=
FindMaximum[{delayEvalNrmBnd @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}],
And[Norm[delayEvalEqns @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}]]<errNow]},
{
{cct,xtVals[[1]]},
{kkt,xtVals[[2]]},
{nnt,xtVals[[3]]},
{tht,xtVals[[4]]},
{cctp1,xtp1Vals[[1]]},
{kktp1,xtp1Vals[[2]]},
{nntp1,xtp1Vals[[3]]},
{thtp1,xtp1Vals[[4]]}
},
Method->"InteriorPoint"
]},
With[{errPost=
Norm[
rbcEqnsBetterRBCTrips @@ 
(Join[{99,kk,99,tt},{cct,kkt,nnt,tht,cctp1,kktp1,nntp1,thtp1},{ee}]/.theRes[[2]])]},
{errNow,errPost,{Norm[xtVals-exactXtVals],xtVals,exactXtVals},theRes}
]]]]]]]

xtXtp1Vals[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{xtVals=Flatten[approxDR[99,kk,99,tt,ee][[Range[4]]]]},
With[{xtp1Vals=Flatten[(approxDRCE @@ xtVals)[[Range[4]]]]},
Join[xtVals,xtp1Vals]]]


evenBetterBounds[approxDR_Function,approxDRCE_Function,ergSetFunc_Function]:=
Module[{theH=getH[linModBetterRBCTrips],theF=getF[linModBetterRBCTrips],thePsiC=getPsiC[linModBetterRBCTrips],thePsiEps=getPsiEps[linModBetterRBCTrips]},
With[{},
With[{},(*Print["betterBounds:",{xtVals,xtp1Vals,ee,xeps}];*)
With[{},
With[{},
With[{theRes=
FindMaximum[{delayEvalNrmBnd @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}],
And[Norm[delayEvalEqns @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}]]<Norm[
rbcEqnsBetterRBCTrips @@ 
Join[{99,kk,99,tt},xtVals=xtXtp1Vals[approxDR,approxDRCE,{kk,tt,ee}],{ee}]]]},
{
{kk,.1},
{tt,1},
{ee,0},
{tht,xtVals[[4]]},
{cctp1,xtp1Vals[[1]]},
{kktp1,xtp1Vals[[2]]},
{nntp1,xtp1Vals[[3]]},
{thtp1,xtp1Vals[[4]]}
},
Method->"InteriorPoint"
]},
With[{errPost=
Norm[
rbcEqnsBetterRBCTrips @@ 
(Join[{99,kk,99,tt},{cct,kkt,nnt,tht,cctp1,kktp1,nntp1,thtp1},{ee}]/.theRes[[2]])]},
{errPost,{Norm[({cct,kkt,nnt,tht}/.theRes[[2]])-Flatten[simpRBCExactDRBetterTrips[99,kk,99,tt,ee][[Range[4]]]]],xtVals,exactXtVals},theRes}
]]]]]]]


(*

NMaximize[{delayEvalNrmBnd @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}],
And[Norm[delayEvalEqns @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}]]<errNow]},{cct,kkt,nnt,tht,cctp1,kktp1,nntp1,thtp1},
Method->{"RandomSearch","Method"->"InteriorPoint","SearchPoints"->5,"Tolerance"->0,
"InitialPoints"->Table[(1+(Random[]-.5)/10000)*{
xtVals[[1]],
xtVals[[2]],
xtVals[[3]],
xtVals[[4]],
xtp1Vals[[1]],
xtp1Vals[[2]],
xtp1Vals[[3]],
xtp1Vals[[4]]
},{9}]
}
]


Method->{"NelderMead","ShrinkRatio"->.95,"ContractRatio"->.95,"ReflectRatio"->2,
"Tolerance"->0,
"InitialPoints"->Table[(1+(Random[]-.5)/100000)*{
xtVals[[1]],
xtVals[[2]],
xtVals[[3]],
xtVals[[4]],
xtp1Vals[[1]],
xtp1Vals[[2]],
xtp1Vals[[3]],
xtp1Vals[[4]]
},{9}]
}

Method->{"RandomSearch","SearchPoints"->5,"Tolerance"->0,
"InitialPoints"->Table[(1+(Random[]-.5)/100)*{
xtVals[[1]],
xtVals[[2]],
xtVals[[3]],
xtVals[[4]],
xtp1Vals[[1]],
xtp1Vals[[2]],
xtp1Vals[[3]],
xtp1Vals[[4]]
},{9}]
}




NMaximize[{delayEvalNrmBnd @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}],
And[Norm[delayEvalEqns @@ 
Join[{99,kk,99,tt},{cct,kkt,nnt,tht},{cctp1,kktp1,nntp1,thtp1},{ee},{approxDR,approxDRCE}]]<errNow+lil]},{cct,kkt,nnt,tht,cctp1,kktp1,nntp1,thtp1},
Method->{"NelderMead","Tolerance"->0,
"InitialPoints"->Table[(1+(Random[]-.5)/10000000)*{
xtVals[[1]],
xtVals[[2]],
xtVals[[3]],
xtVals[[4]],
xtp1Vals[[1]],
xtp1Vals[[2]],
xtp1Vals[[3]],
xtp1Vals[[4]]
},{9}]
}
]

{
{cct,xtVals[[1]]},
{kkt,xtVals[[2]]},
{nnt,xtVals[[3]]},
{tht,xtVals[[4]]},
{cctp1,xtp1Vals[[1]]},
{kktp1,xtp1Vals[[2]]},
{nntp1,xtp1Vals[[3]]},
{thtp1,xtp1Vals[[4]]}
}


{
{cct,xtVals[[1]]-lilLil,xtVals[[1]]+lilLil},
{kkt,xtVals[[2]]-lilLil,xtVals[[2]]+lilLil},
{nnt,xtVals[[3]]-lilLil,xtVals[[3]]+lilLil},
{tht,xtVals[[4]]-lilLil,xtVals[[4]]+lilLil},
{cctp1,xtp1Vals[[1]]-lilLil,xtp1Vals[[1]]+lilLil},
{kktp1,xtp1Vals[[2]]-lilLil,xtp1Vals[[2]]+lilLil},
{nntp1,xtp1Vals[[3]]-lilLil,xtp1Vals[[3]]+lilLil},
{thtp1,xtp1Vals[[4]]-lilLil,xtp1Vals[[4]]+lilLil}
}
*)
delayEvalEqns[
cctm1_?NumberQ,kktm1_?NumberQ,nltm1_?NumberQ,thetatm1_?NumberQ,
cct_?NumberQ,kkt_?NumberQ,nlt_?NumberQ,thetat_?NumberQ,
cctp1_?NumberQ,kktp1_?NumberQ,nltp1_?NumberQ,thetatp1_?NumberQ,
epsVal_?NumberQ,approxDR_Function,approxDRCE_Function]:=
Module[{eqnVals=rbcEqnsBetterRBCTrips @@ {
cctm1,kktm1,nltm1,thetatm1,
cct,kkt,nlt,thetat,
cctp1,kktp1,nltp1,thetatp1,
epsVal
}},(*Print["delayEqn:",Norm[eqnVals]];*)
Norm[eqnVals]]

delayEvalNrmBnd[
cctm1_?NumberQ,kktm1_?NumberQ,nltm1_?NumberQ,thetatm1_?NumberQ,
cct_?NumberQ,kkt_?NumberQ,nlt_?NumberQ,thetat_?NumberQ,
cctp1_?NumberQ,kktp1_?NumberQ,nltp1_?NumberQ,thetatp1_?NumberQ,
epsVal_?NumberQ,approxDR_Function,approxDRCE_Function]:=
Module[{theH=getH[linModBetterRBCTrips],theF=getF[linModBetterRBCTrips],thePsiC=getPsiC[linModBetterRBCTrips],thePsiEps=getPsiEps[linModBetterRBCTrips],
theZsNow=
genZsFromDRCE[linModBetterRBCTrips,Transpose[{{99,kktm1,99,thetatm1,epsVal}}],1,
approxDR,approxDRCE,10][[1]]
},
With[{theZs=
theH . Transpose[{{
cctm1,kktm1,nltm1,thetatm1,
cct,kkt,nlt,thetat,
cctp1,kktp1,nltp1,thetatp1}}] - thePsiC -thePsiEps*epsVal},
Norm[tErrMat. (theZsNow-theZs)]
]]

approxErrsK[approxDR_Function,approxDRCE_Function,theK_Integer,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{checkPt[approxDR,approxDRCE,theK,xeps]}])]]]


makeArgs[{adr_,adrce_},{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{},
With[{xt=Flatten[adr[ig,kk,ig,tt,ee]][[Range[4]]]},
With[{xtp1=Flatten[adrce@@xt][[Range[4]]]},
Append[Join[{999,kk,999,tt},xt,xtp1],ee]]]]



dirNameString[]:=
Module[{},
aDir="resDir"<>"-host-"<>$MachineName<>"numKern"<>ToString[numKern]<>"-"<>ToString[Round[AbsoluteTime[]]]<>"/";
CreateDirectory[aDir]]

fNameString[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
StringReplace[dirNameString[]<>"forBetterTripsRBC-"<>ToString[approx]<>"Iters"<>ToString[iters]<>"theK"<>ToString[theK],{" "->"","{"->"-","}"->"-"}]];


kl=betterRBCTrips`Private`kLow 
kh=betterRBCTrips`Private`kHigh
tl=betterRBCTrips`Private`thLow
th=betterRBCTrips`Private`thHigh
sl=betterRBCTrips`Private`sigLow
sh=betterRBCTrips`Private`sigHigh


Options[checkPt]={"Traditional"->False}
checkPt[adr_,adrce_,theK_Integer,aPt:{kk_?NumberQ,tt_?NumberQ,eps_?NumberQ},
opts:OptionsPattern[]]:=
Module[{},
If[OptionValue["Traditional"],
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xztp1=(adrce @@ Flatten[xzt])[[Range[4]]];
tradArg=Flatten[
Join[Drop[xtm1eps,-1],xzt[[Range[4]]],xztp1[[Range[4]]],{eps}]];
rbcEqnsBetterRBCTrips @@ tradArg,
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
theZsNow=genZsForFindRoot[linModBetterRBCTrips,
xzt[[Range[4]]],adrce,theK];
xkzkFunc=genLilXkZkFunc[linModBetterRBCTrips,theZsNow];
xkApply=Flatten[xkzkFunc @@ Join[xtm1eps,Flatten[xzt[[4+Range[4]]]]]];
rbcEqnsBetterRBCTrips @@ xkApply]]

prepSmol[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{toIg,zPts,ptErg,tfErg,plyErg,iplyErg,dplyErg,bothX0Z0,smolStuff,smolRngErg,sgSpecErg},
(**)tryEps=0;
LaunchKernels[];numKern=Length[Kernels[]];
theName=fNameString[approx,iters,theK,numKern];
mthName=theName<>".mth";
bothX0Z0=genBothX0Z0Funcs[linModBetterRBCTrips];
smolStuff=
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv},theDistBetterRBCTrips];
smolRngErg=Transpose[{betterRBCTripsMinZ,betterRBCTripsMaxZ}];
toIg=aGSpecBetterRBCTrips[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv}};
zPts=backXtoZ[ptErg,betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}
]


prepDRDRCE[theRes_List]:=
Module[{forDR,forDRCE,drName,drerrName},
forDR=theRes[[-1,1]];DistributeDefinitions[forDR];
forDRCE=theRes[[-2,2]];DistributeDefinitions[forDRCE];
DistributeDefinitions[linModBetterRBCTrips];
(**)
drerrName=Unique["drerr"];
(**)
drName=Unique["dr"];
(**)
drName[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
-Norm[actualErrs[forDR,backZtoX[{{z1,z2,z3}},betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv][[1]]]]];
(**)
drerrName[z1_?NumberQ,z2_?NumberQ,z3_?NumberQ]:=
Module[{},
With[{resNow=-Norm[approxErrs[forDR,forDRCE,
backZtoX[{{z1,z2,z3}},betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv][[1]]]]},
resNow]];
DistributeDefinitions[drerrName,drName];
{{forDR,forDRCE},{drName,drerrName}}
]


minActualErr[drName_Symbol]:=
NMinimize[drName[z1,z2,z3],
And[betterRBCTripsMinZ[[1]] <=z1<=betterRBCTripsMaxZ[[1]],
betterRBCTripsMinZ[[2]]<=z2<=betterRBCTripsMaxZ[[2]],
betterRBCTripsMinZ[[3]]<=z3<=betterRBCTripsMaxZ[[3]]],{z1,z2,z3},
{Method->"NelderMead","RandomSeed"->Round[AbsoluteTime[]]}
];

minPredErr[drerrName_Symbol]:=
Module[{errBnd,errBndVal,errBndSubs},
errBnd={errBndVal,errBndSubs}=NMinimize[drerrName[z1,z2,z3],
And[betterRBCTripsMinZ[[1]] <=z1<=betterRBCTripsMaxZ[[1]],
betterRBCTripsMinZ[[2]]<=z2<=betterRBCTripsMaxZ[[2]],
betterRBCTripsMinZ[[3]]<=z3<=betterRBCTripsMaxZ[[3]]],{z1,z2,z3},
{Method->"NelderMead","RandomSeed"->Round[AbsoluteTime[]]}];
{errBndVal,errBndSubs}
]


Options[findMinLocs]={"Traditional"->False}
findMinLocs[theName_String,
drName_Symbol,drerrName_Symbol,opts:OptionsPattern[]]:=
Module[{texModStr,bothErrStr,acterrLoc,errBndLoc,acterr,errBnd,actewrrLoc},
Print["preminact"];
acterr={acterrVal,acterrSubs}=minActualErr[drName];
Print["preminpred"];
errBnd={errBndVal,errBndSubs}=minPredErr[drerrName];
Print["post"];
errBndLoc={z1,z2,z3}/.errBndSubs;
acterrLoc={z1,z2,z3}/.acterrSubs;
(**)
bothErrStr=
"\nerrBnd="<>
(errBndStr=ToString[NumberForm[-errBndVal,NumberFormat->(Row[{#1,"e",#3}]&)]])<>","<>
"actualErr="<>(acterrStr=ToString[NumberForm[-acterrVal,NumberFormat->(Row[{#1,"e",#3}]&)]]);
texModStr=If[OptionValue["Traditional"],"Trad","Series"];
WriteString[theName<>texModStr<>"acterr.tex",acterrStr];
WriteString[theName<>texModStr<>"errBnd.tex",errBndStr];
{bothErrStr,acterrLoc,errBndLoc,acterr,errBnd}]



Options[errTableRowStr]={"Traditional"->False}
errTableRowStr[approx_?VectorQ,theK_Integer,
{acterr_?NumberQ,_List},{errBnd_?NumberQ,_List},opts:OptionsPattern[]]:=
Module[{
colorQStr=If[(-acterr)>(-errBnd),"\\rowcolor{LightCyan}\n",""]},
colorQStr<>
ToString[approx]<>"&"<>
If[OptionValue["Traditional"],"NA",ToString[theK]]<>"&"<>
ToString[NumberForm[-errBndVal,NumberFormat->(Row[{#1,"e",#3}]&)]]<>"&"<>
ToString[NumberForm[-acterrVal,NumberFormat->(Row[{#1,"e",#3}]&)]]<>"\\\\\n\\hline\n"]




Options[actErrCP]={"Traditional"->False}
actErrCP[forDR_Function,{bothErrStr_String,acterrLoc_List,errBndLoc_List},
zPts_List,theName_String,opts:OptionsPattern[]]:=
Module[{},
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,tryEps}},betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv][[1]]]],
{z1,betterRBCTripsMinZ[[1]],betterRBCTripsMaxZ[[1]]},{z2,betterRBCTripsMinZ[[2]],betterRBCTripsMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]]

Options[approxErrCP]={"Traditional"->False}
approxErrCP[forDR_Function,forDRCE_Function,theK_Integer,tryEps_?NumberQ,
{bothErrStr_String,acterrLoc_List,errBndLoc_List},
zPts_List,theName_String,opts:OptionsPattern[]]:=
Module[{},
ContourPlot[
Norm[checkPt[forDR,forDRCE,theK,
backZtoX[{{z1,z2,tryEps}},betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv][[1]],FilterRules[{opts},Options[checkPt]]]],
{z1,betterRBCTripsMinZ[[1]],betterRBCTripsMaxZ[[1]]},{z2,betterRBCTripsMinZ[[2]],betterRBCTripsMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>"Approx"<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]}]]



Options[doItApproxSeries]={"Traditional"->False}
doItApproxSeries[approx_?VectorQ,iters_Integer,theK_Integer,opts:OptionsPattern[]]:=
Module[{lclMthName,lclName,tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,tm,ig,theRes,forDR,forDRCE,drName=Unique["drName"],drerrName=Unique["drerrName"],bothErrStr,acterrLoc,errBndLoc},
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}=
prepSmol[approx,iters,theK];
Print["indo:",{Options[parallelNestGenericIterREInterp],FilterRules[{opts},Options[parallelNestGenericIterREInterp]]}];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetterRBCTrips,
{bothX0Z0,theK},rbcEqnsBetterRBCTrips,sgSpecErg,smolyakInterpolation,{},iters,Apply[Sequence,FilterRules[{opts},Options[parallelNestGenericIterREInterp]]]]];
(*
,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}
Print["about to prepDRDRCE"];
{{forDR,forDRCE},{drName,drerrName}}=prepDRDRCE[theRes];
Print["about to findMinLocs",{drName,drerrName}];
{bothErrStr,acterrLoc,errBndLoc,acterr,errBnd}=findMinLocs[theName,drName,drerrName,FilterRules[{opts},Options[parallelNestIterREInterp]]];
lclName=If[OptionValue["Traditional"],
theName<>"Trad",
theName<>"Series"
];
lclMthName=If[OptionValue["Traditional"],
StringReplace[mthName,".mth"->"Trad.mth"],
StringReplace[mthName,".mth"->"Series.mth"]
];
Print["about to writeerrtablerow"];
WriteString[lclName<>"errTableRow.tex",
errTableRowStr[approx,theK,acterr,errBnd,FilterRules[{opts},Options[checkPt]]]];
Print["about to export1"];
Export[lclName<>".pdf",actErrCP[forDR,{bothErrStr,acterrLoc,errBndLoc},zPts,lclName,FilterRules[{opts},Options[actErrCP]]]];
Print["about to export2"];
Export[lclName<>"Approx.pdf",
approxErrCP[forDR,forDRCE,theK,tryEps,{bothErrStr,acterrLoc,errBndLoc},zPts,lclName,FilterRules[{opts},Options[approxErrCP]]]];
Print["about to save"];
If[FileExistsQ[mthName],DeleteFile[mthName]];
Save[lclMthName,{lclName,tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,tm,
theRes,forDR,forDRCE,drName,drerrName,bothErrStr,acterrLoc,errBndLoc}];
*)
{zPts,theRes}
]




getErrs[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
With[{mthName=fNameString[approx,iters,theK,numKern]<>".mth"},
theSave=Get[mthName];
Show[acterrsCP];
{errBnd,errBndLoc,acterr,acterrLoc}]]

(*
approx=1*{1,1,1};
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv},theDistBetterRBCTrips];
smolRngErg=Transpose[{betterRBCTripsMinZ,betterRBCTripsMaxZ}];
toIg=aGSpecBetterRBCTrips[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv}};



approx=1*{1,1,1};
Out[73]= {0.00114046, 0.00114046, 
 
>    {0.000877403, {0.372342, 0.193542, 2.71184, 1.01013}, 
 
>     {0.37234, 0.193526, 2.71271, 1.01005}}, 
 
>    {0.00740513, {cct -> 0.373007, kkt -> 0.19398, nnt -> 2.70766, 
 
>      tht -> 1.01006, cctp1 -> 0.367596, kktp1 -> 0.19106, 
 
>      nntp1 -> 2.74431, thtp1 -> 1.00901}}}


approx=2*{1,1,1};


Out[9]= {0.0000193865, 0.0000605986, 
 
>    {0.00002207, {0.372341, 0.193525, 2.71269, 1.01005}, 
 
>     {0.37234, 0.193526, 2.71271, 1.01005}}, 
 
>    {0.000430056, {cct -> 0.372368, kkt -> 0.193553, nnt -> 2.71248, 
 
>      tht -> 1.01004, cctp1 -> 0.367768, kktp1 -> 0.191148, 
 
>      nntp1 -> 2.74508, thtp1 -> 1.00953}}}

                                  -6
approx=3*{1,1,1};
Out[12]= {0.0000182821, 9.58796 10  , 
 
                -6
>    {8.66928 10  , {0.372341, 0.193525, 2.7127, 1.01005}, 
 
>     {0.37234, 0.193526, 2.71271, 1.01005}}, 
 
>    {0.0000470247, {cct -> 0.372344, kkt -> 0.19353, nnt -> 2.71268, 
 
>      tht -> 1.01005, cctp1 -> 0.367772, kktp1 -> 0.19115, 
 
>      nntp1 -> 2.74503, thtp1 -> 1.00955}}}


approx=4*{1,1,1};

*)

(*
betterBounds[simpRBCExactDRBetter,simpRBCExactDRCEBetter,{.2,1,.01}]
X0Z0=genX0Z0Funcs[linModBetterRBCTrips];
theRes=parallelNestIterREInterp[genFRExtFunc,linModBetterRBCTrips,
{X0Z0,3},rbcEqnsBetterRBCTrips,sgSpecErg,5,"xVarRanges"->{{0.01,2},{0.01,2},{0.01,20},{0.85,1.2}}];
betterBounds[theRes[[-1,1]],theRes[[-1,2]],{.2,1,.01}]



*)


(*
workout using msnto


delayEvalNrmBnd @@Join[Range[13],{simpRBCExactDRBetter,simpRBCExactDRCEBetter}]
delayEvalNrmBnd @@Join[Table[Random[],{13}],{simpRBCExactDRBetter,simpRBCExactDRCEBetter}]

ff[xx1_?NumberQ,xx2_?NumberQ]:=
Sin[xx1]*Cos[xx2]
theRes=MSNTO[ff,{{{{-2,2},{3,5}},{}},{{},Infinity}},30,Nied,.1,1.2,.5];


pickBestMSNTO[theRes]
MSNTOMinimizer[theRes]
itSimpExamp=iterMSNTOFunc[ff,20,Nied,.1,1.2,.5];
Timing[theRes=NestList[itSimpExamp[#[[5]]]&,{ig,ig,ig,ig,
{{{{1,100},{0.001,0.1}},{}},{{},Infinity}}
},1]];
Save["tryit.mth",theRes]
(*
delayFunc= Function @@
{
{cctm1, kktm1, nltm1, 
    thetatm1, cct, kkt, nlt, 
    thetat, cctp1, kktp1, 
    nltp1, thetatp1, epsVal}, 
delayEvalNrmBnd[cctm1, kktm1, nltm1, 
    thetatm1, cct, kkt, nlt, 
    thetat, cctp1, kktp1, 
    nltp1, thetatp1, epsVal,
simpRBCExactDRBetter,simpRBCExactDRCEBetter]}
*)
delayShortEvalNrmBnd[
cctm1_?NumberQ,kktm1_?NumberQ,nltm1_?NumberQ,thetatm1_?NumberQ,
cct_?NumberQ,kkt_?NumberQ,nlt_?NumberQ,thetat_?NumberQ,
cctp1_?NumberQ,kktp1_?NumberQ,nltp1_?NumberQ,thetatp1_?NumberQ,
epsVal_?NumberQ]:=
Module[{theH=getH[linModBetter],theF=getF[linModBetter],thePsiC=getPsiC[linModBetter],thePsiEps=getPsiEps[linModBetter],
theZsNow=
genZsFromDRCE[linModBetterRBCTrips,Transpose[{{99,kktm1,99,thetatm1,epsVal}}],1,
simpRBCExactDRBetter,simpRBCExactDRCEBetter,10][[1]]
},
With[{theZs=
theH . Transpose[{{
cctm1,kktm1,nltm1,thetatm1,
cct,kkt,nlt,thetat,
cctp1,kktp1,nltp1,thetatp1}}] - thePsiC -thePsiEps*epsVal},
Print["delay:",{theZs,theZsNow,theH,thePsiC,thePsiEps,tErrMat}];
Norm[tErrMat. (theZsNow-theZs)]
]]


ParallelEvaluate[$HistoryLength=1];
ParallelEvaluate[Get["pathSetup.mth"]]
ParallelNeeds["AMASeriesRepresentation`"]
Print["preemscstomma"]
ParallelNeeds["emscsToMma`"]
ParallelNeeds["betterRBCTrips`"]

phiMat=getPhi[linModBetter]
fMat=getF[linModBetter]
tErrMat=truncErrorMat[fMat,phiMat,0]
DistributeDefinitions[tErrMat]

luFour={{.1,.9},{.1,.9},{.1,10},{.9,1.1}}
theArgs={{Join[luFour,luFour,luFour,{{-.01,.01}}],{}},{{},Infinity}};
theRes=MSNTO[delayShortEvalNrmBnd,theArgs,30,Nied,.1,1.2,.5];

itSimpExamp=iterMSNTOFunc[delayShortEvalNrmBnd,20,Nied,.1,1.2,.5];
Timing[theRes=NestList[itSimpExamp[#[[5]]]&,{ig,ig,ig,ig,
theArgs
},1]];
Save["tryit.mth",theRes]


*)
(*
Get["AMAFedsBetterRBC.mth"];
doItApproxSeries[1*{1,1,1},70,#,"Traditional"->True]& /@{0}
doItApproxSeries[2*{1,1,1},70,#,"Traditional"->True]& /@{0}
doItApproxSeries[3*{1,1,1},70,#,"Traditional"->True]& /@{0}

doItApproxSeries[1*{1,1,1},1,1,"Traditional"->False]



doItApproxSeries[1*{1,1,1},70,#,"Traditional"->False]& /@Join[Range[0,5],Range[10,50,10]]
doItApproxSeries[2*{1,1,1},70,#,"Traditional"->False]& /@Join[Range[0,5],Range[10,50,10]]
doItApproxSeries[3*{1,1,1},70,#,"Traditional"->False]& /@Join[Range[0,5],Range[10,50,10]]

*)
