Get["JavaGraphics`"]
Get["tests/pathSetup.mth"]

Get["AMASeriesRepresentation`"];



Get["betterRBCTrips`"];


aMatIn=anXEpsBetterRBCTrips
Print["trying getNumX"]
getNumX[linModBetterRBCTrips]

Print["trying genBothX0Z0Funcs"]
X0Z0 = genBothX0Z0Funcs[
   linModBetterRBCTrips];
X0Z0[[1]]@@ Flatten[aMatIn]

Print["trying genZsForFindRoot"]
theZsNow=AMASeriesRepresentation`Private`genZsForFindRoot[linModBetterRBCTrips,aMatIn[[Range[4]]],X0Z0[[2]],3]

Print["trying genLilXkZkFunc"]
xkzkFunc=genLilXkZkFunc[linModBetterRBCTrips,theZsNow];

xkzkFunc @@ anXEpsZsFlatBetterRBCTrips

Print["trying genFRExtFuncs"]
frFunc = genFRExtFunc[{4, 1, 4}, 
   linModBetterRBCTrips, {X0Z0, 2}, 
   eqnsCompiledBetterRBCTrips];

evaluateTriple[frFunc[[1, 2]], 
  anXEpsFlatBetterRBCTrips]



approx=1*{1,1,1};
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   smolyakInterpolationPrep[approx, {betterRBCTripsMean, 
     betterRBCTripsSD, 
     betterRBCTripsMinZ, 
     betterRBCTripsMaxZ, 
     betterRBCTripsvv}, 
    theDistBetterRBCTrips]
smolRngErg = 
  Transpose[{betterRBCTripsMinZ, 
    betterRBCTripsMaxZ}];
toIg = aGSpecBetterRBCTrips[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, approx, {betterRBCTripsMean, 
    betterRBCTripsSD, 
    betterRBCTripsMinZ, 
    betterRBCTripsMaxZ, 
    betterRBCTripsvv}}

theK=2
{dr,cedr}=parallelDoGenericIterREInterp[
   genFRExtFunc, 
   linModBetterRBCTrips,{X0Z0, theK}, 
   eqnsCompiledBetterRBCTrips, sgSpecErg, 
   smolyakInterpolation, {},(*
"xVarRanges"->theRanges,*)"Traditional"->False]


dr @@ anXEpsFlatBetterRBCTrips

cedr @@ anXEpsFlatBetterRBCTrips

theRes=parallelNestGenericIterREInterp[
   genFRExtFunc, 
   linModBetterRBCTrips,{X0Z0, theK}, 
   eqnsCompiledBetterRBCTrips, sgSpecErg, 
   smolyakInterpolation, {},3,(*
"xVarRanges"->theRanges,*)"Traditional"->False]

idr=theRes[[-1,1]]
icedr=theRes[[-1,2]]

idr @@ anXEpsFlatBetterRBCTrips
icedr @@ anXEpsFlatBetterRBCTrips


Get["betterRBCRegimes`"];


X0Z0 = AMASeriesRepresentation`genBothX0Z0Funcs[
   betterRBCRegimes`linModBetterRegimes];
frFunc = AMASeriesRepresentation`genFRExtFunc[{7, 1, 7}, 
   betterRBCRegimes`linModBetterRegimes, {X0Z0, 2}, 
   betterRBCRegimes`rbcEqnsBetterRegimes[[1,1]]];
Print[{"1",AMASeriesRepresentation`evaluateTriple[frFunc[[1,1]],  Flatten[betterRBCRegimes`anXEpsBetterRegimes]]}]
Print[{"2",AMASeriesRepresentation`evaluateTriple[frFunc[[1,2]],  Flatten[betterRBCRegimes`anXEpsBetterRegimes]]}]



frFunc = AMASeriesRepresentation`genFRExtFunc[{7, 1, 7}, 
   betterRBCRegimes`linModBetterRegimes, {X0Z0, 2}, 
   betterRBCRegimes`rbcEqnsBetterRegimes[[1,2]]];
Print[{"3",AMASeriesRepresentation`evaluateTriple[frFunc[[1,1]],  Flatten[betterRBCRegimes`anXEpsBetterRegimes]]}]
Print[{"4",AMASeriesRepresentation`evaluateTriple[frFunc[[1,2]],  Flatten[betterRBCRegimes`anXEpsBetterRegimes]]}]





X0Z0 = AMASeriesRepresentation`genBothX0Z0Funcs[
   betterRBCRegimes`linModBetterRegimes];
frFunc = AMASeriesRepresentation`genFRExtFunc[{7, 1, 7}, 
   betterRBCRegimes`linModBetterRegimes, {X0Z0, 2}, 
   betterRBCRegimes`rbcEqnsBetterRegimes[[1,1]]];
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[{1, 1, 
     1}, {betterRBCRegimes`betterRBCCSMean, 
     betterRBCRegimes`betterRBCCSSD, 
     betterRBCRegimes`betterRBCCSMinZ, 
     betterRBCRegimes`betterRBCCSMaxZ, 
     betterRBCRegimes`betterRBCCSvv}, 
    betterRBCRegimes`theDistBetterRegimes];
smolRngErg = 
  Transpose[{betterRBCRegimes`betterRBCCSMinZ, 
    betterRBCRegimes`betterRBCCSMaxZ}];
toIg = betterRBCRegimes`aGSpecBetterRegimes[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, {1, 1, 1}, {betterRBCRegimes`betterRBCCSMean, 
    betterRBCRegimes`betterRBCCSSD, 
    betterRBCRegimes`betterRBCCSMinZ, 
    betterRBCRegimes`betterRBCCSMaxZ, 
    betterRBCRegimes`betterRBCCSvv}};
theRes01 = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   betterRBCRegimes`linModBetterRegimes, {X0Z0, 2}, 
   betterRBCRegimes`rbcEqnsBetterRegimes[[1,1]], sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, 10];
Print[{"5",Through[theRes01[[-1]] @@ # &[  betterRBCRegimes`anXEpsFlatBetterRegimes]]}
]
theRes02 = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   betterRBCRegimes`linModBetterRegimes, {X0Z0, 2}, 
   betterRBCRegimes`rbcEqnsBetterRegimes[[1,2]], sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, 10];
Print[{"6",Through[theRes02[[-1]] @@ # &[  betterRBCRegimes`anXEpsFlatBetterRegimes]]}
]



Print[{"7",iterateRegimesDRVals[{theRes01[[-1,2]]},
{anXBetterRegimes,anXBetterRegimes},3]}]



Print[{"7a",beg01=iterateRegimesDRVals[{theRes01[[-1,1]],theRes02[[-1,1]]},
anXEpsBetterRegimes,1]}]
Print[{"7b",beg02=iterateRegimesDRVals[{theRes01[[-1,1]],theRes02[[-1,1]]},
anXEpsBetterRegimes,2]}]


regX0Z0=
{#,2}&/@genRegimesBothX0Z0Funcs[{betterRBCRegimes`linModBetterRegimes,betterRBCRegimes`linModBetterRegimes}]


(*regime 1 condition 1*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,1,1,1,2]],1]
frFunc @@ Flatten[anXEpsBetterRegimes]


(*regime 1 condition 2*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,1,1,2,2]],2]
frFunc @@ Flatten[anXEpsBetterRegimes]

(*regime 2 condition 1*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,1,1,1,2]],1]
frFunc @@ Flatten[anXEpsBetterRegimes]


(*regime 2 condition 2*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,1,1,2,2]],2]
frFunc @@ Flatten[anXEpsBetterRegimes]


frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,1]],1]
evaluateTriple[frFunc[[1,1]],Flatten[anXEpsBetterRegimes]]
evaluateTriple[frFunc[[1,2]],Flatten[anXEpsBetterRegimes]]




(*get triples for regime 2*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
betterRBCRegimes`Private`probFunc,rbcEqnsBetterRegimes[[1,2]],2]
evaluateTriple[frFunc[[1,1]],Flatten[anXEpsBetterRegimes]]
evaluateTriple[frFunc[[1,2]],Flatten[anXEpsBetterRegimes]]





(*get triples for both regimes*)
frFunc=genFRExtFunc[{7,1,7},betterRBCRegimes`linModBetterRegimes,regX0Z0,
rbcEqnsBetterRegimes]
(*evaluate regime1 firstcondition*)
evaluateTriple[frFunc[[1,1,1]],Flatten[anXEpsBetterRegimes]]
(*evaluate regime1 secondcondition*)
evaluateTriple[frFunc[[1,1,2]],Flatten[anXEpsBetterRegimes]]
(*evaluate regime2 firstcondition*)
evaluateTriple[frFunc[[2,1,1]],Flatten[anXEpsBetterRegimes]]
(*evaluate regime2 secondcondition*)
evaluateTriple[frFunc[[2,1,2]],Flatten[anXEpsBetterRegimes]]


AMASeriesRepresentation`Private`parallelSmolyakGenInterpData[frFunc,sgSpecErg]


parallelMakeGenericInterpFuncs[frFunc,{},sgSpecErg,smolyakInterpolation,{}]




hip=parallelDoGenericIterREInterp[genFRExtFunc,
betterRBCRegimes`linModBetterRegimes,regX0Z0,rbcEqnsBetterRegimes,
sgSpecErg,smolyakInterpolation,{}]
