Get["pathSetup.mth"]
ParallelEvaluate[Get["pathSetup.mth"]]
SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]
ParallelEvaluate[SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]]
Needs["AMASeriesRepresentation`"]
Needs["betterRBC`"]
ParallelNeeds["AMASeriesRepresentation`"]
ParallelNeeds["betterRBC`"]
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]]

approx={1,1,1};theK=0;iters=3;

toIg=aGSpecBetter[[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];

sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx,{}};

{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};

X0Z0=genX0Z0Funcs[linModBetter];

actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetter@@ {ig,kk,ig,tt,ee}},
Abs[Flatten[(approxVals-actualVals)]]]


checkPt[adr_,adrce_,theK_Integer,aPt:{kk_?NumberQ,tt_?NumberQ,eps_?NumberQ}]:=
Module[{},
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xkzkFunc=
genLilXkZkFunc[linModBetter,{adrce,theK},xzt[[Range[4]]]];
xkApply=Flatten[xkzkFunc @@ Join[xtm1eps,Flatten[xzt[[4+Range[4]]]]]];
eqnsCompiledBetter @@ xkApply]




(*
gsPts=gridPts[aGSpecBetter];

tryGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters];
bunch=.;bunch=checkPt[tryGenFR[[-1,1]],tryGenFR[[-2,2]],theK,#]&/@ gsPts;
Max[Norm/@bunch](*checks out small*)

tryGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters];
bunch=.;bunch=checkPt[tryGenFRExt[[-1,1]],tryGenFRExt[[-2,2]],theK,#]&/@ gsPts;
Max[Norm/@bunch](*checks out small*)


trySmolGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpec,iters];
bunch=.;bunch=checkPt[trySmolGenFR[[-1,1]],trySmolGenFR[[-2,2]],theK,#]&/@ pt;
Max[Norm/@bunch](*checkPt fails with huge numbers but no errors during nestlist*)

trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpec,iters];
bunch=.;bunch=checkPt[trySmolGenFRExt[[-1,1]],trySmolGenFRExt[[-2,2]],theK,#]&/@ pt;(*fails with huge numbers*)

trySmolErgGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpecErg,iters];
bunch=.;bunch=checkPt[trySmolErgGenFR[[-1,1]],trySmolErgGenFR[[-2,2]],theK,#]&/@ ptErg;
Max[Norm/@bunch](*small errors*)

trySmolErgGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpecErg,iters];
bunch=.;bunch=checkPt[trySmolErgGenFRExt[[-1,1]],trySmolErgGenFRExt[[-2,2]],theK,#]&/@ ptErg;
Max[Norm/@bunch] (*small errors*)

bmr=ConvexHullMesh[ptErg[[All,{1,2}]]]
rbnds=RegionBounds[bmr]
Plot3D[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,0}][[1]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All]

ContourPlot[Norm[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,0.03}]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All,PlotLegends->Automatic]

ContourPlot[Norm[actualErrs[trySmolErgGenFRExt[[-1,1]],
backZtoX[{{z1,z2,-0.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic]

SliceContourPlot3D[
Norm[actualErrs[trySmolErgGenFRExt[[-1,1]],
backZtoX[{{z1,z2,-0.03}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
"ZStackedPlanes",
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},{ee,-.03,.03},PlotRange->All,PlotLegends->Automatic,PlotLabel->"curious"]




ContourPlot[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,0}][[1]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All,PlotLegends->Automatic]

ContourPlot[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,-.03}][[1]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All,PlotLegends->Automatic]

ContourPlot3D[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,ee}][[1]],{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},{ee,-.03,.03},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All]

SliceContourPlot3D[actualErrs[trySmolErgGenFRExt[[-1,1]],{kk,tt,ee}][[1]],"ZStackedPlanes",{kk,rbnds[[1,1]],rbnds[[1,2]]},{tt,rbnds[[2,1]],rbnds[[2,2]]},{ee,-.03,.03},RegionFunction->Function[{kk,tt,zz},RegionMember[bmr,{kk,tt}]],PlotRange->All]



tryGenericSmolErgGenFRExt=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpecErg,smolyakInterpolation,{},iters];
bunch=.;bunch=checkPt[tryGenericSmolErgGenFRExt[[-1,1]],tryGenericSmolErgGenFRExt[[-2,2]],theK,#]&/@ ptErg;
Max[Norm/@bunch] (*small errors*)



fails 4,4,4
trySmolGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters]

trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters]


fails 4,4,4
trySmolErgGenFR=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpecErg,iters]

trySmolErgGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpecErg,iters]

*)

(*

approx=4*{1,1,1};theK=8;iters=7;
toIg=aGSpecBetter[[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,
Map[Rationalize[#,1/10000]&,smolRng,{2}],theDistBetter];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx,{}};

trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters];


goodGSpec={{1, 3}, 1, {{6, 0.02029556951468887, 0.2435468341762664}, 
  {6, 9/10, 11/10}, {6, -0.03, 0.09}}}

goodGSpec={{1, 3}, 2, {{6, 0.02029556951468887, 0.2435468341762664}, 
  {6, 9/10, 11/10}, {6, -0.03, 0.09}}}

goodGSpec={{1, 3}, 1, {{8, 0.02029556951468887, 0.2435468341762664}, 
  {8, 9/10, 11/10}, {8, -0.03, 0.09}}}

tryGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],12},eqnsCompiledBetter,goodGSpec,theDistBetter,iters]

tryGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],12},eqnsCompiledBetter,goodGSpec,theDistBetter,12]





trySmolGenGenFR=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]

trySmolGenGenFRExt=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]




trySmolGenFR=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,svmRegressionLinear,{100,.01},iters]

trySmolGenFRExt=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]


*)


