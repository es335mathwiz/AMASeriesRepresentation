Get["pathSetup.mth"]
ParallelEvaluate[Get["pathSetup.mth"]]
SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]
ParallelEvaluate[SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]]
Needs["AMASeriesRepresentation`"]
Needs["betterRBC`"]
ParallelNeeds["AMASeriesRepresentation`"]
ParallelNeeds["betterRBC`"]
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]]

approx=4*{1,1,1};theK=3;iters=2;

toIg=aGSpecBetter[[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];

sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx,{}};

{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};

X0Z0=genX0Z0Funcs[linModBetter];

actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetter@@ {ig,kk,ig,tt,ee}},
Abs[Flatten[(approxVals-actualVals)]]]


checkPt[adr_,adrce_,theK_Integer,aPt:{kk_?NumberQ,tt_?NumberQ,eps_?NumberQ}]:=
Module[{},
xtm1eps=Flatten[fillIn[{{},{1,3},aPt}]];
xzt=adr @@ xtm1eps;
xkzkFunc=
genLilXkZkFunc[linModBetter,{adrce,theK},xzt[[Range[4]]]];
xkApply=Flatten[xkzkFunc @@ Join[xtm1eps,Flatten[xzt[[4+Range[4]]]]]];
eqnsCompiledBetter @@ xkApply]




(*
sillyVals=Range[7];
sillyFuncs=smolyakInterpolation[sillyVals,sgSpec];
sillyFuncs[[1]] @@ # & /@ pt

NExpectation[sillyFuncs[[1]] @@ {pt[[1,1]],pt[[1,2]],anEpsVar},anEpsVar \[Distributed] NormalDistribution[0, 0.01]]

sillyFuncs[[2]] @@ {pt[[1,1]],pt[[1,2]]}


sillyErgFuncs=smolyakInterpolation[sillyVals,sgSpecErg];

sillyErgFuncs[[1]] @@ # & /@  ptErg

NExpectation[sillyErgFuncs[[1]] @@ {ptErg[[1,1]],ptErg[[1,2]],anEpsVar},anEpsVar \[Distributed] NormalDistribution[0, 0.01]]

sillyErgFuncs[[2]] @@ {ptErg[[1,1]],ptErg[[1,2]]}



  {{xx94, xx95, xx96}, 1.1860332288880935 + 0.6167861517804166*xx94 + 
      0.4609283773108644*xx94^2 + 1.2826257722075232*xx95 + 
      46.120095724308264*xx95^2 + 16.666666666666668*xx96 + 
      1666.666666666667*xx96^2}
 





NExpectation[ 1.1860332288880935 + 0.6167861517804166*xx94 + 
      0.4609283773108644*xx94^2 + 1.2826257722075232*xx95 + 
      46.120095724308264*xx95^2 + 16.666666666666668*xx96 + 
      1666.666666666667*xx96^2/.{xx94->.5, xx95->.3}, xx96 \[Distributed] NormalDistribution[0, 0.01]]

    { 4990.0091507545585 + 78995.18638183166*xx94 + 
      437814.0278774727*xx94^2 - 24730.102972218352*xx95 - 
      243072.16357882076*xx94*xx95 + 35114.208184707604*xx95^2}/.{xx94->.5, xx95->.3}




In[30]:= AMASeriesRepresentation`Private`backXtoZ[{{x1,x2,x3}},betterRBCMean,betterRBCSD,betterRBCvv]//ExpandAll//InputForm

Out[30]//InputForm= 
{{41.280596254354236 - 90.1784896654123*x1 - 25.327253325435*x2, 
  -8.471525951587573 - 90.17848966541227*x1 + 25.327253325435006*x2, 
  0. + 100.*x3}}


In[28]:= sillyErgFuncs[[1]]//InputForm
Out[28]//InputForm= 
Function[{xx118, xx119, xx120}, 1.088223620333455 + 
  0.5098285180854054*xx118 + 0.5536039427173546*xx118^2 - 
  0.11024322423416932*xx119 + 46.206563772290146*xx119^2 + 
  16.666666666666668*xx120 + 1666.666666666667*xx120^2]

wts=LinearSolve[tf,Range[7]]

wts . plyErg

tryGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters]

tryGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters]


Trace[trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpec,iters],LinearSolve[___]//InputForm,TraceForward->True]//InputForm



gsPts=gridPts[aGSpecBetter];

bunch=checkPt[tryGenFR[[-1,1]],tryGenFR[[-2,2]],theK,#]&/@ gsPts;
Max[Norm/@bunch]


bunch=checkPt[tryGenFRExt[[-1,1]],tryGenFRExt[[-2,2]],theK,#]&/@ gsPts;
Max[Norm/@bunch]

bunch=checkPt[trySmolGenFRExt[[-1,1]],trySmolGenFRExt[[-2,2]],theK,#]&/@ pt;
Max[Norm/@bunch]



fails 4,4,4
trySmolGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters]

trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters]


fails 4,4,4
trySmolErgGenFR=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpecErg,iters]

trySmolErgGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],theK},eqnsCompiledBetter,sgSpecErg,iters]

*)

(*

approx=4*{1,1,1};theK=8;iters=7;
toIg=aGSpecBetter[[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,
Map[Rationalize[#,1/10000]&,smolRng,{2}],theDistBetter];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx,{}};

trySmolGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,iters];


goodGSpec={{1, 3}, 1, {{6, 0.02029556951468887, 0.2435468341762664}, 
  {6, 9/10, 11/10}, {6, -0.03, 0.09}}}

goodGSpec={{1, 3}, 2, {{6, 0.02029556951468887, 0.2435468341762664}, 
  {6, 9/10, 11/10}, {6, -0.03, 0.09}}}

goodGSpec={{1, 3}, 1, {{8, 0.02029556951468887, 0.2435468341762664}, 
  {8, 9/10, 11/10}, {8, -0.03, 0.09}}}

tryGenFR=parallelNestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],12},eqnsCompiledBetter,goodGSpec,theDistBetter,iters]

tryGenFRExt=parallelNestIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],12},eqnsCompiledBetter,goodGSpec,theDistBetter,12]





trySmolGenGenFR=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]

trySmolGenGenFRExt=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]




trySmolGenFR=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,svmRegressionLinear,{100,.01},iters]

trySmolGenFRExt=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,{genX0Z0Funcs[linModBetter],8},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]


*)


