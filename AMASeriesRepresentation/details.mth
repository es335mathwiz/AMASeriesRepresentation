Get["pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
Get["emscsToMma`"]
Print["postemscstomma"]
Get["betterRBC.m"]
Get["betterRBCMatch.m"]
Get["betterMaxRBC.m"]
Get["betterCnstrnRBC`"]
(*Get["ImpulseResponseErgodic`"]*)
Get["Perturbation`"]
phiMat=getPhi[linModBetter]
fMat=getF[linModBetter]
tErrMat=truncErrorMat[fMat,phiMat,0]
tErrMatMax=Norm[tErrMat,Infinity]
Print["beginning exports"]

(*
Export["hminus.pdf",TableForm[hMinus=getH[linModBetter][[All,{1,2,3,4}]]]]
Export["hzero.pdf",TableForm[hZero=getH[linModBetter][[All,4+{1,2,3,4}]]]]
Export["hplus.pdf",TableForm[hPlus=getH[linModBetter][[All,8+{1,2,3,4}]]]]
Export["bmat.pdf",TableForm[getB[linModBetter]]]
Export["phimat.pdf",TableForm[phiMat=getPhi[linModBetter]]]
Export["psicmat.pdf",TableForm[getPsiC[linModBetter]]]
Export["psizmat.pdf",TableForm[getPsiZ[linModBetter]]]
Export["psiepsmat.pdf",TableForm[getPsiEps[linModBetter]]]
Export["fmat.pdf",TableForm[fMat=getF[linModBetter]]]
Export["paramVals.pdf",TableForm[Last/@betterRBC`Private`paramSubs]//N]
Export["paramNames.pdf",TableForm[{alpha,beta,delta,rho,sigma}]//N]
Export["ssSolnVals.pdf",TableForm[Last/@betterRBC`Private`ssSolnSubsRE]//N]
Export["ssSolnNames.pdf",TableForm[{theta,kk,cc,nlPart}]//N]
Export["tErrMat.pdf",TableForm[tErrMat//N]]
*)
Print["done or skipped  exports"]

(*<<JavaGraphics`*)


X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genMaxExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter];
theFRExt@@anXEpsFlatBetter

simulateExact[numPers_Integer]:=
With[{draws=RandomVariate[theDistBetter[[1,1,2]],numPers],
initVec={99,betterRBC`Private`kVal,99,betterRBC`Private`thVal}},
FoldList[Flatten[simpRBCExactDRBetter@@ Append[Flatten[#1],#2]]&,initVec,draws]]
theRes=simulateExact[20000];
{ig,theKs,ig,theThetas}=Transpose[theRes];
(*ListPlot[Transpose[{theKs,theThetas}]];*)



(*
kl=betterRBC`Private`kLow 
kh=betterRBC`Private`kHigh
tl=betterRBC`Private`thLow
th=betterRBC`Private`thHigh
sl=betterRBC`Private`sigLow
sh=betterRBC`Private`sigHigh
*)
{kl,kh}={Min[theKs],Max[theKs]}
{tl,th}={Min[theThetas],Max[theThetas]}
sl=betterRBC`Private`sigLow
sh=betterRBC`Private`sigHigh

X0Z0=genX0Z0Funcs[linModBetter];

theLilFunc=genLilXkZkFunc[linModBetter, {X0Z0,2},anXEpsBetter];
(*
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[1*{1,1,1},smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,1*{1,1,1}};
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,
{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2];

(*findroot function*)
theFR=genFRFunc[{4,1,4},theLilFunc,eqnsCompiledBetter];
theFR@@anXEpsFlatBetter
(*fixed point function*)
theFP=genFPFunc[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter];
theFP@@anXEpsFlatBetter

(*
X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genFRExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter];
theFRExt@@anXEpsFlatBetter
*)
*)

errRow=
"(``,``,``)&``&``&``&``&``\\\\"

forWS[approx:{kA_Integer,tA_Integer,eA_Integer},iters_Integer,
{cErr_?NumberQ,pcErr_?NumberQ},{kErr_?NumberQ,pkErr_?NumberQ}]:=
With[{idStr=(StringJoin@@((ToString[#]<>"X")&/@approx))<>ToString[iters]},
With[{fName="errTable"<>idStr<>".tex"},
WriteString[fName,TemplateApply[errRow,{kA,tA,eA,iters,
-Log[10,Abs[cErr]],
cErr/pcErr,
-Log[10,Abs[kErr]],
kErr/pkErr}
]]]]

doApproxSVMLinearRun[approx:{kA_Integer,tA_Integer,eA_Integer},iters_Integer]:=
doApproxSVMLinearRun[approx,{X0Z0,2},iters]

doApproxSVMLinearRun[approx:{kA_Integer,tA_Integer,eA_Integer},
xozoStart:{_Function,_Integer},iters_Integer]:=
Module[{pt,tf,ply,iply,toIg,sgSpec,tm,theRes,err,sub,err01,err02,err03,err04,sb01,sub02,sub03,sub04,euerr,eusub,acterr01,acterr02,acterr03,acterr04,
acterrLoc01,acterrLoc02,acterrLoc03,acterrLoc04,msntoval,
prederr01,prederrLoc01,
prederr02,prederrLoc02,
prederr03,prederrLoc03,
prederr04,prederrLoc04,
idStr=(StringJoin@@((ToString[#]<>"$")&/@approx))<>ToString[iters]},
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};
{tm,theRes}=Timing[parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,
xozoStart,eqnsCompiledBetter,sgSpec,svmRegressionLinear,{100,0.01},iters]];
(*
forDR=theRes[[-1,1]];DistributeDefinitions[forDR];
forDRCE=theRes[[-1,2]];DistributeDefinitions[forDRCE];
aDR01[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[1]];
DistributeDefinitions[aDR01];
aDR02[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[2]];
DistributeDefinitions[aDR02];
aDR03[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[3]];
DistributeDefinitions[aDR03];
aDR04[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[4]];
DistributeDefinitions[aDR04];
approxDRErr01[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[1]];
DistributeDefinitions[approxDRErr01];
approxDRErr02[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[2]];
DistributeDefinitions[approxDRErr02];
approxDRErr03[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[3]];
DistributeDefinitions[approxDRErr03];
approxDRErr04[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[4]];
DistributeDefinitions[approxDRErr04];
(*Export["cErr"<>idStr<>".pdf",Plot3D[aDR01[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["kErr"<>idStr<>".pdf",Plot3D[aDR02[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["nErr"<>idStr<>".pdf",Plot3D[aDR03[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["tErr"<>idStr<>".pdf",Plot3D[aDR04[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["cErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr01[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["kErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr02[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["nErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr03[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["tErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr04[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];*)
msntoIters=1000;
msntoval=MSNTO[approxDRErr01,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr01=pickBestMSNTO[msntoval];prederrLoc01=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR01,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr01=pickBestMSNTO[msntoval];acterrLoc01=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr02,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr02=pickBestMSNTO[msntoval];prederrLoc02=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR02,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr02=pickBestMSNTO[msntoval];acterrLoc02=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr03,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr03=pickBestMSNTO[msntoval];prederrLoc03=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR03,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr03=pickBestMSNTO[msntoval];acterrLoc03=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr04,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr04=pickBestMSNTO[msntoval];prederrLoc04=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR04,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr04=pickBestMSNTO[msntoval];acterrLoc04=MSNTOMinimizer[msntoval];
*)
{tm,theRes,
{acterr01,acterrLoc01},{prederr01,prederrLoc01},
{acterr02,acterrLoc02},{prederr02,prederrLoc02},
{acterr03,acterrLoc03},{prederr03,prederrLoc03},
{acterr04,acterrLoc04},{prederr04,prederrLoc04}}]


doApproxRun[approx:{kA_Integer,tA_Integer,eA_Integer},iters_Integer]:=
doApproxRun[approx,{X0Z0,2},iters]

doApproxRun[approx:{kA_Integer,tA_Integer,eA_Integer},
xozoStart:{_Function,_Integer},iters_Integer]:=
Module[{pt,tf,ply,iply,toIg,sgSpec,tm,theRes,err,sub,err01,err02,err03,err04,sb01,sub02,sub03,sub04,euerr,eusub,acterr01,acterr02,acterr03,acterr04,
acterrLoc01,acterrLoc02,acterrLoc03,acterrLoc04,msntoval,
prederr01,prederrLoc01,
prederr02,prederrLoc02,
prederr03,prederrLoc03,
prederr04,prederrLoc04,
idStr=(StringJoin@@((ToString[#]<>"$")&/@approx))<>ToString[iters]},
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};
{tm,theRes}=Timing[parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,
xozoStart,eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},iters]];
forDR=theRes[[-1,1]];DistributeDefinitions[forDR];
forDRCE=theRes[[-1,2]];DistributeDefinitions[forDRCE];
aDR01[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[1]];
DistributeDefinitions[aDR01];
aDR02[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[2]];
DistributeDefinitions[aDR02];
aDR03[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[3]];
DistributeDefinitions[aDR03];
aDR04[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=actualErrs[forDR,{kk,tt,ee}][[4]];
DistributeDefinitions[aDR04];
approxDRErr01[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[1]];
DistributeDefinitions[approxDRErr01];
approxDRErr02[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[2]];
DistributeDefinitions[approxDRErr02];
approxDRErr03[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[3]];
DistributeDefinitions[approxDRErr03];
approxDRErr04[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=approxErrs[forDR,forDRCE,{kk,tt,ee}][[4]];
DistributeDefinitions[approxDRErr04];
(*Export["cErr"<>idStr<>".pdf",Plot3D[aDR01[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["kErr"<>idStr<>".pdf",Plot3D[aDR02[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["nErr"<>idStr<>".pdf",Plot3D[aDR03[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["tErr"<>idStr<>".pdf",Plot3D[aDR04[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["cErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr01[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["kErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr02[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["nErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr03[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];
Export["tErrApprox"<>idStr<>".pdf",Plot3D[approxDRErr04[kk,tt,0],{kk,kl,kh},{tt,tl,th}]];*)
msntoIters=1000;
msntoval=MSNTO[approxDRErr01,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr01=pickBestMSNTO[msntoval];prederrLoc01=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR01,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr01=pickBestMSNTO[msntoval];acterrLoc01=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr02,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr02=pickBestMSNTO[msntoval];prederrLoc02=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR02,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr02=pickBestMSNTO[msntoval];acterrLoc02=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr03,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr03=pickBestMSNTO[msntoval];prederrLoc03=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR03,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr03=pickBestMSNTO[msntoval];acterrLoc03=MSNTOMinimizer[msntoval];
msntoval=MSNTO[approxDRErr04,
{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},msntoIters,Nied,.1,1.2,.5];
prederr04=pickBestMSNTO[msntoval];prederrLoc04=MSNTOMinimizer[msntoval];
msntoval=MSNTO[aDR04,{{ { {{kl,kh},{tl,th},{sl,sh}},{} },{{0},Infinity}}},
msntoIters,Nied,.1,1.2,.5];
acterr04=pickBestMSNTO[msntoval];acterrLoc04=MSNTOMinimizer[msntoval];
{tm,theRes,
{acterr01,acterrLoc01},{prederr01,prederrLoc01},
{acterr02,acterrLoc02},{prederr02,prederrLoc02},
{acterr03,acterrLoc03},{prederr03,prederrLoc03},
{acterr04,acterrLoc04},{prederr04,prederrLoc04}}]


makeArgs[{adr_,adrce_},{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{xt=Flatten[adr[ig,kk,ig,tt,ee]][[Range[4]]]},
With[{xtp1=Flatten[adrce@@xt][[Range[4]]]},
Append[Join[{999,kk,999,tt},xt,xtp1],ee]]]

(*
anX0Z0 = genX0Z0Funcs[linModBetterMax];
maxf = genMaxExtFunc[{6,1,6,5,0},linModBetterMax, {anX0Z0, 2}, 
   objBetterMax,rbcBetterCons];
maxf @@ anXEpsFlatBetterMax


X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genFRExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter];
theFRExt@@anXEpsFlatBetter


anX0Z0 = genX0Z0Funcs[linModBetterCnstrn];
lilxkzk = 
  genLilXkZkFunc[linModBetterCnstrn, {anX0Z0, 3}, 
   anX0Z0 @@ anXEpsFlatBetterCnstrn];
anX0Z0 = genX0Z0Funcs[linModBetterCnstrn];

cnf = genFRExtFunc[{6,1,6},linModBetterCnstrn, {anX0Z0, 2}, 
   rbcEqnsBetterCnstrn];
cnf @@ anXEpsFlatBetterCnstrn


(*
X0Z0=genX0Z0Funcs[linModBetter];
theFRExt=genFRExtFunc[{4,1,4},linModBetter,{X0Z0,2},eqnsCompiledBetter];
theFRExt@@anXEpsFlatBetter
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[1*{1,1,1},smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,1*{1,1,1}};
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetter,
{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2];



*)



X0Z0Match=genX0Z0Funcs[linModBetterMatch];
theLilFunc=genLilXkZkFunc[linModBetterMatch, {X0Z0Match,2},anXEpsBetterMatch];

theFRExt=genFRExtFunc[{5,1,5},linModBetterMatch,{X0Z0Match,2},eqnsCompiledBetterMatch];
theFRExt@@anXEpsFlatBetterMatch

smolRng=#[[{2,3}]]&/@Drop[aGSpecBetterMatch,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[1*{1,1,1},smolRng,theDistBetterMatch];
toIg=aGSpecBetterMatch[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,1*{1,1,1}};
theResMatch=parallelNestGenericIterREInterp[genFRExtFunc,linModBetterMatch,
{X0Z0Match,2},eqnsCompiledBetterMatch,sgSpec,smolyakInterpolation,{},2];



http://vision.psych.umn.edu/users/schrater//schrater_lab/courses/PattRecog03/Lec17PattRec03.pdf
eqns[xx_,zz_]:=
{
mm[xx,zz]<=0,
xx - ll[xx,zz]
}


mm[xx_,zz_]:=xx+zz;
ll[xx_,zz_]:=xx-3*zz;

kFunc[x1_,x2_]:=(x1-4)^2+(x2-4)^2

g1[x1_,x2_]:=x1+x2-4
g2[x1_,x2_]:=x1+3*x2-9


lagrangian[x1_,x2_,v1_,v2_]:=
kFunc[x1,x2]+v1*g1[x1,x2]+v2*g2[x1,x2]

smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[1*{1,1,1},smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,1*{1,1,1}};
{tm,theRes}=Timing[nestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},1]];



*)

ParallelNeeds["betterRBC`"]

DistributeDefinitions[actualErrs];
DistributeDefinitions[approxErrs];
actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetter@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]

approxErrs[approxDR_Function,approxDRCE_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
Module[{approxVals=approxDR[99,kk,99,tt,ee][[Range[4]]]},
(-1)*Abs[Flatten[(tErrMat. 
Transpose[{eqnsCompiledBetter @@ makeArgs[{approxDR,approxDRCE},xeps]}])]]]
(*
Get["betterCnstrnRBC.m"]
anX0Z0 = genX0Z0Funcs[linModBetterCnstrn];
lilxkzk = 
  genLilXkZkFunc[linModBetterCnstrn, {anX0Z0, 3}, 
   anX0Z0 @@ anXEpsFlatBetterCnstrn];
anX0Z0 = genX0Z0Funcs[linModBetterCnstrn];

nsf = genNSExtFunc[{6,1,6},linModBetterCnstrn, {anX0Z0, 2}, 
   rbcEqnsBetterCnstrn];
nsf @@ anXEpsFlatBetterCnstrn

*)

(*MSNTO[Sin,{{ { {{-3,3}},{} },{{0},Infinity}}},100,Nied,.1,1.2,.5]*)

(*

{tt,tr,{er01,erl01},{per01,perl01},{er02,erl02},{per02,perl02},{er03,erl03},{per03,perl03},{er04,erl04},{per04,perl04}}=
doApproxRun[1*{1,1,1},1];

eqnsCompiledBetter @@ makeArgs[{tr[[-1,1]],tr[[1,2]]},#]&/@pt[[{1}]]
eqnsEulerCompiledBetter @@ makeArgs[{tr[[-1,1]],tr[[1,2]]},#]&/@pt[[{1}]]
*)



(*

{tt,tr,{er01,erl01},{per01,perl01},{er02,erl02},{per02,perl02},{er03,erl03},{per03,perl03},{er04,erl04},{per04,perl04}}=doApproxRun[5*{1,1,1},1];




LaunchKernels[]
myAbortKernels[]:=AbortKernels[];
SetSharedFunction[myAbortKernels];
parallelAbort[]
(*
theOldRes=doIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,aGSpecBetter,theDistBetter];


smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]]
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[3*{1,1,1},smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,3*{1,1,1}};


theNewRes=nestIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,theDistBetter,2];

theNewNewRes=doGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{}];






(*
runs without errors
approx=3*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes03=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]];


approx={4,3,2};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes432=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]];


approx={4,4,2};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes442=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]];

approx=5*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes05=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,
{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]]


approx=6*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes06=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]]



throw not machine size number on second iteration
approx=5*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};
(*
Reap[Timing[theRes=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},2]]]
*)



(*
Reap[Timing[theRes01=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{},1]]]
Save["theRes01.mth",theRes01]
*)
Get["theRes01.mth"];
approx=2*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};
numX=Length[getB[linModBetter]];
numZ=Length[getPsiZ[linModBetter][[1]]];
aVecFunc=genFPFunc[{genFRFunc},linModBetter,{theRes01[[-1,2]],2},
eqnsCompiledBetter];
AMASeriesRepresentation`Private`parallelSetup[];
filledPts=ParallelMap[
Function[xx,Print["parallelSmolyakGenInterpData: parallel maps smolPts",xx];
fillIn[{{},{1,3},xx}]],N[sgSpec[[3]]]];

(*fails for 7th value*)
DistributeDefinitions[aVecFunc]
theVals=ParallelMap[Function[xx,(Apply[aVecFunc,xx])],filledPts];
interpData=Map[Flatten,theVals];
(*
interpData=parallelSmolyakGenInterpData[aVecFunc,sgSpec];
parallelMakeGenericInterpFuncs[aVecFunc,sgSpec,smolyakInterpolation,{}]

*)
(*
theNext=parallelDoGenericIterREInterp[{genFRFunc},linModBetter,{theRes01[[-1,2]],2},eqnsCompiledBetter,sgSpec,smolyakInterpolation,{}]
*)

*)


pid=Timing[parallelGenInterpData[theFP,aGSpecBetter]];
thePoints=First/@ pid[[2]]

Export["grid443Graph.pdf",Graphics3D[Point[thePoints]]]
iters=6
theRes666=Timing[nestIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters]];
parallelRes666=Timing[parallelNestIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,aGSpecBetter,theDistBetter,iters]];

(*
nn=2
pathErrsDRREIntegrate[theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXEpsBetter,1,eqnsCompiledBetter,2]

evalPathErrDRREIntegrate[theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXEpsBetter,1,eqnsCompiledBetter]
evalPathErrDRREIntegrate[getPhi[linModBetter],theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXEpsBetter,1,eqnsCompiledBetter]

evalBadPathErrDRREIntegrate[theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXBetter,1,eqnsCompiledBetter]
evalBadPathErrDRREIntegrate[getPhi[linModBetter],theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXBetter,1,eqnsCompiledBetter]

worstPathForErrDRREIntegrate[theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXBetter,1,eqnsCompiledBetter]
worstPathForErrDRREIntegrate[getPhi[linModBetter],theRes666[[2,nn,1]],theRes666[[2,nn,2]],anXBetter,1,eqnsCompiledBetter]
*)





forPlot[kk_?NumberQ,th_?NumberQ,nn_Integer]:=
evalBadPathErrDRREIntegrate[getPhi[linModBetter],theRes666[[2,nn,1]],theRes666[[2,nn,2]],{{0.2},{kk},{1.0},{th}},1,eqnsCompiledBetter][[1]]

forPlotDiff[kk_?NumberQ,th_?NumberQ,eps_?NumberQ,nn_Integer]:=
Module[{exact=simpRBCExactDRBetter[ig,kk,ig,th,eps],approx=(theRes666[[2,nn,1]][ig,kk,ig,th,eps][[Range[4]]])},
Print[Transpose[{exact,approx}]];
approx-exact]

somePlots[nn_Integer]:=
Export["worstErrs443"<>ToString[nn]<>".pdf",boo=Plot3D[forPlot[kk,th,nn],{kk,kl,kh},{th,tl,th},PlotRange->All]]
somePlotDiffs[nn_Integer]:=
Export["worstErrs443"<>ToString[nn]<>".pdf",boo=Plot3D[Norm[forPlotDiff[kk,th,0.0,nn],{kk,kl,kh},{th,tl,th},PlotRange->All]]


(*
parallelSetup[]
DistributeDefinitions[kl,kh,tl,th,theRes666,parallelRes666,somePlots,somePlotDiffs,forPlot,forPlotDiff]
Map[somePlots, Range[2,7]]
Export["worstErrs443"<>ToString[nn]<>".pdf",boo=Plot3D[forPlot[kk,th,nn],{kk,kl,kh},{th,tl,th},PlotRange->All]]
Map[somePlotDiffs, Range[2,7]]
Export["diffs443"<>ToString[nn]<>".pdf",boo=Plot3D[forPlot[kk,th,nn],{kk,kl,kh},{th,tl,th},PlotRange->All]]

*)

approx=4*{1,1,1}
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]]
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[approx,smolRng,theDistBetter];
toIg=aGSpecBetter[[1]];
sgSpec={toIg,smolRng,pt,tf,ply,iply,1,approx};

Timing[theRes=parallelNestGenericIterREInterp[{genFRFunc},linModBetter,{X0Z0,2},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{},3]];

doExp[kk_?NumberQ,th_?NumberQ,idx_Integer]:=
With[{nexp=NExpectation[forInt[kk,th,theEps,idx],theEps \[Distributed] 
NormalDistribution[0,1/100]],preCmp=theRes[[-1,2]][99,kk,99,th]},
{nexp,preCmp[[idx,1]],nexp-preCmp[[idx,1]]}]

forInt[kk_?NumberQ,th_?NumberQ,theEps_?NumberQ,idx_Integer]:=
With[{cmp=theRes[[-1,1]][99,kk,99,th,theEps]},cmp[[idx,1]]]

Plot3D[doExp[kk,anXEpsFlatBetter[[4]],2][[3]],{kk,0.01,0.8},{th,0.6,1.1}]


psid=Timing[smolyakGenInterpData[theFP,sgSpec]];
theSmolPoints=sgSpec[[3]]
Export["smol3Graph.pdf",Graphics3D[Point[theSmolPoints]]]



notSmol=makeInterpFunc[theFP,sgSpec];
isSmol=makeSmolyakInterpFuncs[theFP,sgSpec];

Function[xx,{theFP @@ fillIn[{{},{1,3},xx}], notSmol @@ fillIn[{{},{1,3},xx}],Through[isSmol @@#&[ fillIn[{{},{1,3},xx}]]][[1]]}] /@ sgSpec[[3]]
*)
*)
