Get["pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Get["emscsToMma`"]
Get["betterRBC`"]
Get["notBetterRBC`"]
Get["betterRBCCompSlack`"]


theFRExtGateCS=genFRExtFunc[{7,1,7},linModBetterCompSlack,{genX0Z0Funcs[linModBetterCompSlack],2},eqnsCompiledBetterCompSlack]

theFRExt=genFRExtFunc[{4,1,4},linModBetter,{x0z0=genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter]

theFRExtNot=genFRExtFunc[{6,1,6},linModNotBetter,{x0z0=genX0Z0Funcs[linModNotBetter],2},eqnsCompiledNotBetter]
(*
approx=2*{1,1,1};
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv},theDistBetter];
smolRngErg=Transpose[{betterRBCMinZ,betterRBCMaxZ}];
toIg={1,2,4,5,6};
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCMean,betterRBCSD,betterRBCMinZ,betterRBCMaxZ,betterRBCvv}};
*)

approx=1*{1,1,1};
smolRngErg={{.5,.55},{0.95,1.05},{-0.01,0.01}};

{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,smolRngErg,theDistBetter];
toIg={1,2,4,5,6};
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,{}};

theRes01=parallelNestIterREInterp[genFRExtFunc,linModBetterCompSlack,
{genX0Z0Funcs[linModBetterCompSlack],4},eqnsCompiledBetterCompSlack,sgSpecErg,3]

justKT=Drop[simulateDR[theRes01[[-1,1]],aGSpecBetterCompSlack,theDistBetterCompSlack,{.306,0.052,0.524,2.86,0,2.861,1},2000],200][[All,{3,7}]];

betterRBCCompSlackMean=Mean[justKT];
betterRBCCompSlackSD=StandardDeviation[justKT];
normedRes=(#/betterRBCCompSlackSD)&/@((#-betterRBCCompSlackMean)&/@justKT)
{uu,ss,vv}=SingularValueDecomposition[normedRes];
zz=normedRes .vv;
betterRBCCompSlackMinZ=Min/@Transpose[zz];
betterRBCCompSlackMaxZ=Max/@Transpose[zz];


betterRBCCompSlackMean=Append[betterRBCCompSlackMean,0]
betterRBCCompSlackSD=Append[betterRBCCompSlackSD,betterRBCCompSlack`Private`sigVal]
betterRBCCompSlackMinZ=Append[betterRBCCompSlackMinZ,-3]
betterRBCCompSlackMaxZ=Append[betterRBCCompSlackMaxZ,3]
betterRBCCompSlackvv=ArrayFlatten[{{ArrayFlatten[{{vv,{{0},{0}}}}]},{{{0,0,1}}}}]

Export["ergodicCSV.pdf", MatrixForm[betterRBCCompSlackvv//N]];
Export["ergodicCSMaxZ.pdf", MatrixForm[betterRBCCompSlackMaxZ//N]];
Export["ergodicCSMinZ.pdf", MatrixForm[betterRBCCompSlackMinZ//N]];
Export["ergodicCSMean.pdf", MatrixForm[betterRBCCompSlackMean//N]];
Export["ergodicCSSD.pdf", MatrixForm[betterRBCCompSlackSD//N]];



approx=1*{1,1,1};
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCCompSlackMean,betterRBCCompSlackSD,betterRBCCompSlackMinZ,betterRBCCompSlackMaxZ,betterRBCCompSlackvv},theDistBetter];
smolRngErg=Transpose[{betterRBCCompSlackMinZ,betterRBCCompSlackMaxZ}];
toIg={1,2,4,5,6};
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCCompSlackMean,betterRBCCompSlackSD,betterRBCCompSlackMinZ,betterRBCCompSlackMaxZ,betterRBCCompSlackvv}};


theRes02=parallelNestIterREInterp[genFRExtFunc,linModBetterCompSlack,
{theRes01,4},eqnsCompiledBetterCompSlack,sgSpecErg,3]

(*
{evaluateTriple[theFRExtGateCS[[1,2]],anXEpsFlatBetterCompSlack],
evaluateTriple[theFRExtGateCS[[1,1]],anXEpsFlatBetterCompSlack]}
parallelSetup

smolyakGenInterpData[theFRExtGateCS,sgSpecErg]
parallelSmolyakGenInterpData[theFRExtGateCS,sgSpecErg]


theRes=parallelNestIterREInterp[genFRExtFunc,linModBetterCompSlack,
{genX0Z0Funcs[linModBetterCompSlack],2},eqnsCompiledBetterCompSlack,sgSpecErg,1];

simulateDR[theRes[[-1,1]],aGSpecBetterCompSlack,theDistBetterCompSlack,anXEpsFlatBetterCompSlack,1]


theFRExtGateCSNow=genFRExtFunc[{7,1,7},linModBetterCompSlack,{theRes[[-1,2]],2},eqnsCompiledBetterCompSlack]
*)
