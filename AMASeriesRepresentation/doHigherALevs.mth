Get["pathSetup.mth"]
Needs["AMASeriesRepresentation`"]
Needs["mathSmolyak`"]
Get["betterRBC`"]
InstallJava[]
Switch[$System,
 "Mac OS X x86 (64-bit)", 
AddToClassPath["/Users/garyanderson/NetBeansProjects/libSvmMac/build/classes"];
AddToClassPath["/Users/garyanderson/git/AMASeriesRepresentation/AMASeriesRepresentation/JMatIO/lib/jamtio.jar"],
 "Linux x86 (64-bit)", 
AddToClassPath["/Users/garyanderson/NetBeansProjects/libSvmMac/build/classes"];
AddToClassPath["~/git/AMASeriesRepresentation/AMASeriesRepresentation/JMatIO/lib/jamtio.jar"]
]
svmDoer = 
 LoadJavaClass["libsvm.svm"];
Print["updating smolyak grid and java code"]
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]]//N;
{pt,tf,ply,iply}=smolyakInterpolationPrep[aLevs=4*{1,1,1},
smolRng,theDistBetter];
sgSpec={{1,3},smolRng,pt,tf,ply,iply,1};
newX=sgSpec[[3]]//N
boo=cnstrctExpKern[Transpose[newX],dotProdKernel,1,.01,theDistBetter]
woo=cnstrctXYPRECOMPUTEKern[newX,dotProdKernel];
writeExpKern["dwell",boo[[1]],boo[[2]],boo[[3]],boo[[5]],boo[[6]],newX,woo];

Print["compiling java"];
Run["(source ~/.bashrc;javac forImport/dwell.java)"]



src=MakeJavaObject[{1,2,3,4,5.,6.,7,8,9}];
mlDouble=JavaNew["com.jmatio.types.MLDouble","double_arr",src,3]
theFile="/Users/garyanderson/git/AMASeriesRepresentation/AMASeriesRepresentation/tryFile.mat"
aList=JavaNew["java.util.ArrayList"]
aList[add[mlDouble]]
matWriter=JavaNew["com.jmatio.io.MatFileWriter",theFile,aList]

mfr = JavaNew["com.jmatio.io.MatFileReader",theFile];
cnt = mfr[getContent[]]
mlArr=cnt[get[MakeJavaObject["double_arr"]]]
finally=mlArr[getArray[]]
(*
(* new MatFileWriter( "mat_file.mat", list );*)
mlChar= JavaNew["com.jmatio.types.MLChar","char_arr","I am dummy"]
aList[add,mlChar]
aFile=JavaNew["java.io.File",theFile]



aMap = mfr[read[aFile]]

aSet=aMap[keySet[]]

Map<String, MLArray> 
	if (key == null) {
		key = map.keySet().iterator().next();
	}
	MLArray array = map.get(key);
	if (array == null) {
		throw new RuntimeException("matrix with label [" + key + "] was not found in .mat file");
	} else if (array instanceof MLDouble) {
		return new MLDenseDoubleMatrix((MLDouble) array);
	} else {
		throw new RuntimeException("This type is not yet supported: " + array.getClass());
	}
 

 
*)
 
(*
more complicated to be worked out
datalist=JavaNew["java.util.LinkedList"];
dataStruct = JavaNew["com.jmatio.types.MLStructure", "data",{1, 1}];
dataStruct[setField["mlDouble",
		dataList.add(headerStruct);
		dataList.add(dataStruct);
*)

(*

smolRes=AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{},2]]

slinRes=Reap[AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,sgSpec,theDistBetter,svmRegressionLinear,{10.0,.0001},2]]]
*)

(*
Module[{},
theRes=Table[Catch[
With[{(*smolRes=AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],hrz},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{},len]],*)
slinRes=Reap[AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],hrz},eqnsCompiledBetter,sgSpec,theDistBetter,svmRegressionLinear,{10.0,.0001},len]]]},52
{(*{smolRes[[1]],smolRes[[2,-1,1]] @@anXEpsFlatBetter},*)
{slinRes[[1,1]],slinRes[[-1,-1]],slinRes[[1,2,-1,1]] @@ anXEpsFlatBetter}, 
simpRBCExactDRBetter @@ anXEpsFlatBetter}],"otherGuts not machine number"],{hrz,5},{len,5}];
Save["try"<>ToString[aLevs]<>".mth",theRes];
]

*)


