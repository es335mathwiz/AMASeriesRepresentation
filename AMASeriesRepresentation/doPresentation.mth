Get["pathSetup.mth"]
Needs["AMASeriesRepresentation`"]
Needs["mathSmolyak`"]
Get["betterRBC`"]
InstallJava[]
Switch[$System,
 "Mac OS X x86 (64-bit)", 
AddToClassPath["/Users/garyanderson/NetBeansProjects/libSvmMac/build/classes"],
 "Linux x86 (64-bit)", 
AddToClassPath["/msu/home/m1gsa00/NetBeansProjects/myLibsvm/build/classes"]
]
svmDoer = 
 LoadJavaClass["libsvm.svm"];
Print["updating smolyak grid and java code"]
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetter,2][[1]];
{pt,tf,ply,iply}=smolyakInterpolationPrep[aLevs=4*{1,1,1},
smolRng,theDistBetter];
sgSpec={{1,3},smolRng,pt,tf,ply,iply,1};
newX=sgSpec[[3]]//N
boo=cnstrctExpKern[Transpose[newX],dotProdKernel,1,.01,theDistBetter]
writeExpKern["dwell",boo[[1]],boo[[2]],boo[[3]],boo[[5]],boo[[6]]];

Print["compiling java"];
Run["(source ~/.bashrc;javac forImport/dwell.java)"]







fixlin=nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,sgSpec,theDistBetter,svmRegressionLinear,{1.0,.01},2]

fixsmol=nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],2},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{},2]


iterateDRPF[fixlin[[-1,1]],anXEpsBetter,1,1]
iterateDRPF[fixsmol[[-1,1]],anXEpsBetter,1,1]

pathErrsDRPF[fixlin[[-1,1]],anXEpsBetter,1,eqnsCompiledBetter,2]
(* fails pathErrsDRPF[fixsmol[[-1,1]],anXEpsBetter,1,eqnsCompiledBetter,2]*)

iterateDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],anXEpsBetter,1,5]
iterateDRREIntegrate[fixsmol[[-1,1]],fixsmol[[-1,2]],anXEpsBetter,1,5]


pathErrsDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],anXEpsBetter,1,eqnsCompiledBetter,2]
evalPathErrDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],anXEpsBetter,1,eqnsCompiledBetter]
evalBadPathErrDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],anXBetter,1,eqnsCompiledBetter]
evalBadPathErrDRREIntegrate[betterRBC`Private`phimatSymbRE//N,fixlin[[-1,1]],fixlin[[-1,2]],anXBetter,1,eqnsCompiledBetter]



worstPathForErrDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],anXBetter,1,eqnsCompiledBetter]
worstPathForErrDRREIntegrate[betterRBC`Private`phimatSymbRE//N,fixlin[[-1,1]],fixlin[[-1,2]],anXBetter,1,eqnsCompiledBetter]


smolX=Drop[#,-1]&/@(smolXEps=Map[Function[xx,fillIn[{{},{1,3},xx}]],pt//N]);


badXEpsLin=evalBadPathErrDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],Transpose[{#}],1,eqnsCompiledBetter]&/@smolX;
worstLin=Ordering[First/@badXEps,-1]
evalBadPathErrDRREIntegrate[fixlin[[-1,1]],fixlin[[-1,2]],
Transpose[smolX[[worstLin]]],1,eqnsCompiledBetter]

(*
badXEpsSmol=evalBadPathErrDRREIntegrate[fixsmol[[-1,1]],fixsmol[[-1,2]],Transpose[{#}],1,eqnsCompiledBetter]&/@smolX;
worstSmol=Ordering[First/@badXEps,-1]
*)
evalPathErrDRREIntegrate[fixsmol[[-1,1]],fixsmol[[-1,2]],
Transpose[{#}],1,eqnsCompiledBetter]&/@ smolXEps;

(*


Module[{},
theRes=Table[
With[{smolRes=AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],hrz},eqnsCompiledBetter,sgSpec,theDistBetter,smolyakInterpolation,{},len]],
slinRes=Reap[AbsoluteTiming[nestGenericIterREInterp[{genFRFunc},linModBetter, {genX0Z0Funcs[linModBetter],hrz},eqnsCompiledBetter,sgSpec,theDistBetter,svmRegressionLinear,{10.0,.0001},len]]]},
{{smolRes[[1]],smolRes[[2,-1,1]] @@anXEpsFlatBetter},
{slinRes[[1,1]],slinRes[[-1,-1]],slinRes[[1,2,-1,1]] @@ anXEpsFlatBetter}, 
simpRBCExactDRBetter @@ anXEpsFlatBetter}],{hrz,5},{len,5}];
Save["try"<>ToString[aLevs]<>".mth",{theRes,smolRes,slinRes}]]
*)
