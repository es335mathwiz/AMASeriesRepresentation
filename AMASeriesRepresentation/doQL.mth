$AMADIR = 
  Switch[$OperatingSystem, "MacOSX", 
   "~/git/AMASeriesRepresentation/AMASeriesRepresentation", 
"Windows",   "u:/git/AMASeriesRepresentation/AMASeriesRepresentation",
"Unix",   "/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"];
SetDirectory[$AMADIR];
Get["tests/pathSetup.mth"]; 

Get["AMASeriesRepresentation`"];
Get["quasiLinear`"];


Print["pre eval"]
LaunchKernels[]
ParallelEvaluate[$MachineName]
Print["post eval"]
(*Get["JavaGraphics`"]*)
ParallelEvaluate[SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]]
Get["tests/pathSetup.mth"]
ParallelEvaluate[Get["tests/pathSetup.mth"]]
ParallelEvaluate[Get["AMASeriesRepresentation`"]];
Get["quasiLinear`"];
ParallelEvaluate[Get["quasiLinear`"]];
Needs["AMASeriesRepresentation`"]
ParallelNeeds["AMASeriesRepresentation`"]










checkConv[{Adr_Function,Adrce_Function},{Bdr_Function,Bdrce_Function},
pts:{{_?NumberQ,_?NumberQ,_?NumberQ}..}]:=
With[{AVals=Map[Adr[#[[1]],ig1,ig2,ig3,#[[2]]]&,pts],
BVals=Map[Bdr[#[[1]],ig1,ig2,ig3,#[[2]]]&,pts]},
With[{diffs=AVals-BVals},
With[{norms=Norm/@diffs},
{diffs,norms}]]]


updateSGSpec[rhoVal_?NumberQ,scale_?NumberQ,
approx:{_Integer,_Integer},theK_Integer,theIter_Integer]:=
Module[{},
Print["{approx,theK,theIter}=",{approx,theK,theIter}];
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[approx, adjustRange[scale], 
    theDistqlZLB];
smolRngErg = 
  Transpose[{qlCSMinZ, 
    qlCSMaxZ}];
toIg = quasiLinear`aGSpecqLin[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, approx, {qlCSMean, 
    qlCSSD, 
    qlCSMinZ, 
    qlCSMaxZ, 
    qlCSvv}};
forZLB=resetRho[rhoVal];
{sgSpecErg,AbsoluteTiming[
theRes01 = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   linModQLZLB, {X0Z0, theK}, 
   forZLB, sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, theIter,
"Traditional"->False,"addTailContribution"->True]]}
]

updateSmol[theDR_,approx_?VectorQ]:=
Module[{},
theSim=Drop[simulateNkNKCS[theDR,2000],20][[All,Range[8]]];
Print["done simulate"];
justEta=theSim[[All,{2}]];
nkNKCSMean01=Mean[justEta];
nkNKCSSD01=StandardDeviation[justEta];
normedRes=(#/nkNKCSSD01)&/@((#-nkNKCSMean01)&/@justEta);
{uu,ss,vv}=SingularValueDecomposition[normedRes];
zz=normedRes .vv;
nkNKCSMinZ=Min/@Transpose[zz];
nkNKCSMaxZ=Max/@Transpose[zz];
{theEtas,ig,ig,ig}=Transpose[theSim];
Print["try 3 time SD for eta range"];
nkNKCSMean01=Append[nkNKCSMean01,0];
nkNKCSSD01=Append[3*nkNKCSSD01,nkZLB`Private`sigVal];
nkNKCSMinZ01=Append[nkNKCSMinZ,-3];
nkNKCSMaxZ01=Append[nkNKCSMaxZ,3];
nkNKCSvv01=ArrayFlatten[{{ArrayFlatten[{{vv,{{0}}}}]},{{{0,1}}}}];
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[approx, {nkNKCSMean01, 
     nkNKCSSD01, 
     nkNKCSMinZ01, 
     nkNKCSMaxZ01, 
     nkNKCSvv01}, 
    theDistqlZLB];
smolRngErg = 
  Transpose[{nkNKCSMinZ01, 
    nkNKCSMaxZ01}];
toIg = quasiLinear`aGSpecqLin[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, approx, {nkNKCSMean01, 
    nkNKCSSD01, 
    nkNKCSMinZ01, 
    nkNKCSMaxZ01, 
    nkNKCSvv01}}]



X0Z0 = AMASeriesRepresentation`genBothX0Z0Funcs[
   linModQLZLB];
approx=1*{1,1};theK=15;theIters=15
(*approx=5*{1,1};theK=25;theIters=50*)



approx={5,4};theK=15;theIters=10;scale=.3;
approx={5,5};theK=35;theIters=20;scale=.3;
approx={1,1};theK=25;theIters=10;scale=.3;
{sgSpecErg,{wTime,theRes06}}=updateSGSpec[0.6,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes06[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt6=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes06[[
-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]

{sgSpecErg,{wTime,theRes90}}=updateSGSpec[0.90,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes90[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt90=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes90[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]


{sgSpecErg,{wTime,theRes80}}=updateSGSpec[0.80,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes80[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt80=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes80[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]

{sgSpecErg,{wTime,theRes95}}=updateSGSpec[0.95,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes95[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt95=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes95[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]




{sgSpecErg,{wTime,theRes96}}=updateSGSpec[0.96,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes96[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt96=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes96[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]

{sgSpecErg,{wTime,theRes98}}=updateSGSpec[0.98,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes98[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt98=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes98[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]

{sgSpecErg,{wTime,theRes100}}=updateSGSpec[1.00,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRes100[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plt100=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes100[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]

thePlots=Plot[
{
(theRes100[[-1,1]][ee,99,99,99,0])[[3]],
(theRes98[[-1,1]][ee,99,99,99,0])[[3]],
(theRes96[[-1,1]][ee,99,99,99,0])[[3]],
(theRes06[[-1,1]][ee,99,99,99,0])[[3]],
(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs)
},
{ee,minE,maxE},PlotRange->All,PlotLegends->{"1.00","0.98","0.96","0.6","LB"}]
Export["toOne.pdf",thePlots]


(*
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes01[[-1,1]][ee,99,99,99,eps])[[3]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyR.pdf",Show[lpp3d,p3d],PlotRange->All]

Print["herem01"]


pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[2]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(theRes01[[-1,1]][ee,99,99,99,eps])[[2]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyPi.pdf",Show[lpp3d,p3d],PlotRange->All]



pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[4]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(theRes01[[-1,1]][ee,99,99,99,eps])[[4]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyY.pdf",Show[lpp3d,p3d],PlotRange->All]
(*
Print["starting trad"]

frFuncTrad = AMASeriesRepresentation`genFRExtFunc[{4, 1, 4}, 
   linModQLZLB, {theRes01[[-2,2]], 0}, 
   quasiLinear`Private`qlEqnsqlZLB,"Traditional"->True];

Print[{"18",AMASeriesRepresentation`evaluateTriple[frFuncTrad[[1, 1]],  Flatten[quasiLinear`Private`anXEpsFlatqlZLB]]}]



approx=5*{1,1};theK=0;theIters=1
approx={1,1};theK=15;theIters=10;scale=.3;
Print["{approx,theK,theIters}=",{approx,theK,theIters}];
wTime=AbsoluteTiming[
theResTrad = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   linModQLZLB, {theRes01[[-1]], theK}, 
   quasiLinear`Private`qlEqnsqlZLB, sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, theIters,
"Traditional"->True]]
*)

Print["done"]
PrependTo[$Path,"/msu/scratch2/m1gsa00/git/persistentDR/code/"]


(*
Get["canonicalNK.mth"]
*)
<<JavaGraphics`
pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]

{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp=ListPlot[pts[[All,{1,3}]],PlotStyle->{PointSize[Large],Red}]
plt=Plot[{(-quasiLinear`Private`RR/.quasiLinear`Private`paramSubs),(theRes01[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["reallyR2.pdf",Show[lpp,plt],PlotRange->All]
Print["here01"]
(*

lpnow=ListPlot[Transpose[{eta,hip[[1,-1]]}]]
Show[lpnow,plt,DisplayFunction->$DisplayFunction,PlotRange->All]

*)



Options[actErrCP]={"Traditional"->False}
actErrCP[forDR_Function,{bothErrStr_String,acterrLoc_List,errBndLoc_List},
zPts_List,theName_String,opts:OptionsPattern[]]:=
Module[{},
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]]

da=Plot[((theRes01[[-1,1]] @@ {xx,0,0,0,0})[[3]])-((theRes01[[-2,1]] @@ {xx,0,0,0,0})[[3]]),{xx,-.02,.02}]

Print["here02"]

(*
etasix=Flatten[Import["etasix.mat"]]
nomrsix=Flatten[Import["nomrsix.mat"]]
notrsix=Flatten[Import["notrsix.mat"]]
six=ListPlot[Transpose[{etasix,nomrsix}]]
Export["sixOten.pdf",Show[six,plt6,DisplayFunction->$DisplayFunction,PlotRange->All]]
etasix=Flatten[Import["etasix.mat"]]
nomrsix=Flatten[Import["nomrsix.mat"]]
notrsix=Flatten[Import["notrsix.mat"]]
six=ListPlot[Transpose[{etasix,nomrsix}]]
Export["sixOten.pdf",Show[six,plt6,DisplayFunction->$DisplayFunction,PlotRange->All]]
etasix=Flatten[Import["etasix.mat"]]
nomrsix=Flatten[Import["nomrsix.mat"]]
notrsix=Flatten[Import["notrsix.mat"]]
six=ListPlot[Transpose[{etasix,nomrsix}]]
Export["sixOten.pdf",Show[six,plt6,DisplayFunction->$DisplayFunction,PlotRange->All]]


eta9594=Flatten[Import["eta9594.mat"]]
nomr9594=Flatten[Import["nomr9594.mat"]]
notr9594=Flatten[Import["notr9594.mat"]]
f9594=ListPlot[Transpose[{eta9594,nomr9594}]]
yy9594=Flatten[Import["yy9594.mat"]]
fy9594=ListPlot[Transpose[{eta9594,yy9594}]]
dp9594=Flatten[Import["dp9594.mat"]]
fp9594=ListPlot[Transpose[{eta9594,dp9594}]]


approx=5*{1,1};theK=15;theIters=10;scale=.3;
approx={1,1};theK=15;theIters=10;scale=.3;
approx={5,5};theK=50;theIters=20;scale=.3;
approx={1,1};theK=15;theIters=10;scale=.3;
{sgSpecErg,{wTime,theRes9594}}=updateSGSpec[(2*.9594)-1,scale,approx,theK,theIters];
theResTrad = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   linModQLZLB, {theRes9594[[-1]], theK}, 
   quasiLinear`Private`qlEqnsqlZLB, sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, theIters,
"Traditional"->True];

Print["wTime=",wTime]
pts=Join[#,(theRes9594[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]

plt9594=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes9594[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["f9594Oten.pdf",Show[f9594,plt9594,DisplayFunction->$DisplayFunction,PlotRange->All]]


pltp9594=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes9594[[-1,1]][ee,99,99,99,0])[[2]]},{ee,minE,maxE},PlotRange->All]
Export["fp9594Oten.pdf",Show[fp9594,pltp9594,DisplayFunction->$DisplayFunction,PlotRange->All]]


plty9594=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRes9594[[-1,1]][ee,99,99,99,0])[[2]]},{ee,minE,maxE},PlotRange->All]
Export["fp9594Oten.pdf",Show[fy9594,plty9594,DisplayFunction->$DisplayFunction,PlotRange->All]]



Print["here03"]


etanine=Flatten[Import["etanine.mat"]]
nomrnine=Flatten[Import["nomrnine.mat"]]
notrnine=Flatten[Import["notrnine.mat"]]
fnine=ListPlot[Transpose[{etanine,nomrnine}]]
{sgSpecErg,{wTime,theResnine}}=updateSGSpec[.9,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theResnine[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
pltnine=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theResnine[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["fnine.pdf",Show[fnine,pltnine,DisplayFunction->$DisplayFunction,PlotRange->All]]



etaeight=Flatten[Import["etaeight.mat"]]
nomreight=Flatten[Import["nomreight.mat"]]
notreight=Flatten[Import["notreight.mat"]]
feight=ListPlot[Transpose[{etaeight,nomreight}]]
{sgSpecErg,{wTime,theReseight}}=updateSGSpec[.8,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theReseight[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
plteight=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theReseight[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["feight.pdf",Show[feight,plteight,DisplayFunction->$DisplayFunction,PlotRange->All]]


etasix=Flatten[Import["etasix.mat"]]
nomrsix=Flatten[Import["nomrsix.mat"]]
notrsix=Flatten[Import["notrsix.mat"]]
fsix=ListPlot[Transpose[{etasix,nomrsix}]]
{sgSpecErg,{wTime,theRessix}}=updateSGSpec[.6,scale,approx,theK,theIters];
Print["wTime=",wTime]
pts=Join[#,(theRessix[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
pltsix=Plot[{(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),(theRessix[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["fsix.pdf",Show[fsix,pltsix,DisplayFunction->$DisplayFunction,PlotRange->All]]


*)
Print["here04"]

(*
toEval[ee_?NumberQ,er_?NumberQ]:=With[{long=theRes100[[-1,1]] @@ {ee,99,99,99,er}},long[[3]]]


huh100=iterateQLCSDRCE[theRes100[[-1,1]],2000,{-.015,99,99,0}];

{-0.00052253, 0.00363284, -0.00603162, 0.00247337, 
        -0.000286857, -0.00067856, 0.000211406, -0.00225072, 
        0.00319971, -0.00441869}

{0.000809341, -0.000538973, -0.00195324, 0.000996507, 
         -0.000111526, -0.000802953, 0.000341776, 0.00465155, 
         0.00413415, 0.00317105}

-0.0150379
ListPlot[{huh100[[2,Range[220],3]],Table[(-quasiLinear`Private`RR//.quasiLinear`Private`paramSubs),{220}]}]

{-0.0454232, -0.00564569}  produces {-0.0157593}
theRs=huh100[[2,All,3]];
theEtas=huh100[[2,All,1]];
theDraws=huh100[[1]];
small= Flatten[Position[theRs,_?(#<-0.0150379&)]]
*)



frFunc = AMASeriesRepresentation`genFRExtFunc[{4, 1, 4}, 
   linModQLZLB, {theRes01[[-1]], theK}, 
   quasiLinear`Private`qlEqnsqlZLB]
theVals=evaluateTriplesJustVals[frFunc,{pts[[1,1]],ig,ig,ig,pts[[1,2]]}];


boo06=genCheckPt[{theRes06[[-1,1]],theRes06[[-2,2]]},.6];
boo98=genCheckPt[{theRes98[[-1,1]],theRes98[[-1,2]]},.98];
boo=genCheckPt[{theRes9594[[-1,1]],theRes9594[[-2,2]]},(2*0.9594)-1];


frFunc = AMASeriesRepresentation`genFRExtFunc[{4, 1, 4}, 
   linModQLZLB, {theRes98[[-1]], theK}, 
   quasiLinear`Private`qlEqnsqlZLB]
theVals=evaluateTriplesJustVals[frFunc,{pts[[1,1]],ig,ig,ig,pts[[1,2]]}];

genCheckPt[linModQLZLB,{theRes06[[-1,1]],theRes06[[-2,2]]},resetRho[0.6]]



*)

