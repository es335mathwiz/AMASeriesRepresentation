$AMADIR = 
  Switch[$OperatingSystem, "MacOSX", 
   "~/git/AMASeriesRepresentation/AMASeriesRepresentation", 
"Windows",   "u:/git/AMASeriesRepresentation/AMASeriesRepresentation",
"Unix",   "/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"];
SetDirectory[$AMADIR];
Get["tests/pathSetup.mth"]; 

Get["AMASeriesRepresentation`"];
Get["quasiLinear`"];


Print["pre eval"]
LaunchKernels[]
ParallelEvaluate[$MachineName]
Print["post eval"]
(*Get["JavaGraphics`"]*)
ParallelEvaluate[SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]]
Get["tests/pathSetup.mth"]
ParallelEvaluate[Get["tests/pathSetup.mth"]]
ParallelEvaluate[Get["AMASeriesRepresentation`"]];
Get["quasiLinear`"];
ParallelEvaluate[Get["quasiLinear`"]];
Needs["AMASeriesRepresentation`"]
ParallelNeeds["AMASeriesRepresentation`"]



updateSmol[theDR_,approx_?VectorQ]:=
Module[{},
theSim=Drop[simulateNkNKCS[theDR,2000],20][[All,Range[8]]];
Print["done simulate"];
justEta=theSim[[All,{2}]];
nkNKCSMean01=Mean[justEta];
nkNKCSSD01=StandardDeviation[justEta];
normedRes=(#/nkNKCSSD01)&/@((#-nkNKCSMean01)&/@justEta);
{uu,ss,vv}=SingularValueDecomposition[normedRes];
zz=normedRes .vv;
nkNKCSMinZ=Min/@Transpose[zz];
nkNKCSMaxZ=Max/@Transpose[zz];
{theEtas,ig,ig,ig}=Transpose[theSim];
Print["try 3 time SD for eta range"];
nkNKCSMean01=Append[nkNKCSMean01,0];
nkNKCSSD01=Append[3*nkNKCSSD01,nkZLB`Private`sigVal];
nkNKCSMinZ01=Append[nkNKCSMinZ,-3];
nkNKCSMaxZ01=Append[nkNKCSMaxZ,3];
nkNKCSvv01=ArrayFlatten[{{ArrayFlatten[{{vv,{{0}}}}]},{{{0,1}}}}];
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[approx, {nkNKCSMean01, 
     nkNKCSSD01, 
     nkNKCSMinZ01, 
     nkNKCSMaxZ01, 
     nkNKCSvv01}, 
    theDistqlZLB];
smolRngErg = 
  Transpose[{nkNKCSMinZ01, 
    nkNKCSMaxZ01}];
toIg = quasiLinear`aGSpecqLin[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, approx, {nkNKCSMean01, 
    nkNKCSSD01, 
    nkNKCSMinZ01, 
    nkNKCSMaxZ01, 
    nkNKCSvv01}}]



X0Z0 = AMASeriesRepresentation`genBothX0Z0Funcs[
   linModQLZLB];
(*approx=1*{1,1};theK=65;theIter=35*)
approx=5*{1,1};theK=35;theIter=20
Print["{approx,theK,theIter}=",{approx,theK,theIter}];
smolStuff = {ptErg, tfErg, plyErg, iplyErg, dplyErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[approx, {qlCSMean, 
     qlCSSD, 
     qlCSMinZ, 
     qlCSMaxZ, 
     qlCSvv}, 
    theDistqlZLB];
smolRngErg = 
  Transpose[{qlCSMinZ, 
    qlCSMaxZ}];
toIg = quasiLinear`aGSpecqLin[[1]];
sgSpecErg = {toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 
   1, approx, {qlCSMean, 
    qlCSSD, 
    qlCSMinZ, 
    qlCSMaxZ, 
    qlCSvv}};

smolRngNoErg={{-0.02,0.02},{-.001,.001}};
smolStuffNoErg = {ptNoErg, tfNoErg, plyNoErg, iplyNoErg, dplyNoErg} = 
   AMASeriesRepresentation`smolyakInterpolationPrep[approx, smolRngNoErg,     theDistqlZLB];
sgSpecNoErg = {toIg, smolRngNoErg, ptNoErg, tfNoErg, plyNoErg, iplyNoErg, 1, approx, {}}

wTime=AbsoluteTiming[
theRes01 = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   linModQLZLB, {X0Z0, theK}, 
   quasiLinear`Private`qlEqnsqlZLB, sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, theIter,
"Traditional"->False,"addTailContribution"->True]];

Print["wTime=",wTime[[1]]]
Print["numhosts=",Length[hosts]]
Print["kernels=",Length[Kernels[]]]
Through[theRes01[[-1]] @@ # &[
  quasiLinear`anXEpsFlatqLin]]

fullVecs=Flatten[fillIn[{{},{2,3,4},#}]]& /@ sgSpecErg[[3]];

pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]

{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(-quasiLinear`Private`RR/.quasiLinear`Private`paramSubs),(theRes01[[-1,1]][ee,99,99,99,eps])[[3]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyR.pdf",Show[lpp3d,p3d],PlotRange->All]



pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[2]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(theRes01[[-1,1]][ee,99,99,99,eps])[[2]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyPi.pdf",Show[lpp3d,p3d],PlotRange->All]



pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[4]]] & /@ sgSpecErg[[3]]
{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp3d=ListPointPlot3D[pts,PlotStyle->{PointSize[Large],Red}]
p3d=Plot3D[{(theRes01[[-1,1]][ee,99,99,99,eps])[[4]]},{ee,minE,maxE},{eps,minEps,maxEps},PlotRange->All]
Export["reallyY.pdf",Show[lpp3d,p3d],PlotRange->All]

(*
Print["starting trad"]

frFuncTrad = AMASeriesRepresentation`genFRExtFunc[{4, 1, 4}, 
   linModQLZLB, {theRes01[[-2,2]], 0}, 
   quasiLinear`Private`qlEqnsqlZLB,"Traditional"->True];

Print[{"18",AMASeriesRepresentation`evaluateTriple[frFuncTrad[[1, 1]],  Flatten[quasiLinear`Private`anXEpsFlatqlZLB]]}]

pic=2
{Through[theRes01[[-1]] @@ # &[  fullVecs[[pic]]]],
Print[{"18",AMASeriesRepresentation`evaluateTriple[frFuncTrad[[1, 1]],  Flatten[fullVecs[[pic]]]]}]}



approx=5*{1,1};theK=0;theIter=1
Print["{approx,theK,theIter}=",{approx,theK,theIter}];
wTime=AbsoluteTiming[
theResTrad = AMASeriesRepresentation`parallelNestGenericIterREInterp[
   AMASeriesRepresentation`genFRExtFunc, 
   linModQLZLB, {theRes01[[-1]], theK}, 
   quasiLinear`Private`qlEqnsqlZLB, sgSpecErg, 
   AMASeriesRepresentation`smolyakInterpolation, {}, theIter,
"Traditional"->True]]
*)

Print["done"]
PrependTo[$Path,"/msu/scratch2/m1gsa00/git/persistentDR/code/"]

Get["canonicalNK.mth"]

<<JavaGraphics`
pts=Join[#,(theRes01[[-1,1]]@@Flatten[fillIn[{{},{2,3,4},#}]])[[3]]] & /@ sgSpecErg[[3]]

{minE,minEps,ig}=Min/@Transpose[pts];{maxE,maxEps,ig}=Max/@Transpose[pts];
lpp=ListPlot[pts[[All,{1,3}]],PlotStyle->{PointSize[Large],Red}]
plt=Plot[{(-quasiLinear`Private`RR/.quasiLinear`Private`paramSubs),(theRes01[[-1,1]][ee,99,99,99,0])[[3]]},{ee,minE,maxE},PlotRange->All]
Export["reallyR2.pdf",Show[lpp,plt],PlotRange->All]



lpnow=ListPlot[Transpose[{eta,hip[[1,-1]]}]]
Show[lpnow,plt,DisplayFunction->$DisplayFunction,PlotRange->All]





Options[actErrCP]={"Traditional"->False}
actErrCP[forDR_Function,{bothErrStr_String,acterrLoc_List,errBndLoc_List},
zPts_List,theName_String,opts:OptionsPattern[]]:=
Module[{},
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,tryEps}},betterRBCMean,betterRBCSD,betterRBCvv][[1]]]],
{z1,betterRBCMinZ[[1]],betterRBCMaxZ[[1]]},{z2,betterRBCMinZ[[2]],betterRBCMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]]

da=Plot[((theRes01[[-1,1]] @@ {xx,0,0,0,0})[[3]])-((theRes01[[-2,1]] @@ {xx,0,0,0,0})[[3]]),{xx,-.02,.02}]
