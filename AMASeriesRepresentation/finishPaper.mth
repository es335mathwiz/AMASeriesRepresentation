Print["setting history length to 1"];
$HistoryLength=1;
Get["tests/pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
Get["emscsToMma`"]
Get["betterRBCTrips`"]

LaunchKernels[]

ParallelEvaluate[$HistoryLength=1];
ParallelEvaluate[Get["tests/pathSetup.mth"]]
ParallelNeeds["AMASeriesRepresentation`"]
Print["preemscstomma"]
ParallelNeeds["emscsToMma`"]
ParallelNeeds["betterRBCTrips`"]


dirNameString[]:=
Module[{},
aDir="resDir"<>"-host-"<>$MachineName<>"numKern"<>ToString[numKern]<>"-"<>ToString[Round[AbsoluteTime[]]]<>"/";
CreateDirectory[aDir]]

fNameString[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
StringReplace[dirNameString[]<>"forBetterTripsRBC-"<>ToString[approx]<>"Iters"<>ToString[iters]<>"theK"<>ToString[theK],{" "->"","{"->"-","}"->"-"}]];


prepSmol[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{toIg,zPts,ptErg,tfErg,plyErg,iplyErg,dplyErg,bothX0Z0,smolStuff,smolRngErg,sgSpecErg},
(**)tryEps=0;
LaunchKernels[];numKern=Length[Kernels[]];
theName=fNameString[approx,iters,theK,numKern];
mthName=theName<>".mth";
bothX0Z0=genBothX0Z0Funcs[linModBetterRBCTrips];
smolStuff=
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv},theDistBetterRBCTrips];
smolRngErg=Transpose[{betterRBCTripsMinZ,betterRBCTripsMaxZ}];
toIg=aGSpecBetterRBCTrips[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv}};
zPts=backXtoZ[ptErg,betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}
]

actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetterTrips@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]

convDiscrep[approxDR_Function,bestDR_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
bestVals=bestDR @@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(bestVals-actualVals)]]]

Options[approxAndBound]={"Traditional"->False,"addTailContribution"->False};
approxAndBound[approx_?VectorQ,theK_Integer,iters_Integer,
opts:OptionsPattern[]]:=
Module[{},
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}=
prepSmol[approx,iters,theK];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetterRBCTrips,
{bothX0Z0,theK},rbcEqnsBetterRBCTrips,sgSpecErg,smolyakInterpolation,{},iters,Apply[Sequence,FilterRules[{opts},Options[parallelNestGenericIterREInterp]]]]];
{sgSpecErg,theRes}]


Options[errBoundInfo]={"Traditional"->False,"addTailContribution"->False};
errBoundInfo[approx:{_Integer,_Integer,_Integer},
theK_Integer,theIters_Integer,numPts_Integer,
opts:OptionsPattern[]]:=
Module[{sgSpec,theRes,pts,vals,phivals,rngs,
forC,forCActual,forK,forKActual,forT,forTActual,
theResC,worstC,cLoc,
theResK,worstk,kLoc,
theResT,worstT,tLoc,
theResCActual,worstCActual,cActualLoc,
theResKActual,worstkActual,kActualLoc,
theResTActual,worstTActual,tActualLoc},
{sgSpec,theRes}=approxAndBound[approx,theK,theIters,Apply[Sequence,FilterRules[{opts},Options[approxAndBound]]]];
pts=sgSpec[[3]];
{vals,phivals}=genCheckPt[linModBetterRBCTrips,
{theRes[[-1,1]],theRes[[-2,2]]},rbcEqnsBetterRBCTrips];
rngs=Transpose[With[{trnsp=Transpose[pts]},{Min/@trnsp,Max/@trnsp}]];
forC[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[1]]]];
forCActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1]],{kk,tt,ee}]},
-Norm[val[[1]]]];
forK[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[2]]]];
forKActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1]],{kk,tt,ee}]},
-Norm[val[[2]]]];
forT[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[4]]]];
forTActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1]],{kk,tt,ee}]},
-Norm[val[[4]]]];
theResC=MSNTO[forC,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstC=-pickBestMSNTO[theResC];
cLoc=MSNTOMinimizer[theResC];
theResK=MSNTO[forK,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstK=-pickBestMSNTO[theResK];
kLoc=MSNTOMinimizer[theResK];
theResT=MSNTO[forT,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstT=-pickBestMSNTO[theResT];
tLoc=MSNTOMinimizer[theResT];
theResCActual=MSNTO[forCActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstCActual=-pickBestMSNTO[theResCActual];
cActualLoc=MSNTOMinimizer[theResCActual];
theResKActual=MSNTO[forKActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstKActual=-pickBestMSNTO[theResKActual];
kActualLoc=MSNTOMinimizer[theResKActual];
theResTActual=MSNTO[forTActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstTActual=-pickBestMSNTO[theResTActual];
tActualLoc=MSNTOMinimizer[theResTActual];
{{approx,theK,theIters,numPts,{opts}},{worstC,worstK,worstT},{cLoc,kLoc,tLoc},
{worstCActual,worstKActual,worstTActual},{cActualLoc,kActualLoc,tActualLoc}}]
