Print["setting history length to 1"];
$HistoryLength=1;
Get["tests/pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Print["preemscstomma"]
(*Get["emscsToMma`"]*)
Get["betterRBCTrips`"]

LaunchKernels[]

ParallelEvaluate[$HistoryLength=1];
ParallelEvaluate[Get["tests/pathSetup.mth"]]

Print["after parallel pathSetup.mth"]

ParallelNeeds["AMASeriesRepresentation`"]

(*ParallelNeeds["emscsToMma`"]*)
ParallelNeeds["betterRBCTrips`"]
Print["done parallel betterRBCTrips"]
(*
*)


dirNameString[]:=
Module[{},
aDir="resDir"<>"-host-"<>$MachineName<>"numKern"<>ToString[numKern]<>"-"<>ToString[Round[AbsoluteTime[]]]<>"/"(*;
CreateDirectory[aDir]*)]

fNameString[approx_?VectorQ,theK_Integer,numKern_Integer]:=
Module[{},
StringReplace[dirNameString[]<>"forBetterTripsRBC-"<>ToString[approx]<>"theK"<>ToString[theK],{" "->"","{"->"-","}"->"-"}]];


prepSmol[approx_?VectorQ,theK_Integer]:=
Module[{toIg,zPts,ptErg,tfErg,plyErg,iplyErg,dplyErg,bothX0Z0,smolStuff,smolRngErg,sgSpecErg},
(**)tryEps=0;
LaunchKernels[];numKern=Length[Kernels[]];
theName=fNameString[approx,theK,numKern];
mthName=theName<>".mth";
bothX0Z0=genBothX0Z0Funcs[linModBetterRBCTrips];
smolStuff=
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv},theDistBetterRBCTrips];
smolRngErg=Transpose[{betterRBCTripsMinZ,betterRBCTripsMaxZ}];
toIg=aGSpecBetterRBCTrips[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsMinZ,betterRBCTripsMaxZ,betterRBCTripsvv}};
zPts=backXtoZ[ptErg,betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}
]



actualErrs[approxDR_Function,xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
actualVals=simpRBCExactDRBetterTrips@@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(approxVals-actualVals)]]]

convDiscrep[approxDR_Function,bestDR_Function,
xeps:{kk_?NumberQ,tt_?NumberQ,ee_?NumberQ}]:=
With[{approxVals=(approxDR @@ {ig,kk,ig,tt,ee})[[Range[4]]],
bestVals=bestDR @@ {ig,kk,ig,tt,ee}},
(-1)*Abs[Flatten[(bestVals-actualVals)]]]

Options[approxAndBound]={"Traditional"->False,"addTailContribution"->False,"maxForCEIters"->40,
"normConvTol"->10^(-10),"maxNormsToKeep"->50};
approxAndBound[approx_?VectorQ,theK_Integer,numIters_Integer,
opts:OptionsPattern[]]:=
Module[{},
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}=
prepSmol[approx,theK];
Print["pre parallelnestgeneric"];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetterRBCTrips,
{bothX0Z0,theK},rbcEqnsBetterRBCTrips,sgSpecErg,smolyakInterpolation,{},
numIters,Apply[Sequence,FilterRules[{opts},Options[parallelNestGenericIterREInterp]]]]];
Print["post parallelnestgeneric"];
{sgSpecErg,theRes,tm,Length[Kernels[]]}]


Options[errBoundInfo]={"Traditional"->False,"addTailContribution"->False,"maxForCEIters"->40,
"normConvTol"->10^(-10),"maxNormsToKeep"->50};
errBoundInfo[approx:{_Integer,_Integer,_Integer},
theK_Integer,numIters_Integer,numPts_Integer,
opts:OptionsPattern[]]:=
Module[{sgSpec,theRes,pts,vals,phivals,rngs,
forC,forCActual,forK,forKActual,forT,forTActual,
theResC,worstC,cLoc,
theResK,worstk,kLoc,
theResT,worstT,tLoc,
theResCActual,worstCActual,cActualLoc,
theResKActual,worstkActual,kActualLoc,
theResTActual,worstTActual,tActualLoc},
{sgSpec,theRes,tm,kerns}=approxAndBound[approx,theK,numIters,Apply[Sequence,FilterRules[{opts},Options[approxAndBound]]]];
Print["done approxAndBound",approx,tm,kerns];
pts=sgSpec[[3]];
{vals,phivals}=genCheckPt[linModBetterRBCTrips,
{theRes[[-1,1,1]],theRes[[-2,1,2]]},rbcEqnsBetterRBCTrips];
rngs=Transpose[With[{trnsp=Transpose[pts]},{Min/@trnsp,Max/@trnsp}]];
forC[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[1]]]];
forCActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1,1]],{kk,tt,ee}]},
-Norm[val[[1]]]];
forK[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[2]]]];
forKActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1,1]],{kk,tt,ee}]},
-Norm[val[[2]]]];
forT[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{prod=phivals[99,kk,99,tt,ee]},
-Norm[prod[[4]]]];
forTActual[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
With[{val=actualErrs[theRes[[-1,1,1]],{kk,tt,ee}]},
-Norm[val[[4]]]];
theResC=MSNTO[forC,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstC=-pickBestMSNTO[theResC];
cLoc=MSNTOMinimizer[theResC];
theResK=MSNTO[forK,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstK=-pickBestMSNTO[theResK];
kLoc=MSNTOMinimizer[theResK];
theResT=MSNTO[forT,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstT=-pickBestMSNTO[theResT];
tLoc=MSNTOMinimizer[theResT];
theResCActual=MSNTO[forCActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstCActual=-pickBestMSNTO[theResCActual];
cActualLoc=MSNTOMinimizer[theResCActual];
theResKActual=MSNTO[forKActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstKActual=-pickBestMSNTO[theResKActual];
kActualLoc=MSNTOMinimizer[theResKActual];
theResTActual=MSNTO[forTActual,{{rngs,{}},{{},Infinity}},numPts,Nied,.1,1.2,.5];
worstTActual=-pickBestMSNTO[theResTActual];
tActualLoc=MSNTOMinimizer[theResTActual];
{{approx,theK,numPts,{opts}},{worstC,worstK,worstT},{cLoc,kLoc,tLoc},
{worstCActual,worstKActual,worstTActual},{cActualLoc,kActualLoc,tActualLoc}}]




Options[actErrCP]={"Traditional"->False}
actErrCP[forDR_Function,{bothErrStr_String,acterrLoc_List,errBndLoc_List},
zPts_List,theName_String,opts:OptionsPattern[]]:=
Module[{},
ContourPlot[
Norm[actualErrs[forDR,
backZtoX[{{z1,z2,tryEps}},betterRBCTripsMean,betterRBCTripsSD,betterRBCTripsvv][[1]]]],
{z1,betterRBCTripsMinZ[[1]],betterRBCTripsMaxZ[[1]]},{z2,betterRBCTripsMinZ[[2]],betterRBCTripsMaxZ[[2]]},PlotRange->All,PlotLegends->Automatic,PlotLabel->StringReplace[theName,"Iters"->"\nIters"
]<>bothErrStr,
Epilog->{PointSize[0.05],Green,Point[acterrLoc[[{1,2}]]],PointSize[0.025],Orange,Point[errBndLoc[[{1,2}]]],PointSize[0.0125],Black,Point[#]&/@zPts[[All,{1,2}]]},PlotRangeClipping->False]]

Print["got to sort out working stuff!"]



(*sort out working stuff *)

(*

ab1=approxAndBound[{1,1,1},4,2];


ab2=approxAndBound[{2*1,1,1},4,2];

ab3=approxAndBound[{3*1,2*1,1},4,2];

abt1=approxAndBound[{1,1,1},4,2,"Traditional"->True];


abt2=approxAndBound[{2*1,1,1},4,2,"Traditional"->True];




aFunc1[kk_?NumberQ,tt_?NumberQ,ee_?NumberQ]:=
Module[{},Print[{kk,tt,ee}];
(ab3[[2,-1,1]][0,kk,0,tt,0][[1,1]])]


*)

