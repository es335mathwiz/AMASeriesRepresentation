Get["pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Get["emscsToMma`"]
Print["after emscsToMma"]
Get["betterRBCFixCompSlack`"]
Print["after betterRBCFixCompSlack"]


fNameStringCS[approx_?VectorQ,iters_Integer,theK_Integer,numKern_Integer]:=
Module[{},
StringReplace[dirNameStringCS[]<>"forBetterRBC-CS-"<>ToString[approx]<>"Iters"<>ToString[iters]<>"theK"<>ToString[theK],{" "->"","{"->"-","}"->"-"}]];




dirNameStringCS[]:=
Module[{},
aDir="resDirCS"<>"-host-"<>$MachineName<>"numKern"<>ToString[numKern]<>"-"<>ToString[Round[AbsoluteTime[]]]<>"/";
CreateDirectory[aDir]]


prepSmolCS[approx_?VectorQ,iters_Integer,theK_Integer]:=
Module[{toIg,zPts,ptErg,tfErg,plyErg,iplyErg,dplyErg,bothX0Z0,smolStuff,smolRngErg,sgSpecErg},
(**)tryEps=0;
LaunchKernels[];numKern=Length[Kernels[]];
theName=fNameStringCS[approx,iters,theK,numKern];
mthName=theName<>".mth";
bothX0Z0=genBothX0Z0Funcs[linModBetterFixCompSlack];
smolStuff=
{ptErg,tfErg,plyErg,iplyErg,dplyErg}=smolyakInterpolationPrep[approx,{betterRBCCSMean,betterRBCCSSD,betterRBCCSMinZ,betterRBCCSMaxZ,betterRBCCSvv},theDistBetterFixCompSlack];
smolRngErg=Transpose[{betterRBCCSMinZ,betterRBCCSMaxZ}];
toIg=aGSpecBetterFixCompSlack[[1]];
sgSpecErg={toIg,smolRngErg,ptErg,tfErg,plyErg,iplyErg,1,approx,
{betterRBCCSMean,betterRBCCSSD,betterRBCCSMinZ,betterRBCCSMaxZ,betterRBCCSvv}};
zPts=backXtoZ[ptErg,betterRBCCSMean,betterRBCCSSD,betterRBCCSvv];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}
]


(*

"xVarRanges"->{{1.,2},{.3,.6},{3,6},{0.4,1},{-5.5,5.5},{0.2,2},{0.85,1.2}}

boo=doItApproxSeriesCS[4*{1,1,1},12,20,"Traditional"->False];


<<JavaGraphics`
hey2[kk_?NumberQ,tt_?NumberQ]:=
(boo[[2,-1,2]][99,99,kk,99,99,99,tt])[[2]]
hey1[kk_?NumberQ,tt_?NumberQ]:=
(boo[[2,-1,2]][99,99,kk,99,99,99,tt])[[1]]

Plot3D[{hey1[kk,tt]},{kk,betterRBCFixCompSlack`Private`kLow,betterRBCFixCompSlack`Private`kHigh},{tt,0.9,1.1},PlotRange->All]



*)


Options[doItApproxSeriesCS]={"xVarRanges"->{{1.,2},{.3,.6},{3,6},{0.4,1},{-5.5,5.5},{0.2,2},{0.85,1.2}},"Traditional"->False}
doItApproxSeriesCS[approx_?VectorQ,iters_Integer,theK_Integer,opts:OptionsPattern[]]:=
Module[{lclMthName,lclName,tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,tm,ig,theRes,
forDR,forDRCE,drName=Unique["drName"],drerrName=Unique["drerrName"],bothErrStr,acterrLoc,errBndLoc},
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts}=
prepSmolCS[approx,iters,theK];
Print["indo:",{OptionValue["xVarRanges"],OptionValue["Traditional"]}];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModBetterFixCompSlack,
{bothX0Z0,theK},rbcEqnsBetterFixCompSlack,sgSpecErg,smolyakInterpolation,{},iters,FilterRules[{opts},Options[parallelNestGenericIterREInterp]]]];
{zPts,theRes}
]









(*

here


{tryEpsTry,numKernTry,theNameTry,mthNameTry,bothX0Z0Try,sgSpecErgTry,zPtsTry}=
prepSmolCS[1*{1,1,1},1,2];

filledPts=Map[
Function[xx,Print["parallelSmolyakGenInterpData: parallel maps smolPts",xx];
fillIn[{{},{1,2,4,5,6},xx}]],N[sgSpecErgTry[[3]]]]

bothX0Z0FixCompSlack=genBothX0Z0Funcs[linModBetterFixCompSlack];

theFRTrips=genFRExtFunc[{7,1,7},linModBetterFixCompSlack,{bothX0Z0FixCompSlack,2},
rbcEqnsBetterFixCompSlack];

{evaluateTriple[theFRTrips[[1,1]],#1],
evaluateTriple[theFRTrips[[1,2]],#1]}&/@ filledPts

bothX0Z0FixCompSlack=genBothX0Z0Funcs[linModBetterFixCompSlack];

theFRTrips=genFRExtFunc[{7,1,7},linModBetterFixCompSlack,{bothX0Z0FixCompSlack,2},
rbcEqnsBetterFixCompSlack];

{evaluateTriple[theFRTrips[[1,1]],#1],
evaluateTriple[theFRTrips[[1,2]],#1]}&/@ filledPts


parallelDoGenericIterREInterp[genFRExtFunc,linModBetterFixCompSlack,
{bothX0Z0FixCompSlack,2},rbcEqnsBetterFixCompSlack,sgSpecErgTry,smolyakInterpolation,{},"Traditional"->False]

hit=parallelDoGenericIterREInterp[genFRExtFunc,linModBetterFixCompSlack,{hit,2},rbcEqnsBetterFixCompSlack,sgSpecErgTry,smolyakInterpolation,{},"Traditional"->False]
iDat=smolyakGenInterpData[theFRTrips,sgSpecErgTry];

smolyakGenInterpData[theFRTrips,sgSpecTry]
parallelSmolyakGenInterpData[theFRTrips,sgSpecErgTry]

tryFunc=makeSmolyakInterpFuncs[theFRTrips,sgSpecErgTry]

parallelMakeGenericInterpFuncs[theFRTrips,{},sgSpecTry,smolyakInterpolation,{}]



boo=doItApproxSeriesCS[4*{1,1,1},1,20,"Traditional"->False];


ap=1*{1,1,1};
smolRng=#[[{2,3}]]&/@Drop[aGSpecBetterFixCompSlack,2][[1]];
{pt,tf,ply,iply,dply}=smolyakInterpolationPrep[ap,smolRng,theDistBetterFixCompSlack];
toIg=aGSpecBetterFixCompSlack[[1]];
sgSpecTry={toIg,smolRng,pt,tf,ply,iply,1,ap,{}};



parallelDoGenericIterREInterp[genFRExtFunc,
linModBetterFixCompSlack,{boo[[2,-1,2]],20},
rbcEqnsBetterFixCompSlack,sgSpecTry,
smolyakInterpolation,{}]


(*



*)

hey=parallelNestGenericIterREInterp[genFRExtFunc,
linModBetterFixCompSlack,{bothX0Z0FixCompSlack,20},
rbcEqnsBetterFixCompSlack,sgSpecFixCompSlack,
smolyakInterpolation,{},15];

<<JavaGraphics`
Plot3D[{.363318,(hey[[-1,2]][99,99,kk,99,99,99,tt])[[2]]},{kk,betterRBCFixCompSlack`Private`kLow,betterRBCFixCompSlack`Private`kHigh},{tt,0.9,1.1},PlotRange->All]

boo=doItApproxSeriesCS[2*{1,1,1},1,5];
anAugDR=boo[[2,2,1]];
anAugDRCE=boo[[2,2,2]];
ha=simulateBetterRBCCS[anAugDR,20000];
justKT01=ha[[All,{3,7}]];


betterRBCCSMean01=Mean[justKT01];
betterRBCCSSD01=StandardDeviation[justKT01];

normedRes01=(#/betterRBCCSSD01)&/@((#-betterRBCCSMean01)&/@justKT01);
{uu01,ss01,vv01}=SingularValueDecomposition[normedRes01];
zz=normedRes01 .vv01;
betterRBCCSMinZ01=Min/@Transpose[zz];
betterRBCCSMaxZ01=Max/@Transpose[zz];
{ig,ig,theKs01,ig,ig,ig,theThetas01}=Transpose[ha];

betterRBCCSMean01=Append[betterRBCCSMean01,0];
betterRBCCSSD01=Append[betterRBCCSSD01,sigVal];
betterRBCCSMinZ01=Append[betterRBCCSMinZ01,-3];
betterRBCCSMaxZ01=Append[betterRBCCSMaxZ01,3];
betterRBCCSvv01=ArrayFlatten[{{ArrayFlatten[{{vv01,{{0},{0}}}}]},{{{0,0,1}}}}];

chkBounded[


*)
