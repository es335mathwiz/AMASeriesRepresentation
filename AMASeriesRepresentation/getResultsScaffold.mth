Print[{$CommandLine,$ScriptCommandLine,$ScriptInputString}]
theArgs=ToExpression[Flatten[StringSplit[Drop[$ScriptCommandLine,1],","]]]
Print[theArgs]
Print["more"]


sjn=Environment["SLURM_JOB_NODELIST"]
hosts=If[sjn===$Failed,0,Counts[StringSplit[sjn,","]]]
Print["sjn=",sjn,"<<<<"]
local=$MachineName
Print["local=",local,"<<<<"]
hosts[local]--
Needs["SubKernels`RemoteKernels`"]

math = "/opt/mathematica/11.3/Executables/MathKernel" <> 
   " -wstp -linkmode Connect `4` -linkname `2` -subkernel -noinit >&  \
/dev/null &";


ssh = "source ~/.bashrc;export LD_LIBRARY_PATH=;ssh"
user="m1gsa00"
remote = (SubKernels`RemoteKernels`RemoteMachine[#, 
  ssh <> " " <> user <> "@" <> # <>
    " \"" <> math <> "\"", 28])&/@
(Keys[hosts])


Print["hosts=",hosts];
Print[remote // InputForm]
kerns = LaunchKernels[remote]
Print["pre eval"]
ParallelEvaluate[$MachineName]
Print["post eval"]


Print["hosts=",hosts];
Print[remote // InputForm]
kerns = LaunchKernels[remote]
Print["pre eval"]
ParallelEvaluate[$MachineName]
Print["post eval"]
(*Get["JavaGraphics`"]*)
ParallelEvaluate[SetDirectory["/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/AMASeriesRepresentation"]]
Get["tests/pathSetup.mth"]
ParallelEvaluate[Get["tests/pathSetup.mth"]]
Get["getResults.mth"];
ParallelEvaluate[Get["getResults.mth"]];
gotIt=doCase[1*{theArgs[[1]],theArgs[[2]],theArgs[[3]]},theArgs[[4]],"normConvTol"->10^-11]
Print[theArgs];
Print[InputForm[gotIt[[1]]]];
Print[InputForm[gotIt[[2]]]];
Quit
