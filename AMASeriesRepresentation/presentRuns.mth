Get["genArbLin.mth"]
Get["pathSetup.mth"]
Get["simpleRBCModel`"]
Get["betterRBC.m"]
Get["betterZeroFRBC.m"]


tMatNormSimpRBC[kk_Integer]:=Norm[
truncErrorMat @@ Append[Through[{getF,getPhi}[linMod]],kk],Infinity];

tMatNormSimpArb[kk_Integer]:=Norm[
truncErrorMat @@ Append[Through[{getF,getPhi}[linModArb]],kk],Infinity];



numT=25;
seriesKnown=genSeriesReps[linMod,anXEps,theDist,simpRBCExactDR,numT];
seriesKnownArb=genSeriesReps[
Join[linModArb[[{1,2,3,4}]],linMod[[{5,6,7,8}]]],
anXEps,theDist,simpRBCExactDR,numT];

exct=simpRBCExactDR @@ Flatten[anXEps];
simpTrunc=Norm[#[[{4,5,6}]]-exct,Infinity]& /@ seriesKnown;
simpArbTrunc=Norm[#[[{4,5,6}]]-exct,Infinity]& /@ seriesKnownArb;







thePath=iterateDRREIntegrate[simpRBCExactDR,anXEps,theDist,2];
theZ= (getH[linModArb] .thePath[[Range[3*3]]] -getPsiC[linModArb]);

arbNorm=Norm[theZ,Infinity]

rbcNorm=Norm[genZsREExact[linMod,anXEps,theDist,simpRBCExactDR,1][[1]],Infinity]

numT=25;
arbMax=tMatNormSimpArb/@Range[2*numT];
rbcMax=tMatNormSimpRBC/@Range[numT];
Export["arbTruncErrSimp.pdf",
	   ListPlot[{arbNorm*arbMax,simpArbTrunc},
				PlotJoined->True,PlotRange->All,
	   PlotLabel->"Arbitrary System: Truncation Error Bound and Actural Error"]];

Export["truncErrSimp.pdf",
	   ListPlot[{rbcNorm*rbcMax[[Range[5]]],simpTrunc[[Range[5]]]},
				PlotJoined->True,PlotRange->All,
	   PlotLabel->"Linearize RBC System: Truncation Error Bound and Actural Error"]];


toOccDir[fName_String]:=CopyFile[fName,occDir <>fName,OverwriteTarget -> True];
occDir="~/git/paperProduction/occBind/docs/"

If[FileExistsQ[occDir="../../../DropBox/Apps/Texpad/paperProduction/occBind/docs/"],
toOccDir/@{
"arbTruncErrSimp.pdf",
"truncErrSimp.pdf"
}];
If[FileExistsQ[occDir="../../paperProduction/occBind/docs/"],
toOccDir/@{
"arbTruncErrSimp.pdf",
"truncErrSimp.pdf"
}];





(*
unneeded since machine precision 0
genErrsREWorst[simpleRBCExactDR,anXEps,theDist,rbcEqnsFunctionalNext,1]



*)






tMatNorm[kk_Integer]:=Norm[
truncErrorMat @@ Append[Through[{getF,getPhi}[linModBetter]],kk],Infinity];
(*




{tim00,aBunch00}=Timing[nestIterREInterp[{genFRFunc},linModBetterZeroF,{genX0Z0Funcs[linModBetterZeroF],2},rbcEqnsFunctionalNextBetterZeroF,aGSpecBetterZeroF,theDistBetterZeroF,5]];
{(xz00=aBunch00[[-1,1]]) @@ anXEpsFlatBetterZeroF,
 (XZ00=aBunch00[[-1,2]]) @@ anXFlatBetterZeroF}


{tim00,aBunch00}=Timing[nestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],2},rbcEqnsFunctionalNextBetter,aGSpecBetter,theDistBetter,5]];
{(xz00=aBunch00[[-1,1]]) @@ anXEpsFlatBetter,
 (XZ00=aBunch00[[-1,2]]) @@ anXFlatBetter}
*)
(*




scl=genErrsREWorst[xz00,anXEpsBetter,theDistBetter,rbcEqnsFunctionalNextBetter,0]
bnd=Norm[scl[[1]],Infinity]*tMatNorm[0]




chkbnd[kP_Integer,tP_Integer,eP_Integer]:=
Module[{scl,bnd,now,exct,xz00,tim00,aBunch00,agp=
{{1, 3}, 1, {{kP, 0.018732441104784652, 0.7492976441913861}, {tP, 9/10, 11/10}, 
  {eP, -0.03, 0.09}}}},
{tim00,aBunch00}=Timing[nestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],2},rbcEqnsFunctionalNextBetter,agp,theDistBetter,5]];
now=((xz00=aBunch00[[-1,1]]) @@ anXEpsFlatBetter)[[{1,2,4}]];
Print["now=",{now,xz00}];
exct=simpRBCExactDR @@ Flatten[anXEps];
scl=genErrsREWorst[xz00,anXEpsBetter,theDistBetter,rbcEqnsFunctionalNextBetter,0];Print["scl=",scl];
bnd=Norm[scl[[1]],Infinity]*tMatNorm[0];
{Norm[now-exct,Infinity],bnd}]

*)

chkbndMore[kP_Integer,tP_Integer,eP_Integer,nT_Integer]:=
Module[{scl,bnd,now,exct,xz00,tim00,aBunch00,agp=
{{1, 3}, 1, {{kP, 0.018732441104784652, 0.7492976441913861}, {tP, 9/10, 11/10}, 
  {eP, -0.03, 0.09}}}},
{tim00,aBunch00}=Timing[nestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],2},rbcEqnsFunctionalNextBetter,agp,theDistBetter,nT]];
now=((xz00=aBunch00[[-1,1]]) @@ anXEpsFlatBetter)[[{1,2,4}]];
Print["now=",{now,xz00}];
exct=simpRBCExactDR @@ Flatten[anXEps];
{tim01,scl}=Timing[genErrsREWorst[xz00,anXEpsBetter,theDistBetter,rbcEqnsFunctionalNextBetter,0]];Print["scl=",scl];
bnd=Norm[scl[[1]],Infinity]*tMatNorm[0];
{tim00,tim01,now,Norm[now-exct,Infinity],bnd}]






(*
ss=betterRBC`Private`ssSolnVecRE;
bigSS=iterateDRREIntegrate[simpRBCExactDRBetter,Join[ss,{{0}}],theDistBetter,2]
checkMod[{genFRFunc},linModBetter,aGSpecBetter,theDistBetter,anXBetter,{{0.01}},bigSS,rbcEqnsFunctionalNextBetter]

chkgd=iterateDRREIntegrate[xz00,Transpose[{{0.1,0.2, 1., 1.0, -0.01}}],theDistBe
tter,20]
 *)
(*


actDiff00=
(simpRBCExactDRBetter @@ anXEpsFlatBetter)-
(xz00 @@anXEpsFlatBetter)[[Range[4]]]


iter00=iterateDRREIntegrate[xz00,anXEpsBetter,theDistBetter,1];
noPhipth00=worstPathForErrDRREIntegrate[xz00,anXBetter,theDistBetter,rbcEqnsFunctionalNextBetter];
pth00=worstPathForErrDRREIntegrate[getPhi[linModBetter],xz00,anXBetter,theDistBetter,rbcEqnsFunctionalNextBetter];
appxz00=rbcEqnsFunctionalNextBetter @@ Flatten[pth00]
maxNormErrxz00=Norm[appxz00,Infinity]
phiappNorm=Norm[getPhi[linModBetter]. Transpose[{appxz00}],Infinity]

waypessimistic00=Norm[getPhi[linModBetter],Infinity]*tMatNorm[0]*maxNormErrxz00
pessimistic00=		tMatNorm[0]*phiappNorm



aBetterGSpecBetter=
{{1, 3}, 1, {{5, 0.018732441104784652, 0.7492976441913861}, {5, 9/10, 11/10}, 
  {5, -0.03, 0.09}}}


{timcc,aBunchcc}=Timing[nestIterREInterp[{genFRFunc},linModBetter,{genX0Z0Funcs[linModBetter],2},rbcEqnsFunctionalNextBetter,aBetterGSpecBetter,theDistBetter,5]];
{(xzcc=aBunchcc[[-1,1]]) @@ anXEpsFlatBetter,
 (XZcc=aBunchcc[[-1,2]]) @@ anXFlatBetter}



actDiffcc=
(simpRBCExactDRBetter @@ anXEpsFlatBetter)-
(xzcc @@anXEpsFlatBetter)[[Range[4]]]




itercc=iterateDRREIntegrate[xzcc,anXEpsBetter,theDistBetter,1];
noPhipthcc=worstPathForErrDRREIntegrate[xzcc,anXBetter,theDistBetter,rbcEqnsFunctionalNextBetter];
pthcc=worstPathForErrDRREIntegrate[getPhi[linModBetter],xzcc,anXBetter,theDistBetter,rbcEqnsFunctionalNextBetter];
appxzcc=rbcEqnsFunctionalNextBetter @@ Flatten[pthcc]
maxNormErrxzcc=Norm[appxzcc,Infinity]
phiappNorm=Norm[getPhi[linModBetter]. Transpose[{appxzcc}],Infinity]

waypessimisticcc=Norm[getPhi[linModBetter],Infinity]*tMatNorm[0]*maxNormErrxzcc
pessimisticcc=		tMatNorm[0]*phiappNorm


*)
(*
truncerrmat
patherr
patherrdrpf
patherrdrreintegrate
evalpatherrdrreintegrate
evalBadPathErrDRREIntegrate
worstPathForErrDRREIntegrate
genErrsREWorst
 *)


							
