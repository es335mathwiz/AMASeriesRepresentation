$AMADIR = 
  Switch[$OperatingSystem, "MacOSX", 
   "~/git/AMASeriesRepresentation/AMASeriesRepresentation", 
   "Windows",
   "u:/git/AMASeriesRepresentation/AMASeriesRepresentation",
   "Unix", 
   "/msu/scratch2/m1gsa00/git/AMASeriesRepresentation/\
AMASeriesRepresentation"];
SetDirectory[$AMADIR];
Get["tests/pathSetup.mth"]; TestNotebookUpdate[];



BeginTestSection["Running... someTests"]

BeginTestSection["betterRBC"]

BeginTestSection["nestGenericIterREInterp"]

BeginTestSection["sgSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 1 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"8cf4925b-23f2-4119-8128-1ea756f68e94"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 2 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"cb6a795e-e42e-4833-a81f-b8b47fc31346"
]

VerificationTest[(* 3 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"ac8e0d6a-e8a6-4304-8d7b-b17f5ed5fd9c"
]

VerificationTest[(* 4 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"3d578a28-17a2-42f0-b68b-8122ca0628a4"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 5 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"d322000f-718c-4846-b2e3-08601f621687"
]

EndTestSection[]

BeginTestSection["smolyakGenInterpData"]

VerificationTest[(* 6 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`smolyakGenInterpData[frFunc, sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"5b8421de-7028-4aab-812a-ca92607dcb9a"
]

EndTestSection[]

BeginTestSection["makeGenericInterpFuncs"]

VerificationTest[(* 7 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`smolyakGenInterpData[frFunc, sgSpecErg], Set[interpFuncs, AMASeriesRepresentation`makeGenericInterpFuncs[frFunc, List[], sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]], Through[Function[Apply[interpFuncs, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"c2cf0aeb-0278-450a-9391-6615d9fabfca"
]

EndTestSection[]

BeginTestSection["doGenericIterREInterp"]

VerificationTest[(* 8 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`smolyakGenInterpData[frFunc, sgSpecErg], Set[List[drFunc, drCEFunc], Set[thePair, AMASeriesRepresentation`doGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]]], Through[Function[Apply[thePair, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"9aa7e445-7b2f-47e7-98c8-878d76ad44a6"
]

EndTestSection[]

BeginTestSection["nestGenericIterREInterp"]

VerificationTest[(* 9 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`smolyakGenInterpData[frFunc, sgSpecErg], Set[theRes, AMASeriesRepresentation`nestGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[], 3]], Through[Function[Apply[Part[theRes, -1], Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39192303306251025`], List[0.2036684478387868`], List[2.8228738204606625`], List[1.1049728399309633`], List[-0.00292104910888534`], List[-0.0013228862330748237`], List[-0.00015634063751780204`], List[-0.00008198723260397831`]], List[List[0.38826090300015387`], List[0.2017721099683617`], List[2.8229084268394375`], List[1.0948534136911292`], List[-0.0027175123063728646`], List[-0.001344158573894957`], List[-0.00026549809996145434`], List[-0.00019190895850723568`]]]	
	,
	TestID->"a85e4c79-0e52-406a-840d-97d73cbd62d8"
]

EndTestSection[]

EndTestSection[]

BeginTestSection["gSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 10 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"38eb6b77-b138-4e13-87b5-08240809a533"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 11 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"fd9283c1-8b94-49b1-ad12-7032b6354518"
]

VerificationTest[(* 12 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"1a741340-ddd5-49a1-b14f-591c7d589707"
]

VerificationTest[(* 13 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"fb504660-5dad-4719-a37a-621ad45495ad"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 14 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"e65a90ad-e3a7-4e49-8bd7-5a7961024e36"
]

EndTestSection[]

BeginTestSection["genInterpData"]

VerificationTest[(* 15 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], AMASeriesRepresentation`genInterpData[frFunc, betterRBC`aGSpecBetter]]
	,
	List[List[List[0.018732441104790748`, 0.9`, -0.03`], List[List[0.14601829966624436`], List[0.06369961218211743`], List[6.013042349804957`], List[0.8780142197396383`], List[-0.1806224856554996`], List[-0.09325283709198334`], List[1.9247235944091003`], List[0.0029879108692634215`]]], List[List[0.018732441104790748`, 0.9`, -0.010000000000000002`], List[List[0.14868082054741355`], List[0.06527367414789827`], List[6.024659268377357`], List[0.8957512835409256`], List[-0.1778052795905797`], List[-0.0987217048473819`], List[1.9076448249546005`], List[0.0007059656426881`]]], List[List[0.018732441104790748`, 0.9`, 0.009999999999999995`], List[List[0.15139448397367655`], List[0.06688217821922793`], List[6.036195215395246`], List[0.9138466597991386`], List[-0.17487164561579438`], List[-0.1043010510598685`], List[1.8898850175619066`], List[-0.0012176671269613637`]]], List[List[0.018732441104790748`, 0.9`, 0.029999999999999992`], List[List[0.15416044284326968`], List[0.068525700422499`], List[6.047644711645681`], List[0.9323075869060562`], List[-0.1718219273729577`], List[-0.10999310754232067`], List[1.8714274937048234`], List[-0.0027757490479063396`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.03`], List[List[0.15526569700385207`], List[0.06918349528169122`], List[6.052134267205134`], List[0.9396888453585026`], List[-0.170587628301855`], List[-0.11226897049219164`], List[1.863954173569793`], List[0.0013323697422963354`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.15810655850011907`], List[0.0708768082375152`], List[6.063453839849518`], List[0.9586718192429393`], List[-0.16737705849313692`], List[-0.11812198962440189`], List[1.8444954591113982`], List[0.0002963345988705103`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.1610026123064369`], List[0.07260652528313563`], List[6.074673327511174`], List[0.9780382746375345`], List[-0.16405217752854342`], List[-0.12409324758628501`], List[1.8242979670620965`], List[-0.0003562190343968979`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.16395512820910857`], List[0.0743732270022681`], List[6.085786820343178`], List[0.997795958382669`], List[-0.1606141614214676`], List[-0.13018513296064366`], List[1.8033440782771197`], List[-0.0006175443171249177`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.03`], List[List[0.16445630491004534`], List[0.07467341656310524`], List[6.087641298487849`], List[1.001150993567102`], List[-0.16002613482665012`], List[-0.1312195907459871`], List[1.7997517773884188`], List[-0.0005356487949356213`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.1674764164921173`], List[0.07648404579501585`], List[6.098623356049353`], List[1.0213755852062756`], List[-0.15645785975914062`], List[-0.13745543780166222`], List[1.7778918670702766`], List[-0.0003300661836245693`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.17055587183884124`], List[0.07833291870003874`], List[6.109486172851621`], List[1.042008740698054`], List[-0.15277998615073107`], List[-0.1438172573240638`], List[1.755236421401993`], List[0.0002840802802914056`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.1736960625822383`], List[0.08022061504316563`], List[6.12022343958678`], List[1.0630587135797471`], List[-0.148994640182958`], List[-0.1503075941258264`], List[1.7317669548586747`], List[0.0013150441341220065`]]], List[List[0.018732441104790748`, 1.1`, -0.03`], List[List[0.1736000625633458`], List[0.08016287422885868`], List[6.119900187640223`], List[1.0624150554557745`], List[-0.14911082710246018`], List[-0.15010913505733947`], List[1.7324898141326475`], List[-0.0026017536520944054`]]], List[List[0.018732441104790748`, 1.1`, -0.010000000000000002`], List[List[0.17680051749387976`], List[0.08208877067065219`], List[6.1305095630056705`], List[1.0838772632405813`], List[-0.14522361397834438`], List[-0.1567265762205987`], List[1.708213068856748`], List[-0.0011585548951502`]]], List[List[0.018732441104790748`, 1.1`, 0.009999999999999995`], List[List[0.180064570926996`], List[0.0840546277770324`], List[6.140980597626225`], List[1.1057730363825737`], List[-0.1412341258861669`], List[-0.1634776985629039`], List[1.6830851064903076`], List[0.0007182092189795674`]]], List[List[0.018732441104790748`, 1.1`, 0.029999999999999992`], List[List[0.18339374118481375`], List[0.08606101925982905`], List[6.151306615999018`], List[1.1281111334829566`], List[-0.1371455540026435`], List[-0.17036520262320842`], List[1.6570866502575816`], List[0.0030372972914998815`]]], List[List[0.0702466541429653`, 0.9`, -0.03`], List[List[0.22589022846015555`], List[0.11161987741340525`], List[3.886906599390642`], List[0.8780142197396383`], List[-0.08573309698002846`], List[-0.019686130475389172`], List[0.41410496815214415`], List[0.0029879108692634215`]]], List[List[0.0702466541429653`, 0.9`, -0.010000000000000002`], List[List[0.23016056326758397`], List[0.11416769901719503`], List[3.8918538902754074`], List[0.8957512835409256`], List[-0.08087055158725576`], List[-0.022573424666519484`], List[0.4027468690660975`], List[0.0007059656426881`]]], List[List[0.0702466541429653`, 0.9`, 0.009999999999999995`], List[List[0.23452112202434575`], List[0.11676303256767002`], List[3.896649700082331`], List[0.9138466597991386`], List[-0.0759988608391287`], List[-0.025519046069362002`], List[0.3909383955828171`], List[-0.0012176671269613637`]]], List[List[0.0702466541429653`, 0.9`, 0.029999999999999992`], List[List[0.23897424254132477`], List[0.1194063227036158`], List[3.9012890133748885`], List[0.9323075869060562`], List[-0.07112943664743301`], List[-0.0285241729717536`], List[0.37867246424603646`], List[-0.0027757490479063396`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.03`], List[List[0.24075608196631001`], List[0.12046185113185731`], List[3.903074172348415`], List[0.9396888453585026`], List[-0.06921269670388935`], List[-0.029725717088172357`], List[0.373708717219826`], List[0.0013323697422963354`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.24534230246836264`], List[0.12317271692008278`], List[3.907486844289977`], List[0.9586718192429393`], List[-0.06436703047047657`], List[-0.0328158243821955`], List[0.36079336389760114`], List[0.00029633459887046243`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.250026984402077`], List[0.12593253219800088`], List[3.9117308756750733`], List[0.9780382746375345`], List[-0.05955434317409313`], List[-0.03596835598438442`], List[0.3474041222855544`], List[-0.0003562190343968652`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.25481272414410017`], List[0.12874167848711066`], List[3.9158011505673533`], List[0.997795958382669`], List[-0.05478897220895312`], List[-0.03918457294941431`], List[0.33353439025398124`], List[-0.0006175443171249073`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.03`], List[List[0.2556260567199602`], List[0.12921802693787823`], List[3.916466914262455`], List[1.001150993567102`], List[-0.05399485637428516`], List[-0.039730715969904046`], List[0.33115894204452456`], List[-0.000535648794935506`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.2605332117894807`], List[0.13208523805961517`], List[3.9203277700793877`], List[1.0213755852062756`], List[-0.04930416141287469`], List[-0.04302293764830435`], List[0.3167199550824973`], List[-0.0003300661836245222`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.2655473371966647`], List[0.13500253145861038`], List[3.924003726410335`], List[1.042008740698054`], List[-0.0446951732770685`], List[-0.04638166661627352`], List[0.3017867987504598`], List[0.0002840802802914766`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.27067129718355537`], List[0.13797021556609732`], List[3.9274896327808073`], List[1.0630587135797471`], List[-0.04018537415664832`], List[-0.049808246410182305`], List[0.28635349473297733`], List[0.0013150441341218677`]]], List[List[0.0702466541429653`, 1.1`, -0.03`], List[List[0.2705144871267562`], List[0.13787960238454308`], List[3.927386909071358`], List[1.0624150554557745`], List[-0.04032031199626778`], List[-0.04970346974684955`], List[0.28682826178856585`], List[-0.002601753652094363`]]], List[List[0.0702466541429653`, 1.1`, -0.010000000000000002`], List[List[0.275747776284327`], List[0.14089642109410738`], List[3.9306836045813904`], List[1.0838772632405813`], List[-0.035924416302171365`], List[-0.05319715441530105`], List[0.27090446907916305`], List[-0.0011585548951502656`]]], List[List[0.0702466541429653`, 1.1`, 0.009999999999999995`], List[List[0.28109680828852507`], List[0.1439641601913258`], List[3.933780120504177`], List[1.1057730363825737`], List[-0.03166534943133275`], List[-0.05676141619568622`], List[0.25446946044714475`], List[0.0007182092189796929`]]], List[List[0.0702466541429653`, 1.1`, 0.029999999999999992`], List[List[0.28656472359981866`], List[0.14708304603639588`], List[3.9366713366239`], List[1.1281111334829566`], List[-0.02756393569820392`], List[-0.06039768084024136`], List[0.23751801509018908`], List[0.0030372972914998186`]]], List[List[0.12176086718113986`, 0.9`, -0.03`], List[List[0.2724321657690557`], List[0.13898682376819635`], List[3.222872810415281`], List[0.8780142197396383`], List[-0.038683671551547456`], List[-2.734220302693235`*^-6], List[0.10873735686485923`], List[0.0029879108692634215`]]], List[List[0.12176086718113986`, 0.9`, -0.010000000000000002`], List[List[0.2777078017899118`], List[0.14202240264844665`], List[3.225517172249157`], List[0.8957512835409256`], List[-0.03433591314416097`], List[-0.0013969699215448934`], List[0.10282348246697345`], List[0.0007059656426881`]]], List[List[0.12176086718113986`, 0.9`, 0.009999999999999995`], List[List[0.28310032810123703`], List[0.14510898891648039`], List[3.227995763651485`], List[0.9138466597991386`], List[-0.030132528630258566`], List[-0.0028193710522652115`], List[0.0966504431693155`], List[-0.0012176671269613637`]]], List[List[0.12176086718113986`, 0.9`, 0.029999999999999992`], List[List[0.28861292126074317`], List[0.14824679777267405`], List[3.230304391201447`], List[0.9323075869060562`], List[-0.026094785520898556`], List[-0.004270506591881753`], List[0.09021844116683635`], List[-0.0027757490479063396`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.03`], List[List[0.2908202613239217`], List[0.14949816011515746`], List[3.2311670482678565`], List[0.9396888453585026`], List[-0.02455312721170951`], List[-0.004850716155865385`], List[0.08761122822403458`], List[0.0013323697422963354`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.29650575521715067`], List[0.1527076883734637`], List[3.233231741288937`], List[0.9586718192429393`], List[-0.020784175140633878`], List[-0.006342887588631344`], List[0.0808192276070532`], List[0.00029633459887046243`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.30231933309416675`], List[0.15596882401501144`], List[3.235116539281641`], List[0.9780382746375345`], List[-0.01723688562728689`], List[-0.007865202883888889`], List[0.07377036453119186`], List[-0.0003562190343968652`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3082645228322098`], List[0.15928166916896622`], List[3.2368173580771575`], List[0.997795958382669`], List[-0.01393690565285898`], List[-0.00941827098805395`], List[0.0664662470582266`], List[-0.0006175443171249073`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.03`], List[List[0.3092755198587772`], List[0.15984277103830352`], List[3.237084506475818`], List[1.001150993567102`], List[-0.013409167917149236`], List[-0.009681996139266555`], List[0.06521544530504671`], List[-0.000535648794935506`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.31537902460142087`], List[0.16321608440284244`], List[3.2385653627317166`], List[1.0213755852062756`], List[-0.010432341096387094`], List[-0.011271765901741691`], List[0.05761588945565037`], List[-0.0003300661836245222`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3216221720995259`], List[0.16664119943687472`], List[3.239853564497427`], List[1.042008740698054`], List[-0.00776328542302653`], List[-0.012893651143752786`], List[0.049766192717751664`], List[0.0002840802802914766`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.32800885065453217`], List[0.17011809527288554`], List[3.240945210650396`], List[1.0630587135797471`], List[-0.005432244456904117`], List[-0.014548300641022123`], List[0.041669517837799146`], List[0.0013150441341218677`]]], List[List[0.12176086718113986`, 1.1`, -0.03`], List[List[0.3278132967828498`], List[0.17001204449054444`], List[3.2409150753867677`], List[1.0624150554557745`], List[-0.005497569781781161`], List[-0.014497705393359359`], List[0.04191830184011228`], List[-0.002601753652094363`]]], List[List[0.12176086718113986`, 1.1`, -0.010000000000000002`], List[List[0.3343429872230241`], List[0.17353909304336979`], List[3.241812464029876`], List[1.0838772632405813`], List[-0.003524661701068787`], List[-0.016184758935946335`], List[0.03358566075491428`], List[-0.0011585548951502656`]]], List[List[0.12176086718113986`, 1.1`, 0.009999999999999995`], List[List[0.34102422321725834`], List[0.17711775564609308`], List[3.242505842988498`], List[1.1057730363825737`], List[-0.0019539386428121456`], List[-0.017905893220790566`], List[0.02501388008969149`], List[0.0007182092189796929`]]], List[List[0.12176086718113986`, 1.1`, 0.029999999999999992`], List[List[0.3478612606913828`], List[0.18074788046912327`], List[3.242991562903004`], List[1.1281111334829566`], List[-0.0008204141596984285`], List[-0.01966179672455473`], List[0.016207806010136966`], List[0.0030372972914998186`]]], List[List[0.17327508021931443`, 0.9`, -0.03`], List[List[0.30800302370050003`], List[0.15913643009130843`], List[2.850667533035043`], List[0.8780142197396383`], List[-0.014074998927794912`], List[0.0014922426256489135`], List[0.010651817274672917`], List[0.0029879108692634215`]]], List[List[0.17327508021931443`, 0.9`, -0.010000000000000002`], List[List[0.3140775006935091`], List[0.16249879604426073`], List[2.8520071688135333`], List[0.8957512835409256`], List[-0.011036851339065446`], List[0.0012236349692617812`], List[0.009589325798153754`], List[0.0007059656426881`]]], List[List[0.17327508021931443`, 0.9`, 0.009999999999999995`], List[List[0.32029081374532825`], List[0.16591296281153323`], List[2.8531778639326264`], List[0.9138466597991386`], List[-0.008300277130833226`], List[0.0009496010782741228`], List[0.008433619890365127`], List[-0.0012176671269613637`]]], List[List[0.17327508021931443`, 0.9`, 0.029999999999999992`], List[List[0.3266468261021074`], List[0.16937891826727222`], List[2.854176169507993`], List[0.9323075869060562`], List[-0.0058951974914976755`], List[0.0006700313354757886`], List[0.0071909381105389565`], List[-0.0027757490479063396`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.03`], List[List[0.32919310274992336`], List[0.1707597728255937`], List[2.854521669830828`], List[0.9396888453585026`], List[-0.0050448470825589726`], List[0.0005582505719677223`], List[0.006678515762833218`], List[0.0013323697422963354`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.3357547562774141`], List[0.1742978373349583`], List[2.855273979948764`], List[0.9586718192429393`], List[-0.003154842473620824`], List[0.00027077502452192`], List[0.005326082102026615`], List[0.00029633459887046243`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.34246885206817046`], List[0.1778874874192942`], List[2.855845922136154`], List[0.9780382746375345`], List[-0.001674348059758501`], List[-0.000022507914207260197`], List[0.0039040253134968957`], List[-0.0003562190343968652`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.34933967357329304`], List[0.1815285612632359`], List[2.8562343010643683`], List[0.997795958382669`], List[-0.0006387372081947435`], List[-0.0003217155613057824`], List[0.0024206649787951494`], List[-0.0006175443171249073`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.03`], List[List[0.35050854486973554`], List[0.18214470582220071`], List[2.8562812753656956`], List[1.001150993567102`], List[-0.0005111219878669821`], List[-0.00037252375301584985`], List[0.0021663157709487417`], List[-0.000535648794935506`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.35756799462601996`], List[0.1858455654995009`], List[2.856451361857851`], List[1.0213755852062756`], List[-0.00004214112506903115`], List[-0.0006788021890888618`], List[0.000622790165444841`], List[-0.0003300661836245222`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3647939106798532`], List[0.1895973315489132`], List[2.856431289535782`], List[1.042008740698054`], List[-0.00010069616805660013`], List[-0.0009912678599918183`], List[-0.0009616703635820791`], List[0.0002840802802914766`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.37219100343787964`], List[0.1933996847830057`], List[2.8562181884043754`], List[1.0630587135797471`], List[-0.0007277784263897378`], List[-0.0013100457561593052`], List[-0.002576536552087654`], List[0.0013150441341218677`]]], List[List[0.17327508021931443`, 1.1`, -0.03`], List[List[0.37196443715065397`], List[0.19328379863870873`], List[2.8562275028068673`], List[1.0624150554557745`], List[-0.0007000322431513288`], List[-0.0013002982859957048`], List[-0.002527293892343171`], List[-0.002601753652094363`]]], List[List[0.17327508021931443`, 1.1`, -0.010000000000000002`], List[List[0.37953215549838193`], List[0.19713485210168563`], List[2.8558245922991423`], List[1.0838772632405813`], List[-0.0019193483525262135`], List[-0.0016253190108774622`], List[-0.004160878633891936`], List[-0.0011585548951502656`]]], List[List[0.17327508021931443`, 1.1`, 0.009999999999999995`], List[List[0.38728074664641826`], List[0.20103570725638997`], List[2.8552233643365925`], List[1.1057730363825737`], List[-0.0037934726902144294`], List[-0.0019569055899385807`], List[-0.0058019061389247666`], List[0.0007182092189796929`]]], List[List[0.17327508021931443`, 1.1`, 0.029999999999999992`], List[List[0.395215351946731`], List[0.2049858826847031`], List[2.8544213374459417`], List[1.1281111334829566`], List[-0.006369117189338692`], List[-0.0022951906622314766`], List[-0.00743753899506953`], List[0.0030372972914998186`]]], List[List[0.22478929325748898`, 0.9`, -0.03`], List[List[0.3376912746989543`], List[0.17533637651673578`], List[2.600050062064447`], List[0.8780142197396383`], List[-0.002680557446864954`], List[-0.006845047359074245`], List[-0.011179055553529103`], List[0.0029879108692634215`]]], List[List[0.22478929325748898`, 0.9`, -0.010000000000000002`], List[List[0.3444504980915849`], List[0.17894099914944112`], List[2.600522538082546`], List[0.8957512835409256`], List[-0.0013257100818150017`], List[-0.006186651936086815`], List[-0.007831844931255424`], List[0.0007059656426881`]]], List[List[0.22478929325748898`, 0.9`, 0.009999999999999995`], List[List[0.3513677172649139`], List[0.1825969895789909`], List[2.6008270392983865`], List[0.9138466597991386`], List[-0.000426352926017783`], List[-0.005514956043287408`], List[-0.004429232299302864`], List[-0.0012176671269613637`]]], List[List[0.22478929325748898`, 0.9`, 0.029999999999999992`], List[List[0.35844738555781247`], List[0.1863041238913331`], List[2.600960767101726`], List[0.9323075869060562`], List[-0.000020087045435514545`], List[-0.004829690993362961`], List[-0.0009597813922287523`], List[-0.0027757490479063396`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.03`], List[List[0.36128456164650435`], List[0.1877798502610973`], List[2.6009659562423617`], List[0.9396888453585026`], List[-4.020633663046833`*^-6], List[-0.004555700504552423`], List[0.0004292437278786783`], List[0.0013323697422963354`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.368598422813777`], List[0.19155782597536086`], List[2.600857084316062`], List[0.9586718192429393`], List[-0.0003514142477962192`], List[-0.003851057207317391`], List[0.00401236650404229`], List[0.00029633459887046243`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.37608595260162575`], List[0.1953862030374136`], List[2.600571140378474`], List[0.9780382746375345`], List[-0.0012892719429250454`], List[-0.0031321791712373382`], List[0.007692738770153542`], List[-0.0003562190343968652`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3837520778939764`], List[0.19926458107695028`], List[2.6001056824462108`], List[0.997795958382669`], List[-0.002861454074807128`], List[-0.0023987788355127764`], List[0.011484391940027906`], List[-0.0006175443171249073`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.03`], List[List[0.3850566230165765`], List[0.19992039807801382`], List[2.6000098004391496`], List[1.001150993567102`], List[-0.003190711996972518`], List[-0.0022742407589665535`], List[0.012132729765002442`], List[-0.000535648794935506`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.3929377525565082`], List[0.2038565882490527`], List[2.59933177344519`], List[1.0213755852062756`], List[-0.005561816646175926`], List[-0.0015235089176536575`], List[0.016073202405824896`], List[-0.0003300661836245222`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.4010086671710042`], List[0.20784171903921334`], List[2.5984693748619274`], List[1.042008740698054`], List[-0.008669095686873506`], List[-0.000757611287145462`], List[0.0201582288625123`], List[0.0002840802802914766`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.4092747705108399`], List[0.2118752093766319`], List[2.597420584349436`], List[1.0630587135797471`], List[-0.01256275644905966`], List[0.000023758501822347686`], List[0.02440453040222883`], List[0.0013150441341218677`]]], List[List[0.22478929325748898`, 1.1`, -0.03`], List[List[0.4090215285756092`], List[0.21175235897975267`], List[2.5974551001155506`], List[1.0624150554557745`], List[-0.012432799137518193`], List[-1.3392860129091142`*^-7], List[0.02427340385289263`], List[-0.002601753652094363`]]], List[List[0.22478929325748898`, 1.1`, -0.010000000000000002`], List[List[0.41748221912695405`], List[0.2158321328106449`], List[2.5962237757267936`], List[1.0838772632405813`], List[-0.017138961157553968`], List[0.000796537918049142`], List[0.02869291780954301`], List[-0.0011585548951502656`]]], List[List[0.22478929325748898`, 1.1`, 0.009999999999999995`], List[List[0.4261492052699692`], List[0.21995894523494555`], List[2.5948025309165064`], List[1.1057730363825737`], List[-0.022736578071418368`], List[0.0016093036035632275`], List[0.033309301718314664`], List[0.0007182092189796929`]]], List[List[0.22478929325748898`, 1.1`, 0.029999999999999992`], List[List[0.4350283672061279`], List[0.22413203374119503`], List[2.5931898205351462`], List[1.1281111334829566`], List[-0.0292822134510275`], List[0.002438488245052656`], List[0.0381420231119891`], List[0.0030372972914998186`]]]]	
	,
	TestID->"9483f64f-20d1-4988-a219-0a2e07eb887a"
]

EndTestSection[]

BeginTestSection["makeGenericInterpFuncs(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["doGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["nestGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 16 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[reapRes, Reap[AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]]], If[SameQ[Length[Kernels[]], 0], LaunchKernels[]], Apply[DistributeDefinitions, Flatten[Part[reapRes, 2]]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], CompoundExpression[ParallelEvaluate[Get["tests/pathSetup.mth"]], ParallelNeeds["AMASeriesRepresentation`"]], AMASeriesRepresentation`parallelSmolyakGenInterpData[Part[reapRes, 1], sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"46013437-5253-458f-a3e6-9f64763df53a"
]

EndTestSection[]

EndTestSection[]

EndTestSection[]

BeginTestSection["parallelNestGenericIterREInterp"]

BeginTestSection["sgSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 17 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"9ee9a65c-5874-429e-9cc5-0fa368115750"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 18 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"714a3c37-4f30-467e-89cc-e75ece08527f"
]

VerificationTest[(* 19 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"88cc0963-98cc-4ff0-bc2c-331f1889f475"
]

VerificationTest[(* 20 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"9e597b0f-cc35-4316-a226-de97c1f30200"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 21 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"286510e8-09d4-4603-9172-82d8b6f529e2"
]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 22 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`parallelSmolyakGenInterpData[frFunc, sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"82874e4c-635b-4e34-85c5-20812bfc4b01"
]

EndTestSection[]

BeginTestSection["parallelMakeGenericInterpFuncs"]

VerificationTest[(* 23 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[interpFuncs, AMASeriesRepresentation`parallelMakeGenericInterpFuncs[frFunc, List[], sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]], Through[Function[Apply[interpFuncs, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"8ed9d165-5b41-4d7d-a3c5-85abb91584d5"
]

EndTestSection[]

BeginTestSection["parallelDoGenericIterREInterp"]

VerificationTest[(* 24 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[List[drFunc, drCEFunc], Set[thePair, AMASeriesRepresentation`parallelDoGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]]], Through[Function[Apply[thePair, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"387155df-bfc6-4d36-8950-e317fe9b7d0f"
]

EndTestSection[]

BeginTestSection["parallelNestGenericIterREInterp"]

VerificationTest[(* 25 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[theRes, AMASeriesRepresentation`parallelNestGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[], 3]], Through[Function[Apply[Part[theRes, -1], Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39192303306251025`], List[0.2036684478387868`], List[2.8228738204606625`], List[1.1049728399309633`], List[-0.00292104910888534`], List[-0.0013228862330748237`], List[-0.00015634063751780204`], List[-0.00008198723260397831`]], List[List[0.38826090300015387`], List[0.2017721099683617`], List[2.8229084268394375`], List[1.0948534136911292`], List[-0.0027175123063728646`], List[-0.001344158573894957`], List[-0.00026549809996145434`], List[-0.00019190895850723568`]]]	
	,
	TestID->"3e3500b9-7e32-4744-ac3e-7e79836be53a"
]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 26 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[reapRes, Reap[AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]]], If[SameQ[Length[Kernels[]], 0], LaunchKernels[]], Apply[DistributeDefinitions, Flatten[Part[reapRes, 2]]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], CompoundExpression[ParallelEvaluate[Get["tests/pathSetup.mth"]], ParallelNeeds["AMASeriesRepresentation`"]], AMASeriesRepresentation`parallelSmolyakGenInterpData[Part[reapRes, 1], sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"66579b12-e8d0-474e-a481-48597e9d4f39"
]

EndTestSection[]

EndTestSection[]

BeginTestSection["gSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 27 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"487a036b-3288-40d5-8648-aa679c2e8843"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 28 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"fa561424-ba2f-47bb-82d3-5d47ac13037d"
]

VerificationTest[(* 29 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"f6d0c89c-3bcf-45cd-a4d6-41d9968acf9d"
]

VerificationTest[(* 30 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"4e681097-2ce2-47e7-a29a-ffc94add72e7"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 31 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"48af10ef-660c-498c-a45e-84a1811fbc65"
]

EndTestSection[]

BeginTestSection["genInterpData"]

VerificationTest[(* 32 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], AMASeriesRepresentation`genInterpData[frFunc, betterRBC`aGSpecBetter]]
	,
	List[List[List[0.018732441104790748`, 0.9`, -0.03`], List[List[0.14601829966624436`], List[0.06369961218211743`], List[6.013042349804957`], List[0.8780142197396383`], List[-0.1806224856554996`], List[-0.09325283709198334`], List[1.9247235944091003`], List[0.0029879108692634215`]]], List[List[0.018732441104790748`, 0.9`, -0.010000000000000002`], List[List[0.14868082054741355`], List[0.06527367414789827`], List[6.024659268377357`], List[0.8957512835409256`], List[-0.1778052795905797`], List[-0.0987217048473819`], List[1.9076448249546005`], List[0.0007059656426881`]]], List[List[0.018732441104790748`, 0.9`, 0.009999999999999995`], List[List[0.15139448397367655`], List[0.06688217821922793`], List[6.036195215395246`], List[0.9138466597991386`], List[-0.17487164561579438`], List[-0.1043010510598685`], List[1.8898850175619066`], List[-0.0012176671269613637`]]], List[List[0.018732441104790748`, 0.9`, 0.029999999999999992`], List[List[0.15416044284326968`], List[0.068525700422499`], List[6.047644711645681`], List[0.9323075869060562`], List[-0.1718219273729577`], List[-0.10999310754232067`], List[1.8714274937048234`], List[-0.0027757490479063396`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.03`], List[List[0.15526569700385207`], List[0.06918349528169122`], List[6.052134267205134`], List[0.9396888453585026`], List[-0.170587628301855`], List[-0.11226897049219164`], List[1.863954173569793`], List[0.0013323697422963354`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.15810655850011907`], List[0.0708768082375152`], List[6.063453839849518`], List[0.9586718192429393`], List[-0.16737705849313692`], List[-0.11812198962440189`], List[1.8444954591113982`], List[0.0002963345988705103`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.1610026123064369`], List[0.07260652528313563`], List[6.074673327511174`], List[0.9780382746375345`], List[-0.16405217752854342`], List[-0.12409324758628501`], List[1.8242979670620965`], List[-0.0003562190343968979`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.16395512820910857`], List[0.0743732270022681`], List[6.085786820343178`], List[0.997795958382669`], List[-0.1606141614214676`], List[-0.13018513296064366`], List[1.8033440782771197`], List[-0.0006175443171249177`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.03`], List[List[0.16445630491004534`], List[0.07467341656310524`], List[6.087641298487849`], List[1.001150993567102`], List[-0.16002613482665012`], List[-0.1312195907459871`], List[1.7997517773884188`], List[-0.0005356487949356213`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.1674764164921173`], List[0.07648404579501585`], List[6.098623356049353`], List[1.0213755852062756`], List[-0.15645785975914062`], List[-0.13745543780166222`], List[1.7778918670702766`], List[-0.0003300661836245693`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.17055587183884124`], List[0.07833291870003874`], List[6.109486172851621`], List[1.042008740698054`], List[-0.15277998615073107`], List[-0.1438172573240638`], List[1.755236421401993`], List[0.0002840802802914056`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.1736960625822383`], List[0.08022061504316563`], List[6.12022343958678`], List[1.0630587135797471`], List[-0.148994640182958`], List[-0.1503075941258264`], List[1.7317669548586747`], List[0.0013150441341220065`]]], List[List[0.018732441104790748`, 1.1`, -0.03`], List[List[0.1736000625633458`], List[0.08016287422885868`], List[6.119900187640223`], List[1.0624150554557745`], List[-0.14911082710246018`], List[-0.15010913505733947`], List[1.7324898141326475`], List[-0.0026017536520944054`]]], List[List[0.018732441104790748`, 1.1`, -0.010000000000000002`], List[List[0.17680051749387976`], List[0.08208877067065219`], List[6.1305095630056705`], List[1.0838772632405813`], List[-0.14522361397834438`], List[-0.1567265762205987`], List[1.708213068856748`], List[-0.0011585548951502`]]], List[List[0.018732441104790748`, 1.1`, 0.009999999999999995`], List[List[0.180064570926996`], List[0.0840546277770324`], List[6.140980597626225`], List[1.1057730363825737`], List[-0.1412341258861669`], List[-0.1634776985629039`], List[1.6830851064903076`], List[0.0007182092189795674`]]], List[List[0.018732441104790748`, 1.1`, 0.029999999999999992`], List[List[0.18339374118481375`], List[0.08606101925982905`], List[6.151306615999018`], List[1.1281111334829566`], List[-0.1371455540026435`], List[-0.17036520262320842`], List[1.6570866502575816`], List[0.0030372972914998815`]]], List[List[0.0702466541429653`, 0.9`, -0.03`], List[List[0.22589022846015555`], List[0.11161987741340525`], List[3.886906599390642`], List[0.8780142197396383`], List[-0.08573309698002846`], List[-0.019686130475389172`], List[0.41410496815214415`], List[0.0029879108692634215`]]], List[List[0.0702466541429653`, 0.9`, -0.010000000000000002`], List[List[0.23016056326758397`], List[0.11416769901719503`], List[3.8918538902754074`], List[0.8957512835409256`], List[-0.08087055158725576`], List[-0.022573424666519484`], List[0.4027468690660975`], List[0.0007059656426881`]]], List[List[0.0702466541429653`, 0.9`, 0.009999999999999995`], List[List[0.23452112202434575`], List[0.11676303256767002`], List[3.896649700082331`], List[0.9138466597991386`], List[-0.0759988608391287`], List[-0.025519046069362002`], List[0.3909383955828171`], List[-0.0012176671269613637`]]], List[List[0.0702466541429653`, 0.9`, 0.029999999999999992`], List[List[0.23897424254132477`], List[0.1194063227036158`], List[3.9012890133748885`], List[0.9323075869060562`], List[-0.07112943664743301`], List[-0.0285241729717536`], List[0.37867246424603646`], List[-0.0027757490479063396`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.03`], List[List[0.24075608196631001`], List[0.12046185113185731`], List[3.903074172348415`], List[0.9396888453585026`], List[-0.06921269670388935`], List[-0.029725717088172357`], List[0.373708717219826`], List[0.0013323697422963354`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.24534230246836264`], List[0.12317271692008278`], List[3.907486844289977`], List[0.9586718192429393`], List[-0.06436703047047657`], List[-0.0328158243821955`], List[0.36079336389760114`], List[0.00029633459887046243`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.250026984402077`], List[0.12593253219800088`], List[3.9117308756750733`], List[0.9780382746375345`], List[-0.05955434317409313`], List[-0.03596835598438442`], List[0.3474041222855544`], List[-0.0003562190343968652`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.25481272414410017`], List[0.12874167848711066`], List[3.9158011505673533`], List[0.997795958382669`], List[-0.05478897220895312`], List[-0.03918457294941431`], List[0.33353439025398124`], List[-0.0006175443171249073`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.03`], List[List[0.2556260567199602`], List[0.12921802693787823`], List[3.916466914262455`], List[1.001150993567102`], List[-0.05399485637428516`], List[-0.039730715969904046`], List[0.33115894204452456`], List[-0.000535648794935506`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.2605332117894807`], List[0.13208523805961517`], List[3.9203277700793877`], List[1.0213755852062756`], List[-0.04930416141287469`], List[-0.04302293764830435`], List[0.3167199550824973`], List[-0.0003300661836245222`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.2655473371966647`], List[0.13500253145861038`], List[3.924003726410335`], List[1.042008740698054`], List[-0.0446951732770685`], List[-0.04638166661627352`], List[0.3017867987504598`], List[0.0002840802802914766`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.27067129718355537`], List[0.13797021556609732`], List[3.9274896327808073`], List[1.0630587135797471`], List[-0.04018537415664832`], List[-0.049808246410182305`], List[0.28635349473297733`], List[0.0013150441341218677`]]], List[List[0.0702466541429653`, 1.1`, -0.03`], List[List[0.2705144871267562`], List[0.13787960238454308`], List[3.927386909071358`], List[1.0624150554557745`], List[-0.04032031199626778`], List[-0.04970346974684955`], List[0.28682826178856585`], List[-0.002601753652094363`]]], List[List[0.0702466541429653`, 1.1`, -0.010000000000000002`], List[List[0.275747776284327`], List[0.14089642109410738`], List[3.9306836045813904`], List[1.0838772632405813`], List[-0.035924416302171365`], List[-0.05319715441530105`], List[0.27090446907916305`], List[-0.0011585548951502656`]]], List[List[0.0702466541429653`, 1.1`, 0.009999999999999995`], List[List[0.28109680828852507`], List[0.1439641601913258`], List[3.933780120504177`], List[1.1057730363825737`], List[-0.03166534943133275`], List[-0.05676141619568622`], List[0.25446946044714475`], List[0.0007182092189796929`]]], List[List[0.0702466541429653`, 1.1`, 0.029999999999999992`], List[List[0.28656472359981866`], List[0.14708304603639588`], List[3.9366713366239`], List[1.1281111334829566`], List[-0.02756393569820392`], List[-0.06039768084024136`], List[0.23751801509018908`], List[0.0030372972914998186`]]], List[List[0.12176086718113986`, 0.9`, -0.03`], List[List[0.2724321657690557`], List[0.13898682376819635`], List[3.222872810415281`], List[0.8780142197396383`], List[-0.038683671551547456`], List[-2.734220302693235`*^-6], List[0.10873735686485923`], List[0.0029879108692634215`]]], List[List[0.12176086718113986`, 0.9`, -0.010000000000000002`], List[List[0.2777078017899118`], List[0.14202240264844665`], List[3.225517172249157`], List[0.8957512835409256`], List[-0.03433591314416097`], List[-0.0013969699215448934`], List[0.10282348246697345`], List[0.0007059656426881`]]], List[List[0.12176086718113986`, 0.9`, 0.009999999999999995`], List[List[0.28310032810123703`], List[0.14510898891648039`], List[3.227995763651485`], List[0.9138466597991386`], List[-0.030132528630258566`], List[-0.0028193710522652115`], List[0.0966504431693155`], List[-0.0012176671269613637`]]], List[List[0.12176086718113986`, 0.9`, 0.029999999999999992`], List[List[0.28861292126074317`], List[0.14824679777267405`], List[3.230304391201447`], List[0.9323075869060562`], List[-0.026094785520898556`], List[-0.004270506591881753`], List[0.09021844116683635`], List[-0.0027757490479063396`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.03`], List[List[0.2908202613239217`], List[0.14949816011515746`], List[3.2311670482678565`], List[0.9396888453585026`], List[-0.02455312721170951`], List[-0.004850716155865385`], List[0.08761122822403458`], List[0.0013323697422963354`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.29650575521715067`], List[0.1527076883734637`], List[3.233231741288937`], List[0.9586718192429393`], List[-0.020784175140633878`], List[-0.006342887588631344`], List[0.0808192276070532`], List[0.00029633459887046243`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.30231933309416675`], List[0.15596882401501144`], List[3.235116539281641`], List[0.9780382746375345`], List[-0.01723688562728689`], List[-0.007865202883888889`], List[0.07377036453119186`], List[-0.0003562190343968652`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3082645228322098`], List[0.15928166916896622`], List[3.2368173580771575`], List[0.997795958382669`], List[-0.01393690565285898`], List[-0.00941827098805395`], List[0.0664662470582266`], List[-0.0006175443171249073`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.03`], List[List[0.3092755198587772`], List[0.15984277103830352`], List[3.237084506475818`], List[1.001150993567102`], List[-0.013409167917149236`], List[-0.009681996139266555`], List[0.06521544530504671`], List[-0.000535648794935506`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.31537902460142087`], List[0.16321608440284244`], List[3.2385653627317166`], List[1.0213755852062756`], List[-0.010432341096387094`], List[-0.011271765901741691`], List[0.05761588945565037`], List[-0.0003300661836245222`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3216221720995259`], List[0.16664119943687472`], List[3.239853564497427`], List[1.042008740698054`], List[-0.00776328542302653`], List[-0.012893651143752786`], List[0.049766192717751664`], List[0.0002840802802914766`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.32800885065453217`], List[0.17011809527288554`], List[3.240945210650396`], List[1.0630587135797471`], List[-0.005432244456904117`], List[-0.014548300641022123`], List[0.041669517837799146`], List[0.0013150441341218677`]]], List[List[0.12176086718113986`, 1.1`, -0.03`], List[List[0.3278132967828498`], List[0.17001204449054444`], List[3.2409150753867677`], List[1.0624150554557745`], List[-0.005497569781781161`], List[-0.014497705393359359`], List[0.04191830184011228`], List[-0.002601753652094363`]]], List[List[0.12176086718113986`, 1.1`, -0.010000000000000002`], List[List[0.3343429872230241`], List[0.17353909304336979`], List[3.241812464029876`], List[1.0838772632405813`], List[-0.003524661701068787`], List[-0.016184758935946335`], List[0.03358566075491428`], List[-0.0011585548951502656`]]], List[List[0.12176086718113986`, 1.1`, 0.009999999999999995`], List[List[0.34102422321725834`], List[0.17711775564609308`], List[3.242505842988498`], List[1.1057730363825737`], List[-0.0019539386428121456`], List[-0.017905893220790566`], List[0.02501388008969149`], List[0.0007182092189796929`]]], List[List[0.12176086718113986`, 1.1`, 0.029999999999999992`], List[List[0.3478612606913828`], List[0.18074788046912327`], List[3.242991562903004`], List[1.1281111334829566`], List[-0.0008204141596984285`], List[-0.01966179672455473`], List[0.016207806010136966`], List[0.0030372972914998186`]]], List[List[0.17327508021931443`, 0.9`, -0.03`], List[List[0.30800302370050003`], List[0.15913643009130843`], List[2.850667533035043`], List[0.8780142197396383`], List[-0.014074998927794912`], List[0.0014922426256489135`], List[0.010651817274672917`], List[0.0029879108692634215`]]], List[List[0.17327508021931443`, 0.9`, -0.010000000000000002`], List[List[0.3140775006935091`], List[0.16249879604426073`], List[2.8520071688135333`], List[0.8957512835409256`], List[-0.011036851339065446`], List[0.0012236349692617812`], List[0.009589325798153754`], List[0.0007059656426881`]]], List[List[0.17327508021931443`, 0.9`, 0.009999999999999995`], List[List[0.32029081374532825`], List[0.16591296281153323`], List[2.8531778639326264`], List[0.9138466597991386`], List[-0.008300277130833226`], List[0.0009496010782741228`], List[0.008433619890365127`], List[-0.0012176671269613637`]]], List[List[0.17327508021931443`, 0.9`, 0.029999999999999992`], List[List[0.3266468261021074`], List[0.16937891826727222`], List[2.854176169507993`], List[0.9323075869060562`], List[-0.0058951974914976755`], List[0.0006700313354757886`], List[0.0071909381105389565`], List[-0.0027757490479063396`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.03`], List[List[0.32919310274992336`], List[0.1707597728255937`], List[2.854521669830828`], List[0.9396888453585026`], List[-0.0050448470825589726`], List[0.0005582505719677223`], List[0.006678515762833218`], List[0.0013323697422963354`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.3357547562774141`], List[0.1742978373349583`], List[2.855273979948764`], List[0.9586718192429393`], List[-0.003154842473620824`], List[0.00027077502452192`], List[0.005326082102026615`], List[0.00029633459887046243`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.34246885206817046`], List[0.1778874874192942`], List[2.855845922136154`], List[0.9780382746375345`], List[-0.001674348059758501`], List[-0.000022507914207260197`], List[0.0039040253134968957`], List[-0.0003562190343968652`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.34933967357329304`], List[0.1815285612632359`], List[2.8562343010643683`], List[0.997795958382669`], List[-0.0006387372081947435`], List[-0.0003217155613057824`], List[0.0024206649787951494`], List[-0.0006175443171249073`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.03`], List[List[0.35050854486973554`], List[0.18214470582220071`], List[2.8562812753656956`], List[1.001150993567102`], List[-0.0005111219878669821`], List[-0.00037252375301584985`], List[0.0021663157709487417`], List[-0.000535648794935506`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.35756799462601996`], List[0.1858455654995009`], List[2.856451361857851`], List[1.0213755852062756`], List[-0.00004214112506903115`], List[-0.0006788021890888618`], List[0.000622790165444841`], List[-0.0003300661836245222`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3647939106798532`], List[0.1895973315489132`], List[2.856431289535782`], List[1.042008740698054`], List[-0.00010069616805660013`], List[-0.0009912678599918183`], List[-0.0009616703635820791`], List[0.0002840802802914766`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.37219100343787964`], List[0.1933996847830057`], List[2.8562181884043754`], List[1.0630587135797471`], List[-0.0007277784263897378`], List[-0.0013100457561593052`], List[-0.002576536552087654`], List[0.0013150441341218677`]]], List[List[0.17327508021931443`, 1.1`, -0.03`], List[List[0.37196443715065397`], List[0.19328379863870873`], List[2.8562275028068673`], List[1.0624150554557745`], List[-0.0007000322431513288`], List[-0.0013002982859957048`], List[-0.002527293892343171`], List[-0.002601753652094363`]]], List[List[0.17327508021931443`, 1.1`, -0.010000000000000002`], List[List[0.37953215549838193`], List[0.19713485210168563`], List[2.8558245922991423`], List[1.0838772632405813`], List[-0.0019193483525262135`], List[-0.0016253190108774622`], List[-0.004160878633891936`], List[-0.0011585548951502656`]]], List[List[0.17327508021931443`, 1.1`, 0.009999999999999995`], List[List[0.38728074664641826`], List[0.20103570725638997`], List[2.8552233643365925`], List[1.1057730363825737`], List[-0.0037934726902144294`], List[-0.0019569055899385807`], List[-0.0058019061389247666`], List[0.0007182092189796929`]]], List[List[0.17327508021931443`, 1.1`, 0.029999999999999992`], List[List[0.395215351946731`], List[0.2049858826847031`], List[2.8544213374459417`], List[1.1281111334829566`], List[-0.006369117189338692`], List[-0.0022951906622314766`], List[-0.00743753899506953`], List[0.0030372972914998186`]]], List[List[0.22478929325748898`, 0.9`, -0.03`], List[List[0.3376912746989543`], List[0.17533637651673578`], List[2.600050062064447`], List[0.8780142197396383`], List[-0.002680557446864954`], List[-0.006845047359074245`], List[-0.011179055553529103`], List[0.0029879108692634215`]]], List[List[0.22478929325748898`, 0.9`, -0.010000000000000002`], List[List[0.3444504980915849`], List[0.17894099914944112`], List[2.600522538082546`], List[0.8957512835409256`], List[-0.0013257100818150017`], List[-0.006186651936086815`], List[-0.007831844931255424`], List[0.0007059656426881`]]], List[List[0.22478929325748898`, 0.9`, 0.009999999999999995`], List[List[0.3513677172649139`], List[0.1825969895789909`], List[2.6008270392983865`], List[0.9138466597991386`], List[-0.000426352926017783`], List[-0.005514956043287408`], List[-0.004429232299302864`], List[-0.0012176671269613637`]]], List[List[0.22478929325748898`, 0.9`, 0.029999999999999992`], List[List[0.35844738555781247`], List[0.1863041238913331`], List[2.600960767101726`], List[0.9323075869060562`], List[-0.000020087045435514545`], List[-0.004829690993362961`], List[-0.0009597813922287523`], List[-0.0027757490479063396`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.03`], List[List[0.36128456164650435`], List[0.1877798502610973`], List[2.6009659562423617`], List[0.9396888453585026`], List[-4.020633663046833`*^-6], List[-0.004555700504552423`], List[0.0004292437278786783`], List[0.0013323697422963354`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.368598422813777`], List[0.19155782597536086`], List[2.600857084316062`], List[0.9586718192429393`], List[-0.0003514142477962192`], List[-0.003851057207317391`], List[0.00401236650404229`], List[0.00029633459887046243`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.37608595260162575`], List[0.1953862030374136`], List[2.600571140378474`], List[0.9780382746375345`], List[-0.0012892719429250454`], List[-0.0031321791712373382`], List[0.007692738770153542`], List[-0.0003562190343968652`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3837520778939764`], List[0.19926458107695028`], List[2.6001056824462108`], List[0.997795958382669`], List[-0.002861454074807128`], List[-0.0023987788355127764`], List[0.011484391940027906`], List[-0.0006175443171249073`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.03`], List[List[0.3850566230165765`], List[0.19992039807801382`], List[2.6000098004391496`], List[1.001150993567102`], List[-0.003190711996972518`], List[-0.0022742407589665535`], List[0.012132729765002442`], List[-0.000535648794935506`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.3929377525565082`], List[0.2038565882490527`], List[2.59933177344519`], List[1.0213755852062756`], List[-0.005561816646175926`], List[-0.0015235089176536575`], List[0.016073202405824896`], List[-0.0003300661836245222`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.4010086671710042`], List[0.20784171903921334`], List[2.5984693748619274`], List[1.042008740698054`], List[-0.008669095686873506`], List[-0.000757611287145462`], List[0.0201582288625123`], List[0.0002840802802914766`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.4092747705108399`], List[0.2118752093766319`], List[2.597420584349436`], List[1.0630587135797471`], List[-0.01256275644905966`], List[0.000023758501822347686`], List[0.02440453040222883`], List[0.0013150441341218677`]]], List[List[0.22478929325748898`, 1.1`, -0.03`], List[List[0.4090215285756092`], List[0.21175235897975267`], List[2.5974551001155506`], List[1.0624150554557745`], List[-0.012432799137518193`], List[-1.3392860129091142`*^-7], List[0.02427340385289263`], List[-0.002601753652094363`]]], List[List[0.22478929325748898`, 1.1`, -0.010000000000000002`], List[List[0.41748221912695405`], List[0.2158321328106449`], List[2.5962237757267936`], List[1.0838772632405813`], List[-0.017138961157553968`], List[0.000796537918049142`], List[0.02869291780954301`], List[-0.0011585548951502656`]]], List[List[0.22478929325748898`, 1.1`, 0.009999999999999995`], List[List[0.4261492052699692`], List[0.21995894523494555`], List[2.5948025309165064`], List[1.1057730363825737`], List[-0.022736578071418368`], List[0.0016093036035632275`], List[0.033309301718314664`], List[0.0007182092189796929`]]], List[List[0.22478929325748898`, 1.1`, 0.029999999999999992`], List[List[0.4350283672061279`], List[0.22413203374119503`], List[2.5931898205351462`], List[1.1281111334829566`], List[-0.0292822134510275`], List[0.002438488245052656`], List[0.0381420231119891`], List[0.0030372972914998186`]]]]	
	,
	TestID->"a0a59051-d368-449d-abd4-83ad8c39a1df"
]

EndTestSection[]

BeginTestSection["parallelMakeGenericInterpFuncs(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelDoGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelPestGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 33 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[reapRes, Reap[AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]]], If[SameQ[Length[Kernels[]], 0], LaunchKernels[]], Apply[DistributeDefinitions, Flatten[Part[reapRes, 2]]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], CompoundExpression[ParallelEvaluate[Get["tests/pathSetup.mth"]], ParallelNeeds["AMASeriesRepresentation`"]], AMASeriesRepresentation`parallelSmolyakGenInterpData[Part[reapRes, 1], sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"357e8afa-2892-46ff-a10c-34e8e3823773"
]

EndTestSection[]

EndTestSection[]

EndTestSection[]

BeginTestSection["nestIterREInterp (not implemented)"]

EndTestSection[]

BeginTestSection["parallelNestIterREInterp"]

BeginTestSection["sgSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 34 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"9b06b944-04bb-4b45-8909-07dca5f66708"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 35 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"5db732f9-694b-4f0c-a1cb-c676e2d5ba56"
]

VerificationTest[(* 36 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"e9573877-4f42-48c6-b45b-f08c8ca4f7a4"
]

VerificationTest[(* 37 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"5a8dd350-ebe9-424f-8aaa-87866a45f49a"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 38 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"96d4245f-90b1-4ae6-83bd-f74f52599502"
]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 39 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], AMASeriesRepresentation`parallelSmolyakGenInterpData[frFunc, sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"03f63a6f-538c-48f4-ae69-faa31e6f2bbc"
]

EndTestSection[]

BeginTestSection["parallelMakeInterpFuncs"]

VerificationTest[(* 40 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[interpFuncs, AMASeriesRepresentation`parallelMakeInterpFunc[frFunc, List[], sgSpecErg]], Through[Function[Apply[interpFuncs, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"35c7a4f9-94e0-4ee2-ba8d-ed232168d8db"
]

EndTestSection[]

BeginTestSection["parallelDoIterREInterp"]

VerificationTest[(* 41 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[List[drFunc, drCEFunc], Set[thePair, AMASeriesRepresentation`parallelDoIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg]]], Through[Function[Apply[thePair, Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39203449799464773`], List[0.20355698290665122`], List[2.822071769971915`], List[1.1049728399309633`], List[-0.00304575380762613`], List[-0.0013228862330748653`], List[-0.00009940880907688627`], List[-0.00008198723260397831`]], List[List[0.38836767077248147`], List[0.2016653421960361`], List[2.8221401000019046`], List[1.0948534136911292`], List[-0.002835160616475438`], List[-0.0013441585738950051`], List[-0.00021104034761239027`], List[-0.00019190895850723568`]]]	
	,
	TestID->"bb5ff27d-d74e-48a6-8d67-b87ff9560272"
]

EndTestSection[]

BeginTestSection["parallelNestIterREInterp"]

VerificationTest[(* 42 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], Set[theRes, AMASeriesRepresentation`parallelNestIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter, sgSpecErg, 3]], Through[Function[Apply[Part[theRes, -1], Slot[1]]][betterRBC`anXEpsFlatBetter]]]
	,
	List[List[List[0.39192303306251025`], List[0.2036684478387868`], List[2.8228738204606625`], List[1.1049728399309633`], List[-0.00292104910888534`], List[-0.0013228862330748237`], List[-0.00015634063751780204`], List[-0.00008198723260397831`]], List[List[0.38826090300015387`], List[0.2017721099683617`], List[2.8229084268394375`], List[1.0948534136911292`], List[-0.0027175123063728646`], List[-0.001344158573894957`], List[-0.00026549809996145434`], List[-0.00019190895850723568`]]]	
	,
	TestID->"c5744b53-c101-49fa-ade7-3384132256f7"
]

EndTestSection[]

EndTestSection[]

BeginTestSection["gSpec"]

BeginTestSection["genX0Z0Funcs"]

VerificationTest[(* 43 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Apply[X0Z0, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.38919527522665437`], List[0.2022869059688689`], List[2.8165058486067807`], List[1.0950453226496628`], List[0], List[0], List[0], List[0]]	
	,
	TestID->"a5e41f90-b7f6-4c8d-b884-bd9ec9f18df4"
]

EndTestSection[]

BeginTestSection["genLilXkZkFunc"]

VerificationTest[(* 44 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6639758288353257`], List[0.35185729551148515`], List[2.1365908550666157`], List[1.5050548271635942`], List[0.6467691890512866`], List[0.33616270920294816`], List[1.8991956349925319`], List[1.4798281688317774`], List[0.01`]]	
	,
	TestID->"049aef11-c221-4192-81dc-e1666b42a3c3"
]

VerificationTest[(* 45 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Table[List[1], 4], Table[List[0.1`], 4]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.8350985285729863`], List[0.18073459577382447`], List[0.8178678241962556`], List[1.5050548271635942`], List[1.5184144744997052`], List[0.831573003761124`], List[-1.043330444884046`], List[2.4798281688317774`], List[0.01`]]	
	,
	TestID->"c87b10bd-3842-45dd-8a8d-a7f8c5b8896c"
]

VerificationTest[(* 46 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[xkzkFunc, AMASeriesRepresentation`genLilXkZkFunc[betterRBC`linModBetter, List[Transpose[List[List[0.3`, 0.4`, 1.3`, 0.1`]]]]]], Apply[xkzkFunc, Flatten[betterRBC`anXEpsZsBetter]]]
	,
	List[List[0.2`], List[0.18`], List[1.`], List[1.1`], List[0.6917393114105082`], List[0.3240938129363026`], List[1.922637101735295`], List[1.5050548271635942`], List[0.9134169790592694`], List[0.49500867445729163`], List[1.4217909910094988`], List[1.5798281688317775`], List[0.01`]]	
	,
	TestID->"17be1302-b12c-46a7-8ead-07054a144017"
]

EndTestSection[]

BeginTestSection["genFRExtFuncs"]

VerificationTest[(* 47 *)
	CompoundExpression[Get["tests/pathSetup.mth"], Get["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], Apply[frFunc, Flatten[betterRBC`anXEpsBetter]]]
	,
	List[List[0.39269856373598705`], List[0.20373777768868195`], List[2.815831628877537`], List[1.1057730363825737`], List[-0.005480210873698317`], List[-0.0009158809951151993`], List[-0.0034423123820993733`], List[0.0007182092189796929`]]	
	,
	TestID->"20c22769-d3e8-4583-ad3a-941a8752c76e"
]

EndTestSection[]

BeginTestSection["genInterpData"]

VerificationTest[(* 48 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]], AMASeriesRepresentation`genInterpData[frFunc, betterRBC`aGSpecBetter]]
	,
	List[List[List[0.018732441104790748`, 0.9`, -0.03`], List[List[0.14601829966624436`], List[0.06369961218211743`], List[6.013042349804957`], List[0.8780142197396383`], List[-0.1806224856554996`], List[-0.09325283709198334`], List[1.9247235944091003`], List[0.0029879108692634215`]]], List[List[0.018732441104790748`, 0.9`, -0.010000000000000002`], List[List[0.14868082054741355`], List[0.06527367414789827`], List[6.024659268377357`], List[0.8957512835409256`], List[-0.1778052795905797`], List[-0.0987217048473819`], List[1.9076448249546005`], List[0.0007059656426881`]]], List[List[0.018732441104790748`, 0.9`, 0.009999999999999995`], List[List[0.15139448397367655`], List[0.06688217821922793`], List[6.036195215395246`], List[0.9138466597991386`], List[-0.17487164561579438`], List[-0.1043010510598685`], List[1.8898850175619066`], List[-0.0012176671269613637`]]], List[List[0.018732441104790748`, 0.9`, 0.029999999999999992`], List[List[0.15416044284326968`], List[0.068525700422499`], List[6.047644711645681`], List[0.9323075869060562`], List[-0.1718219273729577`], List[-0.10999310754232067`], List[1.8714274937048234`], List[-0.0027757490479063396`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.03`], List[List[0.15526569700385207`], List[0.06918349528169122`], List[6.052134267205134`], List[0.9396888453585026`], List[-0.170587628301855`], List[-0.11226897049219164`], List[1.863954173569793`], List[0.0013323697422963354`]]], List[List[0.018732441104790748`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.15810655850011907`], List[0.0708768082375152`], List[6.063453839849518`], List[0.9586718192429393`], List[-0.16737705849313692`], List[-0.11812198962440189`], List[1.8444954591113982`], List[0.0002963345988705103`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.1610026123064369`], List[0.07260652528313563`], List[6.074673327511174`], List[0.9780382746375345`], List[-0.16405217752854342`], List[-0.12409324758628501`], List[1.8242979670620965`], List[-0.0003562190343968979`]]], List[List[0.018732441104790748`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.16395512820910857`], List[0.0743732270022681`], List[6.085786820343178`], List[0.997795958382669`], List[-0.1606141614214676`], List[-0.13018513296064366`], List[1.8033440782771197`], List[-0.0006175443171249177`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.03`], List[List[0.16445630491004534`], List[0.07467341656310524`], List[6.087641298487849`], List[1.001150993567102`], List[-0.16002613482665012`], List[-0.1312195907459871`], List[1.7997517773884188`], List[-0.0005356487949356213`]]], List[List[0.018732441104790748`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.1674764164921173`], List[0.07648404579501585`], List[6.098623356049353`], List[1.0213755852062756`], List[-0.15645785975914062`], List[-0.13745543780166222`], List[1.7778918670702766`], List[-0.0003300661836245693`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.17055587183884124`], List[0.07833291870003874`], List[6.109486172851621`], List[1.042008740698054`], List[-0.15277998615073107`], List[-0.1438172573240638`], List[1.755236421401993`], List[0.0002840802802914056`]]], List[List[0.018732441104790748`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.1736960625822383`], List[0.08022061504316563`], List[6.12022343958678`], List[1.0630587135797471`], List[-0.148994640182958`], List[-0.1503075941258264`], List[1.7317669548586747`], List[0.0013150441341220065`]]], List[List[0.018732441104790748`, 1.1`, -0.03`], List[List[0.1736000625633458`], List[0.08016287422885868`], List[6.119900187640223`], List[1.0624150554557745`], List[-0.14911082710246018`], List[-0.15010913505733947`], List[1.7324898141326475`], List[-0.0026017536520944054`]]], List[List[0.018732441104790748`, 1.1`, -0.010000000000000002`], List[List[0.17680051749387976`], List[0.08208877067065219`], List[6.1305095630056705`], List[1.0838772632405813`], List[-0.14522361397834438`], List[-0.1567265762205987`], List[1.708213068856748`], List[-0.0011585548951502`]]], List[List[0.018732441104790748`, 1.1`, 0.009999999999999995`], List[List[0.180064570926996`], List[0.0840546277770324`], List[6.140980597626225`], List[1.1057730363825737`], List[-0.1412341258861669`], List[-0.1634776985629039`], List[1.6830851064903076`], List[0.0007182092189795674`]]], List[List[0.018732441104790748`, 1.1`, 0.029999999999999992`], List[List[0.18339374118481375`], List[0.08606101925982905`], List[6.151306615999018`], List[1.1281111334829566`], List[-0.1371455540026435`], List[-0.17036520262320842`], List[1.6570866502575816`], List[0.0030372972914998815`]]], List[List[0.0702466541429653`, 0.9`, -0.03`], List[List[0.22589022846015555`], List[0.11161987741340525`], List[3.886906599390642`], List[0.8780142197396383`], List[-0.08573309698002846`], List[-0.019686130475389172`], List[0.41410496815214415`], List[0.0029879108692634215`]]], List[List[0.0702466541429653`, 0.9`, -0.010000000000000002`], List[List[0.23016056326758397`], List[0.11416769901719503`], List[3.8918538902754074`], List[0.8957512835409256`], List[-0.08087055158725576`], List[-0.022573424666519484`], List[0.4027468690660975`], List[0.0007059656426881`]]], List[List[0.0702466541429653`, 0.9`, 0.009999999999999995`], List[List[0.23452112202434575`], List[0.11676303256767002`], List[3.896649700082331`], List[0.9138466597991386`], List[-0.0759988608391287`], List[-0.025519046069362002`], List[0.3909383955828171`], List[-0.0012176671269613637`]]], List[List[0.0702466541429653`, 0.9`, 0.029999999999999992`], List[List[0.23897424254132477`], List[0.1194063227036158`], List[3.9012890133748885`], List[0.9323075869060562`], List[-0.07112943664743301`], List[-0.0285241729717536`], List[0.37867246424603646`], List[-0.0027757490479063396`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.03`], List[List[0.24075608196631001`], List[0.12046185113185731`], List[3.903074172348415`], List[0.9396888453585026`], List[-0.06921269670388935`], List[-0.029725717088172357`], List[0.373708717219826`], List[0.0013323697422963354`]]], List[List[0.0702466541429653`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.24534230246836264`], List[0.12317271692008278`], List[3.907486844289977`], List[0.9586718192429393`], List[-0.06436703047047657`], List[-0.0328158243821955`], List[0.36079336389760114`], List[0.00029633459887046243`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.250026984402077`], List[0.12593253219800088`], List[3.9117308756750733`], List[0.9780382746375345`], List[-0.05955434317409313`], List[-0.03596835598438442`], List[0.3474041222855544`], List[-0.0003562190343968652`]]], List[List[0.0702466541429653`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.25481272414410017`], List[0.12874167848711066`], List[3.9158011505673533`], List[0.997795958382669`], List[-0.05478897220895312`], List[-0.03918457294941431`], List[0.33353439025398124`], List[-0.0006175443171249073`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.03`], List[List[0.2556260567199602`], List[0.12921802693787823`], List[3.916466914262455`], List[1.001150993567102`], List[-0.05399485637428516`], List[-0.039730715969904046`], List[0.33115894204452456`], List[-0.000535648794935506`]]], List[List[0.0702466541429653`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.2605332117894807`], List[0.13208523805961517`], List[3.9203277700793877`], List[1.0213755852062756`], List[-0.04930416141287469`], List[-0.04302293764830435`], List[0.3167199550824973`], List[-0.0003300661836245222`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.2655473371966647`], List[0.13500253145861038`], List[3.924003726410335`], List[1.042008740698054`], List[-0.0446951732770685`], List[-0.04638166661627352`], List[0.3017867987504598`], List[0.0002840802802914766`]]], List[List[0.0702466541429653`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.27067129718355537`], List[0.13797021556609732`], List[3.9274896327808073`], List[1.0630587135797471`], List[-0.04018537415664832`], List[-0.049808246410182305`], List[0.28635349473297733`], List[0.0013150441341218677`]]], List[List[0.0702466541429653`, 1.1`, -0.03`], List[List[0.2705144871267562`], List[0.13787960238454308`], List[3.927386909071358`], List[1.0624150554557745`], List[-0.04032031199626778`], List[-0.04970346974684955`], List[0.28682826178856585`], List[-0.002601753652094363`]]], List[List[0.0702466541429653`, 1.1`, -0.010000000000000002`], List[List[0.275747776284327`], List[0.14089642109410738`], List[3.9306836045813904`], List[1.0838772632405813`], List[-0.035924416302171365`], List[-0.05319715441530105`], List[0.27090446907916305`], List[-0.0011585548951502656`]]], List[List[0.0702466541429653`, 1.1`, 0.009999999999999995`], List[List[0.28109680828852507`], List[0.1439641601913258`], List[3.933780120504177`], List[1.1057730363825737`], List[-0.03166534943133275`], List[-0.05676141619568622`], List[0.25446946044714475`], List[0.0007182092189796929`]]], List[List[0.0702466541429653`, 1.1`, 0.029999999999999992`], List[List[0.28656472359981866`], List[0.14708304603639588`], List[3.9366713366239`], List[1.1281111334829566`], List[-0.02756393569820392`], List[-0.06039768084024136`], List[0.23751801509018908`], List[0.0030372972914998186`]]], List[List[0.12176086718113986`, 0.9`, -0.03`], List[List[0.2724321657690557`], List[0.13898682376819635`], List[3.222872810415281`], List[0.8780142197396383`], List[-0.038683671551547456`], List[-2.734220302693235`*^-6], List[0.10873735686485923`], List[0.0029879108692634215`]]], List[List[0.12176086718113986`, 0.9`, -0.010000000000000002`], List[List[0.2777078017899118`], List[0.14202240264844665`], List[3.225517172249157`], List[0.8957512835409256`], List[-0.03433591314416097`], List[-0.0013969699215448934`], List[0.10282348246697345`], List[0.0007059656426881`]]], List[List[0.12176086718113986`, 0.9`, 0.009999999999999995`], List[List[0.28310032810123703`], List[0.14510898891648039`], List[3.227995763651485`], List[0.9138466597991386`], List[-0.030132528630258566`], List[-0.0028193710522652115`], List[0.0966504431693155`], List[-0.0012176671269613637`]]], List[List[0.12176086718113986`, 0.9`, 0.029999999999999992`], List[List[0.28861292126074317`], List[0.14824679777267405`], List[3.230304391201447`], List[0.9323075869060562`], List[-0.026094785520898556`], List[-0.004270506591881753`], List[0.09021844116683635`], List[-0.0027757490479063396`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.03`], List[List[0.2908202613239217`], List[0.14949816011515746`], List[3.2311670482678565`], List[0.9396888453585026`], List[-0.02455312721170951`], List[-0.004850716155865385`], List[0.08761122822403458`], List[0.0013323697422963354`]]], List[List[0.12176086718113986`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.29650575521715067`], List[0.1527076883734637`], List[3.233231741288937`], List[0.9586718192429393`], List[-0.020784175140633878`], List[-0.006342887588631344`], List[0.0808192276070532`], List[0.00029633459887046243`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.30231933309416675`], List[0.15596882401501144`], List[3.235116539281641`], List[0.9780382746375345`], List[-0.01723688562728689`], List[-0.007865202883888889`], List[0.07377036453119186`], List[-0.0003562190343968652`]]], List[List[0.12176086718113986`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3082645228322098`], List[0.15928166916896622`], List[3.2368173580771575`], List[0.997795958382669`], List[-0.01393690565285898`], List[-0.00941827098805395`], List[0.0664662470582266`], List[-0.0006175443171249073`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.03`], List[List[0.3092755198587772`], List[0.15984277103830352`], List[3.237084506475818`], List[1.001150993567102`], List[-0.013409167917149236`], List[-0.009681996139266555`], List[0.06521544530504671`], List[-0.000535648794935506`]]], List[List[0.12176086718113986`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.31537902460142087`], List[0.16321608440284244`], List[3.2385653627317166`], List[1.0213755852062756`], List[-0.010432341096387094`], List[-0.011271765901741691`], List[0.05761588945565037`], List[-0.0003300661836245222`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3216221720995259`], List[0.16664119943687472`], List[3.239853564497427`], List[1.042008740698054`], List[-0.00776328542302653`], List[-0.012893651143752786`], List[0.049766192717751664`], List[0.0002840802802914766`]]], List[List[0.12176086718113986`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.32800885065453217`], List[0.17011809527288554`], List[3.240945210650396`], List[1.0630587135797471`], List[-0.005432244456904117`], List[-0.014548300641022123`], List[0.041669517837799146`], List[0.0013150441341218677`]]], List[List[0.12176086718113986`, 1.1`, -0.03`], List[List[0.3278132967828498`], List[0.17001204449054444`], List[3.2409150753867677`], List[1.0624150554557745`], List[-0.005497569781781161`], List[-0.014497705393359359`], List[0.04191830184011228`], List[-0.002601753652094363`]]], List[List[0.12176086718113986`, 1.1`, -0.010000000000000002`], List[List[0.3343429872230241`], List[0.17353909304336979`], List[3.241812464029876`], List[1.0838772632405813`], List[-0.003524661701068787`], List[-0.016184758935946335`], List[0.03358566075491428`], List[-0.0011585548951502656`]]], List[List[0.12176086718113986`, 1.1`, 0.009999999999999995`], List[List[0.34102422321725834`], List[0.17711775564609308`], List[3.242505842988498`], List[1.1057730363825737`], List[-0.0019539386428121456`], List[-0.017905893220790566`], List[0.02501388008969149`], List[0.0007182092189796929`]]], List[List[0.12176086718113986`, 1.1`, 0.029999999999999992`], List[List[0.3478612606913828`], List[0.18074788046912327`], List[3.242991562903004`], List[1.1281111334829566`], List[-0.0008204141596984285`], List[-0.01966179672455473`], List[0.016207806010136966`], List[0.0030372972914998186`]]], List[List[0.17327508021931443`, 0.9`, -0.03`], List[List[0.30800302370050003`], List[0.15913643009130843`], List[2.850667533035043`], List[0.8780142197396383`], List[-0.014074998927794912`], List[0.0014922426256489135`], List[0.010651817274672917`], List[0.0029879108692634215`]]], List[List[0.17327508021931443`, 0.9`, -0.010000000000000002`], List[List[0.3140775006935091`], List[0.16249879604426073`], List[2.8520071688135333`], List[0.8957512835409256`], List[-0.011036851339065446`], List[0.0012236349692617812`], List[0.009589325798153754`], List[0.0007059656426881`]]], List[List[0.17327508021931443`, 0.9`, 0.009999999999999995`], List[List[0.32029081374532825`], List[0.16591296281153323`], List[2.8531778639326264`], List[0.9138466597991386`], List[-0.008300277130833226`], List[0.0009496010782741228`], List[0.008433619890365127`], List[-0.0012176671269613637`]]], List[List[0.17327508021931443`, 0.9`, 0.029999999999999992`], List[List[0.3266468261021074`], List[0.16937891826727222`], List[2.854176169507993`], List[0.9323075869060562`], List[-0.0058951974914976755`], List[0.0006700313354757886`], List[0.0071909381105389565`], List[-0.0027757490479063396`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.03`], List[List[0.32919310274992336`], List[0.1707597728255937`], List[2.854521669830828`], List[0.9396888453585026`], List[-0.0050448470825589726`], List[0.0005582505719677223`], List[0.006678515762833218`], List[0.0013323697422963354`]]], List[List[0.17327508021931443`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.3357547562774141`], List[0.1742978373349583`], List[2.855273979948764`], List[0.9586718192429393`], List[-0.003154842473620824`], List[0.00027077502452192`], List[0.005326082102026615`], List[0.00029633459887046243`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.34246885206817046`], List[0.1778874874192942`], List[2.855845922136154`], List[0.9780382746375345`], List[-0.001674348059758501`], List[-0.000022507914207260197`], List[0.0039040253134968957`], List[-0.0003562190343968652`]]], List[List[0.17327508021931443`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.34933967357329304`], List[0.1815285612632359`], List[2.8562343010643683`], List[0.997795958382669`], List[-0.0006387372081947435`], List[-0.0003217155613057824`], List[0.0024206649787951494`], List[-0.0006175443171249073`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.03`], List[List[0.35050854486973554`], List[0.18214470582220071`], List[2.8562812753656956`], List[1.001150993567102`], List[-0.0005111219878669821`], List[-0.00037252375301584985`], List[0.0021663157709487417`], List[-0.000535648794935506`]]], List[List[0.17327508021931443`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.35756799462601996`], List[0.1858455654995009`], List[2.856451361857851`], List[1.0213755852062756`], List[-0.00004214112506903115`], List[-0.0006788021890888618`], List[0.000622790165444841`], List[-0.0003300661836245222`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.3647939106798532`], List[0.1895973315489132`], List[2.856431289535782`], List[1.042008740698054`], List[-0.00010069616805660013`], List[-0.0009912678599918183`], List[-0.0009616703635820791`], List[0.0002840802802914766`]]], List[List[0.17327508021931443`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.37219100343787964`], List[0.1933996847830057`], List[2.8562181884043754`], List[1.0630587135797471`], List[-0.0007277784263897378`], List[-0.0013100457561593052`], List[-0.002576536552087654`], List[0.0013150441341218677`]]], List[List[0.17327508021931443`, 1.1`, -0.03`], List[List[0.37196443715065397`], List[0.19328379863870873`], List[2.8562275028068673`], List[1.0624150554557745`], List[-0.0007000322431513288`], List[-0.0013002982859957048`], List[-0.002527293892343171`], List[-0.002601753652094363`]]], List[List[0.17327508021931443`, 1.1`, -0.010000000000000002`], List[List[0.37953215549838193`], List[0.19713485210168563`], List[2.8558245922991423`], List[1.0838772632405813`], List[-0.0019193483525262135`], List[-0.0016253190108774622`], List[-0.004160878633891936`], List[-0.0011585548951502656`]]], List[List[0.17327508021931443`, 1.1`, 0.009999999999999995`], List[List[0.38728074664641826`], List[0.20103570725638997`], List[2.8552233643365925`], List[1.1057730363825737`], List[-0.0037934726902144294`], List[-0.0019569055899385807`], List[-0.0058019061389247666`], List[0.0007182092189796929`]]], List[List[0.17327508021931443`, 1.1`, 0.029999999999999992`], List[List[0.395215351946731`], List[0.2049858826847031`], List[2.8544213374459417`], List[1.1281111334829566`], List[-0.006369117189338692`], List[-0.0022951906622314766`], List[-0.00743753899506953`], List[0.0030372972914998186`]]], List[List[0.22478929325748898`, 0.9`, -0.03`], List[List[0.3376912746989543`], List[0.17533637651673578`], List[2.600050062064447`], List[0.8780142197396383`], List[-0.002680557446864954`], List[-0.006845047359074245`], List[-0.011179055553529103`], List[0.0029879108692634215`]]], List[List[0.22478929325748898`, 0.9`, -0.010000000000000002`], List[List[0.3444504980915849`], List[0.17894099914944112`], List[2.600522538082546`], List[0.8957512835409256`], List[-0.0013257100818150017`], List[-0.006186651936086815`], List[-0.007831844931255424`], List[0.0007059656426881`]]], List[List[0.22478929325748898`, 0.9`, 0.009999999999999995`], List[List[0.3513677172649139`], List[0.1825969895789909`], List[2.6008270392983865`], List[0.9138466597991386`], List[-0.000426352926017783`], List[-0.005514956043287408`], List[-0.004429232299302864`], List[-0.0012176671269613637`]]], List[List[0.22478929325748898`, 0.9`, 0.029999999999999992`], List[List[0.35844738555781247`], List[0.1863041238913331`], List[2.600960767101726`], List[0.9323075869060562`], List[-0.000020087045435514545`], List[-0.004829690993362961`], List[-0.0009597813922287523`], List[-0.0027757490479063396`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.03`], List[List[0.36128456164650435`], List[0.1877798502610973`], List[2.6009659562423617`], List[0.9396888453585026`], List[-4.020633663046833`*^-6], List[-0.004555700504552423`], List[0.0004292437278786783`], List[0.0013323697422963354`]]], List[List[0.22478929325748898`, 0.9666666666666667`, -0.010000000000000002`], List[List[0.368598422813777`], List[0.19155782597536086`], List[2.600857084316062`], List[0.9586718192429393`], List[-0.0003514142477962192`], List[-0.003851057207317391`], List[0.00401236650404229`], List[0.00029633459887046243`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.009999999999999995`], List[List[0.37608595260162575`], List[0.1953862030374136`], List[2.600571140378474`], List[0.9780382746375345`], List[-0.0012892719429250454`], List[-0.0031321791712373382`], List[0.007692738770153542`], List[-0.0003562190343968652`]]], List[List[0.22478929325748898`, 0.9666666666666667`, 0.029999999999999992`], List[List[0.3837520778939764`], List[0.19926458107695028`], List[2.6001056824462108`], List[0.997795958382669`], List[-0.002861454074807128`], List[-0.0023987788355127764`], List[0.011484391940027906`], List[-0.0006175443171249073`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.03`], List[List[0.3850566230165765`], List[0.19992039807801382`], List[2.6000098004391496`], List[1.001150993567102`], List[-0.003190711996972518`], List[-0.0022742407589665535`], List[0.012132729765002442`], List[-0.000535648794935506`]]], List[List[0.22478929325748898`, 1.0333333333333334`, -0.010000000000000002`], List[List[0.3929377525565082`], List[0.2038565882490527`], List[2.59933177344519`], List[1.0213755852062756`], List[-0.005561816646175926`], List[-0.0015235089176536575`], List[0.016073202405824896`], List[-0.0003300661836245222`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.009999999999999995`], List[List[0.4010086671710042`], List[0.20784171903921334`], List[2.5984693748619274`], List[1.042008740698054`], List[-0.008669095686873506`], List[-0.000757611287145462`], List[0.0201582288625123`], List[0.0002840802802914766`]]], List[List[0.22478929325748898`, 1.0333333333333334`, 0.029999999999999992`], List[List[0.4092747705108399`], List[0.2118752093766319`], List[2.597420584349436`], List[1.0630587135797471`], List[-0.01256275644905966`], List[0.000023758501822347686`], List[0.02440453040222883`], List[0.0013150441341218677`]]], List[List[0.22478929325748898`, 1.1`, -0.03`], List[List[0.4090215285756092`], List[0.21175235897975267`], List[2.5974551001155506`], List[1.0624150554557745`], List[-0.012432799137518193`], List[-1.3392860129091142`*^-7], List[0.02427340385289263`], List[-0.002601753652094363`]]], List[List[0.22478929325748898`, 1.1`, -0.010000000000000002`], List[List[0.41748221912695405`], List[0.2158321328106449`], List[2.5962237757267936`], List[1.0838772632405813`], List[-0.017138961157553968`], List[0.000796537918049142`], List[0.02869291780954301`], List[-0.0011585548951502656`]]], List[List[0.22478929325748898`, 1.1`, 0.009999999999999995`], List[List[0.4261492052699692`], List[0.21995894523494555`], List[2.5948025309165064`], List[1.1057730363825737`], List[-0.022736578071418368`], List[0.0016093036035632275`], List[0.033309301718314664`], List[0.0007182092189796929`]]], List[List[0.22478929325748898`, 1.1`, 0.029999999999999992`], List[List[0.4350283672061279`], List[0.22413203374119503`], List[2.5931898205351462`], List[1.1281111334829566`], List[-0.0292822134510275`], List[0.002438488245052656`], List[0.0381420231119891`], List[0.0030372972914998186`]]]]	
	,
	TestID->"d193cefb-89c8-4a54-b18f-2b0b15a7b43c"
]

EndTestSection[]

BeginTestSection["parallelMakeGenericInterpFuncs(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelDoGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelPestGenericIterREInterp(not implemented for gSpec)"]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 49 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBC`"], Set[X0Z0, AMASeriesRepresentation`genX0Z0Funcs[betterRBC`linModBetter]], Set[reapRes, Reap[AMASeriesRepresentation`genFRExtFunc[List[4, 1, 4], betterRBC`linModBetter, List[X0Z0, 2], betterRBC`rbcEqnsBetter]]], If[SameQ[Length[Kernels[]], 0], LaunchKernels[]], Apply[DistributeDefinitions, Flatten[Part[reapRes, 2]]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv], betterRBC`theDistBetter]]], Set[smolRngErg, Transpose[List[betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ]]], Set[toIg, Part[betterRBC`aGSpecBetter, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBC`betterRBCMean, betterRBC`betterRBCSD, betterRBC`betterRBCMinZ, betterRBC`betterRBCMaxZ, betterRBC`betterRBCvv]]], CompoundExpression[ParallelEvaluate[Get["tests/pathSetup.mth"]], ParallelNeeds["AMASeriesRepresentation`"]], AMASeriesRepresentation`parallelSmolyakGenInterpData[Part[reapRes, 1], sgSpecErg]]
	,
	List[List[0.3638760820815009`, 0.1891228321946739`, 2.7667604144535893`, 1.0067579396695616`, -0.00006295039980570564`, 4.91006731241826`*^-6, 0.00010249209382328216`, -0.00005093386149024326`], List[0.3531314812150734`, 0.18352384520141476`, 2.766685492199956`, 0.9770037459168245`, -0.00027634891637553843`, -0.00005763709053384586`, -0.00021653560213679492`, 0.00022338592756643294`], List[0.3750045137438051`, 0.19483572474345145`, 2.766415457694844`, 1.0374182835262011`, -0.0011173507132394883`, 0.00006936206970102818`, 0.0004453207642773763`, 0.0005808964533553507`], List[0.3629871993119433`, 0.1886627290347334`, 2.758097244536763`, 1.0011539942243877`, -0.00003481161811276733`, -0.000023300172385764335`, 0.00013822632991160772`, -0.000050049862938550405`], List[0.3647454964770752`, 0.1895723172556278`, 2.7755249992293702`, 1.0123602438284505`, -0.00009848445595431546`, 3.931920845744672`*^-6, 0.00002269753705708009`, -0.00005345914632659543`], List[0.3898836185534583`, 0.2023364679218857`, 2.698130228782924`, 1.051956776926357`, -0.004565171075967445`, 0.00039614943664759936`, 0.006483941582544401`, -0.00011737394471933449`], List[0.33855082108620616`, 0.17579651683449807`, 2.83990452648857`, 0.9614520092491388`, -0.0024822968196485415`, 0.00024186628631668394`, 0.003789933576409933`, -0.00009158694188837746`]]	
	,
	TestID->"a5041759-f0d8-4adc-92af-6fd5ca57d91e"
]

EndTestSection[]

EndTestSection[]

EndTestSection[]

EndTestSection[]

BeginTestSection["betterRBCFixCompSlack"]

BeginTestSection["nestGenericIterREInterp(not implemented)"]

EndTestSection[]

BeginTestSection["parallelNestGenericIterREInterp"]

BeginTestSection["sgSpec"]

BeginTestSection["genBothX0Z0Funcs"]

VerificationTest[(* 50 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], List[Apply[Part[X0Z0, 1], Flatten[betterRBCFixCompSlack`anXEpsBetterFixCompSlack]], Apply[Part[X0Z0, 2], Flatten[betterRBCFixCompSlack`anXEpsBetterFixCompSlack]]]]
	,
	List[List[List[0.5544556252205932`], List[0.5254628884391535`], List[0.6874628884391535`], List[-1.2435983224044906`], List[0.`], List[-1.261270729949251`], List[1.0095`], List[0], List[0], List[0], List[0], List[0], List[0], List[0]], List[List[0.5544556252205932`], List[0.5254628884391535`], List[0.6874628884391535`], List[-1.2535983224044904`], List[0.`], List[-1.261270729949251`], List[1.0095`], List[0], List[0], List[0], List[0], List[0], List[0], List[0]]]	
	,
	TestID->"d3b99b8f-a158-4f69-a56e-9ecd721682fd"
]

EndTestSection[]

BeginTestSection["evaluateTriple"]

VerificationTest[(* 51 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], AMASeriesRepresentation`evaluateTriple[Part[frFunc, 1, 1], Flatten[betterRBCFixCompSlack`anXEpsBetterFixCompSlack]]]
	,
	$Failed	
	,
	TestID->"ea541dfa-a324-482d-8689-01d9d30448fc"
]

VerificationTest[(* 52 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], AMASeriesRepresentation`evaluateTriple[Part[frFunc, 1, 1], Flatten[List[99, 99, 2.66`, 99, 99, 99, 1.01`, 0.01`]]]]
	,
	List[List[1.044044282141906`], List[0.406081383324633`], List[2.800081383324633`], List[-0.9578137796497029`], List[0.`], List[-0.9766283581992782`], List[1.019643253155594`], List[-0.023551150721841194`], List[-0.02475521375334521`], List[-0.0029502581585640177`], List[0.00014325315559382545`], List[-0.010010865202787203`], List[4.655815504705008`*^-17], List[0.`]]	
	,
	TestID->"dcacee11-0f68-44ef-90d0-2cc773586f08"
]

VerificationTest[(* 53 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], AMASeriesRepresentation`evaluateTriple[Part[frFunc, 1, 2], Flatten[betterRBCFixCompSlack`anXEpsBetterFixCompSlack]]]
	,
	List[List[0.470001804083852`], List[0.07997750582949119`], List[0.2419775058294912`], List[-2.1276514075286235`], List[0.`], List[-2.169445402753564`], List[1.019643253155594`], List[-0.8189678229184219`], List[-0.5463752535348115`], List[-0.02592967483392774`], List[0.00014325315559382545`], List[-0.8134341865604078`], List[2.468116472720088`*^-17], List[0.`]]	
	,
	TestID->"9e447621-d826-45c5-8a66-889c764079e1"
]

VerificationTest[(* 54 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], AMASeriesRepresentation`evaluateTriple[Part[frFunc, 1, 2], Flatten[List[99, 99, 2.66`, 99, 99, 99, 1.01`, 0.01`]]]]
	,
	List[List[1.044044282141906`], List[0.406081383324633`], List[2.800081383324633`], List[-0.9578137796497029`], List[0.`], List[-0.9766283581992782`], List[1.019643253155594`], List[-0.023551150721841194`], List[-0.02475521375334521`], List[-0.0029502581585640177`], List[0.00014325315559382545`], List[-0.010010865202787203`], List[4.655815504705008`*^-17], List[0.`]]	
	,
	TestID->"477a6422-f810-4cc8-af5c-9057e783b794"
]

EndTestSection[]

BeginTestSection["parallelSmolyakGenInterpData"]

VerificationTest[(* 55 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv], betterRBCFixCompSlack`theDistBetterFixCompSlack]]], Set[smolRngErg, Transpose[List[betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ]]], Set[toIg, Part[betterRBCFixCompSlack`aGSpecBetterFixCompSlack, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv]]], AMASeriesRepresentation`parallelSmolyakGenInterpData[frFunc, sgSpecErg]]
	,
	List[List[1.2526132061619872`, 0.38459030434633523`, 3.8759821996976243`, -0.7983310371315695`, 0.`, -0.8022938972229664`, 1.004963930884656`, -0.00010812450034487188`, 1.4953089269347454`*^-6, 0.00004611893714021324`, -6.474230880293419`*^-7, -0.000018640793250944837`, 6.246018453220277`*^-17, 0.`], List[1.2320546049504446`, 0.3567622293322952`, 3.8481541246835844`, -0.8116523374710499`, 0.`, -0.7915742972638717`, 0.9752627581043661`, -0.000020014548172426808`, -0.00025762784244852795`, 0.0000997032222715948`, 0.0002981797966220556`, -0.000010298997593422996`, 6.98936592130483`*^-17, 0.`], List[1.274394666307555`, 0.4126691141003607`, 3.90406100945165`, -0.7846862721871012`, 0.`, -0.8125972796483163`, 1.0355696390398428`, -0.0006703833138560671`, 0.0002685099351151271`, 0.0008158101107506511`, 0.0006050607320986501`, -0.00002398862952458203`, -1.5710692659417633`*^-17, 0.`], List[1.258041139986467`, 0.36351392600626514`, 3.9408285758228874`, -0.7948865646879856`, 0.`, -0.7843024840244095`, 0.986684791096286`, -0.00020403843516510762`, -0.0005992661823623008`, -0.00016957294199354528`, -4.685398647619188`*^-6, -0.00011214470708471591`, 6.44908097148925`*^-16, 0.`], List[1.2469743224344425`, 0.4050931872255437`, 3.810562328111499`, -0.8019411322341589`, 0.`, -0.8205666862531714`, 1.0232255876028242`, -0.00004024050739526666`, -0.00015385913055089947`, 0.0001319379341864037`, -0.000014092517730324161`, -3.1139835081142174`*^-6, 4.435002727457103`*^-16, 0.`], List[1.3237378806138445`, 0.41097240906760785`, 4.090370542477663`, -0.7554365668951616`, 0.`, -0.7893554627539866`, 1.0448997273169227`, -0.0036049399244493818`, 0.0009125167157723956`, 0.002343104838440028`, -0.000052316049959477695`, -0.00039577878782408885`, 4.901091591879455`*^-16, 0.`], List[1.1871083782896774`, 0.3538834346971167`, 3.6572690919896402`, -0.8423830698935397`, 0.`, -0.8128528341032518`, 0.9649444096804795`, -0.0014344336595451897`, 0.0005212225333513621`, 0.001218575195182564`, -0.00003270356812634656`, -0.000153261521604036`, 1.2039446435525565`*^-16, 0.`]]	
	,
	TestID->"d4e3cf3c-05f3-4a25-b3aa-5f2aba23befe"
]

EndTestSection[]

BeginTestSection["parallelMakeGenericInterpFunc"]

VerificationTest[(* 56 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv], betterRBCFixCompSlack`theDistBetterFixCompSlack]]], Set[smolRngErg, Transpose[List[betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ]]], Set[toIg, Part[betterRBCFixCompSlack`aGSpecBetterFixCompSlack, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv]]], Set[theRes, AMASeriesRepresentation`parallelMakeGenericInterpFuncs[frFunc, List[], sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]], Through[Function[Apply[theRes, Slot[1]]][betterRBCFixCompSlack`anXEpsFlatBetterFixCompSlack]]]=={{{0.7282176329007075}, {0.2717715381826382}, {0.43377153818253134}, 
  {-1.3213443937367202}, {0.}, {-1.2240846758421564}, 
  {1.0130317085672667}, {-0.18108287037353316}, {-0.08565209611116903}, 
  {0.10778441043475162}, {-0.006468291432723098}, 
  {-0.03251919872270716}, {1.9840004058519422*^-13}, {0.}}, 
 {{0.7210930261940705}, {0.262439795739821}, {0.4244397957397139}, 
  {-1.3258567064095186}, {0.}, {-1.2206039663287485}, 
  {1.0029303148046118}, {-0.18094813661000517}, {-0.08574022411218879}, 
  {0.10761932633493865}, {-0.006569685195378045}, 
  {-0.032517083431829075}, {1.984182374398824*^-13}, {0.}}}
	,
True
,
	TestID->"8306e0c0-2c0a-4f3f-a6db-d7205231c1c4"
]

EndTestSection[]

BeginTestSection["parallelDoGenericIterREInterp"]

VerificationTest[(* 57 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv], betterRBCFixCompSlack`theDistBetterFixCompSlack]]], Set[smolRngErg, Transpose[List[betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ]]], Set[toIg, Part[betterRBCFixCompSlack`aGSpecBetterFixCompSlack, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv]]], Set[theRes, AMASeriesRepresentation`parallelDoGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[]]], Through[Function[Apply[theRes, Slot[1]]][betterRBCFixCompSlack`anXEpsFlatBetterFixCompSlack]]]
	,
	List[List[List[0.7282176329007075`], List[0.2717715381826382`], List[0.43377153818253134`], List[1.019643253155594`], List[0.`], List[-1.2240846758421564`], List[1.0130317085672667`], List[-0.18108287037353316`], List[-0.08565209611116903`], List[0.10778441043475162`], List[-0.006468291432723098`], List[-0.03251919872270716`], List[1.9840004058519422`*^-13], List[0.`]], List[List[0.7210930261940705`], List[0.262439795739821`], List[0.4244397957397139`], List[1.0095481094137133`], List[0.`], List[-1.2206039663287485`], List[1.0029303148046118`], List[-0.18094813661000517`], List[-0.08574022411218879`], List[0.10761932633493865`], List[-0.006569685195378045`], List[-0.032517083431829075`], List[1.984182374398824`*^-13], List[0.`]]]	
	,
	TestID->"1e80f75f-8f22-467c-ae7a-c44020753bb1"
]

EndTestSection[]

BeginTestSection["parallelNestGenericIterREInterp"]

VerificationTest[(* 58 *)
	CompoundExpression[Needs["AMASeriesRepresentation`"], Needs["betterRBCFixCompSlack`"], Set[X0Z0, AMASeriesRepresentation`genBothX0Z0Funcs[betterRBCFixCompSlack`linModBetterFixCompSlack]], Set[frFunc, AMASeriesRepresentation`genFRExtFunc[List[7, 1, 7], betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack]], Set[smolStuff, Set[List[ptErg, tfErg, plyErg, iplyErg, dplyErg], AMASeriesRepresentation`smolyakInterpolationPrep[List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv], betterRBCFixCompSlack`theDistBetterFixCompSlack]]], Set[smolRngErg, Transpose[List[betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ]]], Set[toIg, Part[betterRBCFixCompSlack`aGSpecBetterFixCompSlack, 1]], Set[sgSpecErg, List[toIg, smolRngErg, ptErg, tfErg, plyErg, iplyErg, 1, List[1, 1, 1], List[betterRBCFixCompSlack`betterRBCCSMean, betterRBCFixCompSlack`betterRBCCSSD, betterRBCFixCompSlack`betterRBCCSMinZ, betterRBCFixCompSlack`betterRBCCSMaxZ, betterRBCFixCompSlack`betterRBCCSvv]]], Set[theRes, AMASeriesRepresentation`parallelNestGenericIterREInterp[AMASeriesRepresentation`genFRExtFunc, betterRBCFixCompSlack`linModBetterFixCompSlack, List[X0Z0, 2], betterRBCFixCompSlack`rbcEqnsBetterFixCompSlack, sgSpecErg, AMASeriesRepresentation`smolyakInterpolation, List[], 3]], Through[Function[Apply[Part[theRes, -1], Slot[1]]][betterRBCFixCompSlack`anXEpsFlatBetterFixCompSlack]]]
	,
	List[List[List[0.802455442864961`], List[0.19753372821824874`], List[0.3595337282183075`], List[1.019643253155594`], List[0.`], List[-1.030006607596944`], List[1.0130317085672667`], List[-0.04813293365257225`], List[-0.08565209611130103`], List[0.12049070417342014`], List[-0.006468291432723117`], List[-0.20467160623812203`], List[-4.285146671151949`*^-13], List[0.`]], List[List[0.7890196230245992`], List[0.1945131989091565`], List[0.35651319890921496`], List[1.0095481094137133`], List[0.`], List[-1.028851524825434`], List[1.0029303148046118`], List[-0.04425842879794385`], List[-0.08574022411232093`], List[0.11837673024022302`], List[-0.006569685195378064`], List[-0.20474671445772796`], List[-4.284825426978256`*^-13], List[0.`]]]	
	,
	TestID->"f2812e91-cdc7-4a25-97a3-58c84fa24c02"
]

EndTestSection[]

EndTestSection[]

BeginTestSection["gSpec(not implemented)"]

EndTestSection[]

EndTestSection[]

EndTestSection[]

EndTestSection[]
