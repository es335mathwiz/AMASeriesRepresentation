Print["reconcile which libsvmr"]

Switch[$OperatingSystem,
  "MacOSX", $svmrDir = "~/git/svmStuff/SVMR"; $manchesterDir = 
   "/Users/garyanderson/git/manchesterCS/"; $netBeansDir = 
   "/Users/garyanderson/NetBeansProjects/libSvmMac/",
  "Windows", $svmrDir = "g:/git/svmStuff/SVMR"; $manchesterDir = 
   "g:/git/manchesterCS/";
  $netBeansDir = "g:/NetBeansProjects/myLibsvm/",
  "Unix", $svmrDir = "~/git/svmStuff/SVMR"; $manchesterDir = 
   "/msu/home/m1gsa00/git/manchestemrCS/";
  $netBeansDir = "/msu/home/m1gsa00/NetBeansProjects/myLibsvm/"];
Get["pathSetup.mth"]
Needs["AMASeriesRepresentation`"]
Needs["mathSmolyak`"]
Get["firmValue`"]
$Path=PrependTo[$Path,$svmrDir]
X0Z0=genX0Z0Funcs[linModFV];

anXEpsFV={{1},{2},{3}};
anXEpsFlatFV=Flatten[anXEpsFV];
anXFV=Drop[anXEpsFV,-1]
anXFlatFV=Flatten[anXFV];

theLilFunc=genLilXkZkFunc[linModFV, {X0Z0,2},anXEpsFV];


theFR=genFRFunc[{2,1,2},theLilFunc,eqnsCompiledFV];
theFR@@anXEpsFlatFV

theFP=genFPFunc[{genFRFunc},linModFV,{X0Z0,2},eqnsCompiledFV];

theFP@@anXEpsFlatFV





Needs["JLink`"]; Needs["SVMR`"];
AddToClassPath[$netBeansDir <> "build/classes/"];
LoadJavaClass["libsvm.svm"];







smolRng=#[[{2,3}]]&/@Drop[aGSpecFV,2][[1]];
{pt,tf,ply,ig}=smolyakInterpolationPrep[{1,1},smolRng,theDistFV];
sgSpec={{2},smolRng,pt,tf,ply,ply/.xx[2]->0,1};

siData=smolyakGenInterpData[theFP,sgSpec];

cx=Import["/Users/garyanderson/git/manchesterCS/61011/project/cx.mat"]
cy=Flatten[Import["/Users/garyanderson/git/manchesterCS/61011/project/cy.mat"]]
svmt[mmaUreadUproblemPoly[cx,cy, {100, .001, 10, .2, 1}]]
(*
tryX=pt//N;tryY=Flatten[First/@siData]//N;
InstallJava[]
svmtLinear = JavaNew["libsvm.trainGuts"];
svmtLinear[mmaUreadUproblemLinear[tryX,tryY, {100, .001, 0, .2, 1}]];
modLinear = 
     libsvm`svm`svmUtrain[svmtLinear[prob],svmtLinear[param]];
svindLinear = modLinear[svUindices];
someLinear = (libsvm`svm`svmUpredict[modLinear, #1] &) /@ 
   tryX[[svindLinear]];



svmDoer = 
 JavaNew["libsvm.svm"];
mod = svmDoer[svmUtrain[svmt[prob], svmt[param]]]; 
svind = 
 mod[svUindices];
some = svmDoer[svmUpredict[mod, #]] & /@ Transpose[allCX][[svind]];,


svmtLinear = JavaNew["libsvm.trainGuts"];
svmtLinear[mmaUreadUproblemLinear[newX,newY, {1, .01}]];
modLinear = 
     libsvm`svm`svmUtrain[svmtLinear[prob],svmtLinear[param]];
svindLinear = modLinear[svUindices];
someLinear = (libsvm`svm`svmUpredict[modLinear, #1] &) /@ 
   tryX[[svindLinear]];


*)
