Get["tests/pathSetup.mth"]
Get["AMASeriesRepresentation`"]
Get["firstRBCTrips.m"]
Get["firstRBCCSTrips.m"]


approx=1*{1,1,1};
iters=8;
theK=5;
refModel={linModFirstRBCTrips,rbcEqnsFirstRBCTrips,firstRBCTripsExactDR,firstRBCTripsExactDRCE,forErgodicInfo,theDistFirstRBCTrips,toIg}=
(*alphaVal,deltaVal,etaVal,rhoVal.sigmaVal*)
firstRBCGenModel[0.36,0.95,1,0.95,0.01];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,theFullXs}=
doSmolPrep[approx,iters,theK,forErgodicInfo,toIg,linModFirstRBCTrips,theDistFirstRBCTrips];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModFirstRBCTrips,
{bothX0Z0,theK},rbcEqnsFirstRBCTrips,sgSpecErg,smolyakInterpolation,{},theFullXs]];
bothX0Z0Ref=bothX0Z0;
(*
approxCS=1*{1,1,1};
itersCS=8;
theKCS=5;
{linModFirstRBCCSTrips,rbcEqnsFirstRBCCSTrips,forErgodicInfoCS,theDistFirstRBCCSTrips,toIgCS}=
(*alphaVal,ddVal,deltaVal,etaVal,rhoVal,sigmaVal,upsilonVal*)
firstRBCCSGenModel[0.36,1,0.95,1,0.95,0.01,.975];(*constraint shouldntbind*)
{tryEpsCS,numKernCS,theNameCS,mthNameCS,bothX0Z0CS,sgSpecErgCS,zPtsCS,theFullXsCS}=
doSmolPrep[approxCS,itersCS,theKCS,forErgodicInfoCS,toIgCS,linModFirstRBCCSTrips,theDistFirstRBCCSTrips];
{tmCS,igCS}=Timing[
theResCS=parallelNestGenericIterREInterp[genFRExtFunc,linModFirstRBCCSTrips,
{bothX0Z0CS,theKCS},rbcEqnsFirstRBCCSTrips,sgSpecErgCS,smolyakInterpolation,{},theFullXsCS]];

(*firstRBCCSTrips`Private`upsilon*firstRBCCSTrips`Private`II//.firstRBCCSTrips`Private`ssFRSolnSubs/.firstRBCCSTrips`Private`paramSubs   0.182356*)
{theRes[[-1,-1,1]] @@ Flatten[anXEpsFirstRBCTrips],theResCS[[-1,-1,1]] @@ Flatten[anXEpsFirstRBCCSTrips],firstRBCTripsExactDR @@ Flatten[anXEpsFirstRBCTrips]}



paramTrials=genTestPts[
pRanges={{0.20,0.85,1,0.85,0.005},{0.40,0.99,1,0.99,0.015}},10,Nied];
*)
(*
varyParamsForSlSq[pRanges,firstRBCGenModel,10,{1,1,1}]



linModData=First/@(varyParamsGenMods[pRanges,firstRBCGenModel,10]);


{rbcEqnsFirstRBCTrips,theFullXs,firstRBCTripsExactDR,theSmolGS}=
doRefModel[{1,1,1}]

toSee=doGuessToRefModel[guessFuncs[[-1]],1,linModData[[-1]],{rbcEqnsFirstRBCTrips,theFullXs,firstRBCTripsExactDR,theSmolGS}]


assessSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModData[[-1]],firstRBCTripsExactDR},toSee[[4,-1]]]

assessNextSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModData[[-1]],firstRBCTripsExactDR},toSee[[4,-1]],1]


allSee=MapThread[doGuessToRefModel[#1,1,#2,{rbcEqnsFirstRBCTrips,theFullXs,firstRBCTripsExactDR,theSmolGS}]&,{guessFuncs,linModData}]


assessSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModData[[-1]],f
irstRBCTripsExactDR},theRes[[4,-1]],"useTail"->False]


assessNextSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModData[[-1]],firstRBCTripsExactDR},theRes[[4,1]],4,"useTail"->False]

MapThread[
assessNextSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,#1,firstRBCTripsExactDR},#2[[4,1]],4,"useTail"->False]&,{linModData,guessFuncs}]
*)

doSolve[approx_?VectorQ,alphaVal_?NumberQ,
deltaVal_?NumberQ,
etaVal_?NumberQ,
rhoVal_?NumberQ,
sigmaVal_?NumberQ]:=
Module[{linModFirstRBCTrips,rbcEqnsFirstRBCTrips,firstRBCTripsExactDR,firstRBCTripsExactDRCE,forErgodicInfo,theDistFirstRBCTrips,toIg,
tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,theFullXs},
{linModFirstRBCTrips,rbcEqnsFirstRBCTrips,firstRBCTripsExactDR,firstRBCTripsExactDRCE,forErgodicInfo,theDistFirstRBCTrips,toIg}=
(*alphaVal,ddVal,deltaVal,etaVal,rhoVal,sigmaVal,upsilonVal*)
firstRBCGenModel[alphaVal,deltaVal,etaVal,rhoVal,sigmaVal];
{tryEps,numKern,theName,mthName,bothX0Z0,sgSpecErg,zPts,theFullXs}=
doSmolPrep[approx,iters,theK,forErgodicInfo,toIg,linModFirstRBCTrips,theDistFirstRBCTrips];
{tm,ig}=Timing[
theRes=parallelNestGenericIterREInterp[genFRExtFunc,linModFirstRBCTrips,
{bothX0Z0,theK},rbcEqnsFirstRBCTrips,sgSpecErg,smolyakInterpolation,{},theFullXs]];
{tm,ig}=Timing[
theResRef=parallelNestGenericIterREInterp[genFRExtFunc,linModFirstRBCTrips,
{bothX0Z0Ref,theK},rbcEqnsFirstRBCTrips,sgSpecErg,smolyakInterpolation,{},theFullXs]];
{theRes,theResRef}]  


(*



paramTrialsSolns=(doSolve @@ Prepend[#,{1,1,1}])& /@paramTrials;

assessErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModFirstRBCTrips,firstRBCTripsExactDR},paramTrialsSolns[[2,4,1]],simplestErrXtm1Eps,"useTail"->True]

assessNextSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModFirstRBCTrips,firstRBCTripsExactDR},paramTrialsSolns[[2,4,-1]],1,"useTail"->True]


assessSimplestErrPrediction[{rbcEqnsFirstRBCTrips,theFullXs,1,linModFirstRBCTrips,firstRBCTripsExactDR},paramTrialsSolns[[2,4,-1]],"useTail"->True]


ship=varyParamsForSlSq[pRanges,firstRBCGenModel,10,2*{1,1,1},1];
Dimensions[ship[[2]]]

Out[133]= {300, 10, 6, 4}
Dimensions[ship[[1]]]

Out[135]= {10, 10, 4}
Dimensions[ship[[3]]]

Out[136]= {10, 10, 6, 4}

allcoeffs10x10=Flatten[ship[[3,All,All,1,1]],1]

allcoeffs300x10=Flatten[ship[[2,All,All,1,1]],1]
first=ship[[2,1+Range[0,299,3],All,1,1]]

fhip=varyParamsForSlSq[pRanges,firstRBCGenModel,10,2*{1,1,1},5];
Dimensions[fhip[[1]]]

Out[134]= {10, 10, 4}


In[129]:= Dimensions[fhip[[2]]]
Out[129]= {2083, 10, 6, 4}
reflects number of iterations
hell=fhip[[1,All,All,1]]


Dimensions[fhip[[3]]]

Out[137]= {10, 10, 6, 4}




Flatten[Flatten[someRes,1][[All,4]],1]


try1=ship[[1,1,1,4,1]];

hmm=getSlopesRSqs[try1,linModFirstRBCTrips,1,{1,3},1*{1,1,1},1];
*)
